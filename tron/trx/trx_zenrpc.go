// Code generated by zenrpc; DO NOT EDIT.

package trx

import (
	"context"
	"encoding/json"

	"github.com/semrush/zenrpc/v2"
	"github.com/semrush/zenrpc/v2/smd"
)

var RPC = struct {
	Service struct{ Getinfo, GetNewAddress, ValidateAddress, ListTransactions, SendToAddress, GetRecords string }
}{
	Service: struct{ Getinfo, GetNewAddress, ValidateAddress, ListTransactions, SendToAddress, GetRecords string }{
		Getinfo:          "getinfo",
		GetNewAddress:    "getnewaddress",
		ValidateAddress:  "validateaddress",
		ListTransactions: "listtransactions",
		SendToAddress:    "sendtoaddress",
		GetRecords:       "getrecords",
	},
}

func (Service) SMD() smd.ServiceInfo {
	return smd.ServiceInfo{
		Description: ``,
		Methods: map[string]smd.Service{
			"Getinfo": {
				Description: `Getinfo  获取钱包信息`,
				Parameters:  []smd.JSONSchema{},
				Returns: smd.JSONSchema{
					Description: ``,
					Optional:    false,
					Type:        smd.Object,
					Properties: map[string]smd.Property{
						"Version": {
							Description: ``,
							Type:        smd.Integer,
						},
						"ProtocolVersion": {
							Description: ``,
							Type:        smd.Integer,
						},
						"WalletVersion": {
							Description: ``,
							Type:        smd.Integer,
						},
						"Balance": {
							Description: ``,
							Ref:         "#/definitions/json.Number",
							Type:        smd.Object,
						},
						"Difficulty": {
							Description: ``,
							Type:        smd.Integer,
						},
						"BlockHeight": {
							Description: ``,
							Type:        smd.Integer,
						},
						"Blocks": {
							Description: ``,
							Type:        smd.Integer,
						},
						"Connections": {
							Description: ``,
							Type:        smd.Integer,
						},
						"TimeOffset": {
							Description: ``,
							Type:        smd.Integer,
						},
						"Time": {
							Description: ``,
							Type:        smd.Integer,
						},
					},
					Definitions: map[string]smd.Definition{
						"json.Number": {
							Type:       "object",
							Properties: map[string]smd.Property{},
						},
					},
				},
			},
			"GetNewAddress": {
				Description: `GetNewAddress  获取新地址`,
				Parameters:  []smd.JSONSchema{},
				Returns: smd.JSONSchema{
					Description: ``,
					Optional:    false,
					Type:        smd.String,
				},
			},
			"ValidateAddress": {
				Description: `ValidateAddress 校验地址`,
				Parameters: []smd.JSONSchema{
					{
						Name:        "addr",
						Optional:    false,
						Description: ``,
						Type:        smd.String,
					},
				},
				Returns: smd.JSONSchema{
					Description: ``,
					Optional:    false,
					Type:        smd.Object,
					Properties: map[string]smd.Property{
						"isvalid": {
							Description: ``,
							Type:        smd.Boolean,
						},
					},
				},
			},
			"ListTransactions": {
				Description: `ListTransactions 获取指定地址最近的交易记录`,
				Parameters: []smd.JSONSchema{
					{
						Name:        "addr",
						Optional:    true,
						Description: ``,
						Type:        smd.String,
					},
					{
						Name:        "count",
						Optional:    true,
						Description: ``,
						Type:        smd.Integer,
					},
					{
						Name:        "skip",
						Optional:    true,
						Description: ``,
						Type:        smd.Integer,
					},
				},
				Returns: smd.JSONSchema{
					Description: ``,
					Optional:    false,
					Type:        smd.Array,
					Items: map[string]string{
						"$ref": "#/definitions/util.Transactions",
					},
					Definitions: map[string]smd.Definition{
						"util.Transactions": {
							Type: "object",
							Properties: map[string]smd.Property{
								"account": {
									Description: ``,
									Type:        smd.String,
								},
								"txid": {
									Description: ``,
									Type:        smd.String,
								},
								"address": {
									Description: ``,
									Type:        smd.String,
								},
								"publickey": {
									Description: `公钥新版字段 如果有就是新版`,
									Type:        smd.String,
								},
								"fromaddress": {
									Description: ``,
									Type:        smd.String,
								},
								"category": {
									Description: ``,
									Type:        smd.String,
								},
								"amount": {
									Description: ``,
									Ref:         "#/definitions/json.Number",
									Type:        smd.Object,
								},
								"fee": {
									Description: ``,
									Ref:         "#/definitions/json.Number",
									Type:        smd.Object,
								},
								"vout": {
									Description: ``,
									Type:        smd.Integer,
								},
								"confirmations": {
									Description: ``,
									Type:        smd.Integer,
								},
								"generated": {
									Description: ``,
									Type:        smd.Boolean,
								},
								"blockhash": {
									Description: ``,
									Type:        smd.String,
								},
								"blockindex": {
									Description: ``,
									Type:        smd.Integer,
								},
								"blocktime": {
									Description: ``,
									Type:        smd.Integer,
								},
								"time": {
									Description: ``,
									Type:        smd.Integer,
								},
								"timereceived": {
									Description: ``,
									Type:        smd.Integer,
								},
							},
						},
						"json.Number": {
							Type:       "object",
							Properties: map[string]smd.Property{},
						},
					},
				},
			},
			"SendToAddress": {
				Description: `SendToAddress 提币请求`,
				Parameters: []smd.JSONSchema{
					{
						Name:        "addr",
						Optional:    false,
						Description: ``,
						Type:        smd.String,
					},
					{
						Name:        "amount",
						Optional:    false,
						Description: ``,
						Type:        smd.Object,
						Properties:  map[string]smd.Property{},
					},
				},
				Returns: smd.JSONSchema{
					Description: ``,
					Optional:    false,
					Type:        smd.String,
				},
			},
			"GetRecords": {
				Description: `GetRecords  归集交易记录 中转记录`,
				Parameters: []smd.JSONSchema{
					{
						Name:        "sTime",
						Optional:    false,
						Description: ``,
						Type:        smd.Integer,
					},
					{
						Name:        "eTime",
						Optional:    false,
						Description: ``,
						Type:        smd.Integer,
					},
				},
				Returns: smd.JSONSchema{
					Description: ``,
					Optional:    false,
					Type:        smd.Array,
					Items: map[string]string{
						"$ref": "#/definitions/util.SummaryData",
					},
					Definitions: map[string]smd.Definition{
						"util.SummaryData": {
							Type: "object",
							Properties: map[string]smd.Property{
								"txid": {
									Description: ``,
									Type:        smd.String,
								},
								"account": {
									Description: ``,
									Type:        smd.String,
								},
								"address": {
									Description: ``,
									Type:        smd.String,
								},
								"publickey": {
									Description: `公钥新版字段 如果有就是新版`,
									Type:        smd.String,
								},
								"fromaddress": {
									Description: ``,
									Type:        smd.String,
								},
								"amount": {
									Description: ``,
									Type:        smd.String,
								},
								"blockindex": {
									Description: ``,
									Type:        smd.Integer,
								},
								"blocktime": {
									Description: ``,
									Type:        smd.Integer,
								},
								"category": {
									Description: ``,
									Type:        smd.String,
								},
								"fee": {
									Description: ``,
									Type:        smd.String,
								},
								"time": {
									Description: ``,
									Type:        smd.Integer,
								},
								"timeReceived": {
									Description: ``,
									Type:        smd.Integer,
								},
							},
						},
					},
				},
			},
		},
	}
}

// Invoke is as generated code from zenrpc cmd
func (s Service) Invoke(ctx context.Context, method string, params json.RawMessage) zenrpc.Response {
	resp := zenrpc.Response{}
	var err error

	switch method {
	case RPC.Service.Getinfo:
		resp.Set(s.Getinfo())

	case RPC.Service.GetNewAddress:
		resp.Set(s.GetNewAddress())

	case RPC.Service.ValidateAddress:
		var args = struct {
			Addr string `json:"addr"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"addr"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.ValidateAddress(args.Addr))

	case RPC.Service.ListTransactions:
		var args = struct {
			Addr  *string `json:"addr"`
			Count *int    `json:"count"`
			Skip  *int    `json:"skip"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"addr", "count", "skip"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		//zenrpc:addr="*"
		if args.Addr == nil {
			var v string = "*"
			args.Addr = &v
		}

		//zenrpc:count=300
		if args.Count == nil {
			var v int = 300
			args.Count = &v
		}

		//zenrpc:skip=0
		if args.Skip == nil {
			var v int = 0
			args.Skip = &v
		}

		resp.Set(s.ListTransactions(*args.Addr, *args.Count, *args.Skip))

	case RPC.Service.SendToAddress:
		var args = struct {
			Addr   string      `json:"addr"`
			Amount json.Number `json:"amount"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"addr", "amount"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.SendToAddress(args.Addr, args.Amount))

	case RPC.Service.GetRecords:
		var args = struct {
			STime int64 `json:"sTime"`
			ETime int64 `json:"eTime"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"sTime", "eTime"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.GetRecords(args.STime, args.ETime))

	default:
		resp = zenrpc.NewResponseError(nil, zenrpc.MethodNotFound, "", nil)
	}

	return resp
}
