// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: api/api.proto

package api

import (
	context "context"
	core "github.com/otc/otc-web/tron/core"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReturnResponseCode int32

const (
	Return_SUCCESS                         ReturnResponseCode = 0
	Return_SIGERROR                        ReturnResponseCode = 1 // error in signature
	Return_CONTRACT_VALIDATE_ERROR         ReturnResponseCode = 2
	Return_CONTRACT_EXE_ERROR              ReturnResponseCode = 3
	Return_BANDWITH_ERROR                  ReturnResponseCode = 4
	Return_DUP_TRANSACTION_ERROR           ReturnResponseCode = 5
	Return_TAPOS_ERROR                     ReturnResponseCode = 6
	Return_TOO_BIG_TRANSACTION_ERROR       ReturnResponseCode = 7
	Return_TRANSACTION_EXPIRATION_ERROR    ReturnResponseCode = 8
	Return_SERVER_BUSY                     ReturnResponseCode = 9
	Return_NO_CONNECTION                   ReturnResponseCode = 10
	Return_NOT_ENOUGH_EFFECTIVE_CONNECTION ReturnResponseCode = 11
	Return_OTHER_ERROR                     ReturnResponseCode = 20
)

// Enum value maps for ReturnResponseCode.
var (
	ReturnResponseCode_name = map[int32]string{
		0:  "SUCCESS",
		1:  "SIGERROR",
		2:  "CONTRACT_VALIDATE_ERROR",
		3:  "CONTRACT_EXE_ERROR",
		4:  "BANDWITH_ERROR",
		5:  "DUP_TRANSACTION_ERROR",
		6:  "TAPOS_ERROR",
		7:  "TOO_BIG_TRANSACTION_ERROR",
		8:  "TRANSACTION_EXPIRATION_ERROR",
		9:  "SERVER_BUSY",
		10: "NO_CONNECTION",
		11: "NOT_ENOUGH_EFFECTIVE_CONNECTION",
		20: "OTHER_ERROR",
	}
	ReturnResponseCode_value = map[string]int32{
		"SUCCESS":                         0,
		"SIGERROR":                        1,
		"CONTRACT_VALIDATE_ERROR":         2,
		"CONTRACT_EXE_ERROR":              3,
		"BANDWITH_ERROR":                  4,
		"DUP_TRANSACTION_ERROR":           5,
		"TAPOS_ERROR":                     6,
		"TOO_BIG_TRANSACTION_ERROR":       7,
		"TRANSACTION_EXPIRATION_ERROR":    8,
		"SERVER_BUSY":                     9,
		"NO_CONNECTION":                   10,
		"NOT_ENOUGH_EFFECTIVE_CONNECTION": 11,
		"OTHER_ERROR":                     20,
	}
)

func (x ReturnResponseCode) Enum() *ReturnResponseCode {
	p := new(ReturnResponseCode)
	*p = x
	return p
}

func (x ReturnResponseCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReturnResponseCode) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[0].Descriptor()
}

func (ReturnResponseCode) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[0]
}

func (x ReturnResponseCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReturnResponseCode.Descriptor instead.
func (ReturnResponseCode) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{0, 0}
}

type TransactionSignWeight_ResultResponseCode int32

const (
	TransactionSignWeight_Result_ENOUGH_PERMISSION      TransactionSignWeight_ResultResponseCode = 0
	TransactionSignWeight_Result_NOT_ENOUGH_PERMISSION  TransactionSignWeight_ResultResponseCode = 1 // error in
	TransactionSignWeight_Result_SIGNATURE_FORMAT_ERROR TransactionSignWeight_ResultResponseCode = 2
	TransactionSignWeight_Result_COMPUTE_ADDRESS_ERROR  TransactionSignWeight_ResultResponseCode = 3
	TransactionSignWeight_Result_PERMISSION_ERROR       TransactionSignWeight_ResultResponseCode = 4 //The key is not in permission
	TransactionSignWeight_Result_OTHER_ERROR            TransactionSignWeight_ResultResponseCode = 20
)

// Enum value maps for TransactionSignWeight_ResultResponseCode.
var (
	TransactionSignWeight_ResultResponseCode_name = map[int32]string{
		0:  "ENOUGH_PERMISSION",
		1:  "NOT_ENOUGH_PERMISSION",
		2:  "SIGNATURE_FORMAT_ERROR",
		3:  "COMPUTE_ADDRESS_ERROR",
		4:  "PERMISSION_ERROR",
		20: "OTHER_ERROR",
	}
	TransactionSignWeight_ResultResponseCode_value = map[string]int32{
		"ENOUGH_PERMISSION":      0,
		"NOT_ENOUGH_PERMISSION":  1,
		"SIGNATURE_FORMAT_ERROR": 2,
		"COMPUTE_ADDRESS_ERROR":  3,
		"PERMISSION_ERROR":       4,
		"OTHER_ERROR":            20,
	}
)

func (x TransactionSignWeight_ResultResponseCode) Enum() *TransactionSignWeight_ResultResponseCode {
	p := new(TransactionSignWeight_ResultResponseCode)
	*p = x
	return p
}

func (x TransactionSignWeight_ResultResponseCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionSignWeight_ResultResponseCode) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[1].Descriptor()
}

func (TransactionSignWeight_ResultResponseCode) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[1]
}

func (x TransactionSignWeight_ResultResponseCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionSignWeight_ResultResponseCode.Descriptor instead.
func (TransactionSignWeight_ResultResponseCode) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{36, 0, 0}
}

type TransactionApprovedList_ResultResponseCode int32

const (
	TransactionApprovedList_Result_SUCCESS                TransactionApprovedList_ResultResponseCode = 0
	TransactionApprovedList_Result_SIGNATURE_FORMAT_ERROR TransactionApprovedList_ResultResponseCode = 1
	TransactionApprovedList_Result_COMPUTE_ADDRESS_ERROR  TransactionApprovedList_ResultResponseCode = 2
	TransactionApprovedList_Result_OTHER_ERROR            TransactionApprovedList_ResultResponseCode = 20
)

// Enum value maps for TransactionApprovedList_ResultResponseCode.
var (
	TransactionApprovedList_ResultResponseCode_name = map[int32]string{
		0:  "SUCCESS",
		1:  "SIGNATURE_FORMAT_ERROR",
		2:  "COMPUTE_ADDRESS_ERROR",
		20: "OTHER_ERROR",
	}
	TransactionApprovedList_ResultResponseCode_value = map[string]int32{
		"SUCCESS":                0,
		"SIGNATURE_FORMAT_ERROR": 1,
		"COMPUTE_ADDRESS_ERROR":  2,
		"OTHER_ERROR":            20,
	}
)

func (x TransactionApprovedList_ResultResponseCode) Enum() *TransactionApprovedList_ResultResponseCode {
	p := new(TransactionApprovedList_ResultResponseCode)
	*p = x
	return p
}

func (x TransactionApprovedList_ResultResponseCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionApprovedList_ResultResponseCode) Descriptor() protoreflect.EnumDescriptor {
	return file_api_api_proto_enumTypes[2].Descriptor()
}

func (TransactionApprovedList_ResultResponseCode) Type() protoreflect.EnumType {
	return &file_api_api_proto_enumTypes[2]
}

func (x TransactionApprovedList_ResultResponseCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionApprovedList_ResultResponseCode.Descriptor instead.
func (TransactionApprovedList_ResultResponseCode) EnumDescriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{37, 0, 0}
}

type Return struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result  bool               `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Code    ReturnResponseCode `protobuf:"varint,2,opt,name=code,proto3,enum=protocol.ReturnResponseCode" json:"code,omitempty"`
	Message []byte             `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Return) Reset() {
	*x = Return{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Return) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Return) ProtoMessage() {}

func (x *Return) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Return.ProtoReflect.Descriptor instead.
func (*Return) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{0}
}

func (x *Return) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *Return) GetCode() ReturnResponseCode {
	if x != nil {
		return x.Code
	}
	return Return_SUCCESS
}

func (x *Return) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

type BlockReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockNum  int64  `protobuf:"varint,1,opt,name=block_num,json=blockNum,proto3" json:"block_num,omitempty"`
	BlockHash []byte `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
}

func (x *BlockReference) Reset() {
	*x = BlockReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockReference) ProtoMessage() {}

func (x *BlockReference) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockReference.ProtoReflect.Descriptor instead.
func (*BlockReference) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{1}
}

func (x *BlockReference) GetBlockNum() int64 {
	if x != nil {
		return x.BlockNum
	}
	return 0
}

func (x *BlockReference) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

type WitnessList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Witnesses []*core.Witness `protobuf:"bytes,1,rep,name=witnesses,proto3" json:"witnesses,omitempty"`
}

func (x *WitnessList) Reset() {
	*x = WitnessList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WitnessList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WitnessList) ProtoMessage() {}

func (x *WitnessList) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WitnessList.ProtoReflect.Descriptor instead.
func (*WitnessList) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{2}
}

func (x *WitnessList) GetWitnesses() []*core.Witness {
	if x != nil {
		return x.Witnesses
	}
	return nil
}

type ProposalList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proposals []*core.Proposal `protobuf:"bytes,1,rep,name=proposals,proto3" json:"proposals,omitempty"`
}

func (x *ProposalList) Reset() {
	*x = ProposalList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposalList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposalList) ProtoMessage() {}

func (x *ProposalList) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposalList.ProtoReflect.Descriptor instead.
func (*ProposalList) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{3}
}

func (x *ProposalList) GetProposals() []*core.Proposal {
	if x != nil {
		return x.Proposals
	}
	return nil
}

type ExchangeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchanges []*core.Exchange `protobuf:"bytes,1,rep,name=exchanges,proto3" json:"exchanges,omitempty"`
}

func (x *ExchangeList) Reset() {
	*x = ExchangeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeList) ProtoMessage() {}

func (x *ExchangeList) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeList.ProtoReflect.Descriptor instead.
func (*ExchangeList) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{4}
}

func (x *ExchangeList) GetExchanges() []*core.Exchange {
	if x != nil {
		return x.Exchanges
	}
	return nil
}

type AssetIssueList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetIssue []*core.AssetIssueContract `protobuf:"bytes,1,rep,name=assetIssue,proto3" json:"assetIssue,omitempty"`
}

func (x *AssetIssueList) Reset() {
	*x = AssetIssueList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetIssueList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetIssueList) ProtoMessage() {}

func (x *AssetIssueList) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetIssueList.ProtoReflect.Descriptor instead.
func (*AssetIssueList) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{5}
}

func (x *AssetIssueList) GetAssetIssue() []*core.AssetIssueContract {
	if x != nil {
		return x.AssetIssue
	}
	return nil
}

type BlockList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Block []*core.Block `protobuf:"bytes,1,rep,name=block,proto3" json:"block,omitempty"`
}

func (x *BlockList) Reset() {
	*x = BlockList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockList) ProtoMessage() {}

func (x *BlockList) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockList.ProtoReflect.Descriptor instead.
func (*BlockList) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{6}
}

func (x *BlockList) GetBlock() []*core.Block {
	if x != nil {
		return x.Block
	}
	return nil
}

type TransactionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction []*core.Transaction `protobuf:"bytes,1,rep,name=transaction,proto3" json:"transaction,omitempty"`
}

func (x *TransactionList) Reset() {
	*x = TransactionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionList) ProtoMessage() {}

func (x *TransactionList) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionList.ProtoReflect.Descriptor instead.
func (*TransactionList) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{7}
}

func (x *TransactionList) GetTransaction() []*core.Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

type TransactionIdList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxId []string `protobuf:"bytes,1,rep,name=txId,proto3" json:"txId,omitempty"`
}

func (x *TransactionIdList) Reset() {
	*x = TransactionIdList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionIdList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionIdList) ProtoMessage() {}

func (x *TransactionIdList) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionIdList.ProtoReflect.Descriptor instead.
func (*TransactionIdList) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{8}
}

func (x *TransactionIdList) GetTxId() []string {
	if x != nil {
		return x.TxId
	}
	return nil
}

type DelegatedResourceMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromAddress []byte `protobuf:"bytes,1,opt,name=fromAddress,proto3" json:"fromAddress,omitempty"`
	ToAddress   []byte `protobuf:"bytes,2,opt,name=toAddress,proto3" json:"toAddress,omitempty"`
}

func (x *DelegatedResourceMessage) Reset() {
	*x = DelegatedResourceMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegatedResourceMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegatedResourceMessage) ProtoMessage() {}

func (x *DelegatedResourceMessage) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegatedResourceMessage.ProtoReflect.Descriptor instead.
func (*DelegatedResourceMessage) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{9}
}

func (x *DelegatedResourceMessage) GetFromAddress() []byte {
	if x != nil {
		return x.FromAddress
	}
	return nil
}

func (x *DelegatedResourceMessage) GetToAddress() []byte {
	if x != nil {
		return x.ToAddress
	}
	return nil
}

type DelegatedResourceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DelegatedResource []*core.DelegatedResource `protobuf:"bytes,1,rep,name=delegatedResource,proto3" json:"delegatedResource,omitempty"`
}

func (x *DelegatedResourceList) Reset() {
	*x = DelegatedResourceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegatedResourceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegatedResourceList) ProtoMessage() {}

func (x *DelegatedResourceList) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegatedResourceList.ProtoReflect.Descriptor instead.
func (*DelegatedResourceList) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{10}
}

func (x *DelegatedResourceList) GetDelegatedResource() []*core.DelegatedResource {
	if x != nil {
		return x.DelegatedResource
	}
	return nil
}

// Gossip node list
type NodeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*Node `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *NodeList) Reset() {
	*x = NodeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeList) ProtoMessage() {}

func (x *NodeList) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeList.ProtoReflect.Descriptor instead.
func (*NodeList) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{11}
}

func (x *NodeList) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

// Gossip node
type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address *Address `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{12}
}

func (x *Node) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

// Gossip node address
type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host []byte `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{13}
}

func (x *Address) GetHost() []byte {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *Address) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type EmptyMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyMessage) Reset() {
	*x = EmptyMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyMessage) ProtoMessage() {}

func (x *EmptyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyMessage.ProtoReflect.Descriptor instead.
func (*EmptyMessage) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{14}
}

type NumberMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num int64 `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
}

func (x *NumberMessage) Reset() {
	*x = NumberMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumberMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumberMessage) ProtoMessage() {}

func (x *NumberMessage) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumberMessage.ProtoReflect.Descriptor instead.
func (*NumberMessage) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{15}
}

func (x *NumberMessage) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

type BytesMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BytesMessage) Reset() {
	*x = BytesMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BytesMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BytesMessage) ProtoMessage() {}

func (x *BytesMessage) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BytesMessage.ProtoReflect.Descriptor instead.
func (*BytesMessage) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{16}
}

func (x *BytesMessage) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type TimeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeginInMilliseconds int64 `protobuf:"varint,1,opt,name=beginInMilliseconds,proto3" json:"beginInMilliseconds,omitempty"`
	EndInMilliseconds   int64 `protobuf:"varint,2,opt,name=endInMilliseconds,proto3" json:"endInMilliseconds,omitempty"`
}

func (x *TimeMessage) Reset() {
	*x = TimeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeMessage) ProtoMessage() {}

func (x *TimeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeMessage.ProtoReflect.Descriptor instead.
func (*TimeMessage) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{17}
}

func (x *TimeMessage) GetBeginInMilliseconds() int64 {
	if x != nil {
		return x.BeginInMilliseconds
	}
	return 0
}

func (x *TimeMessage) GetEndInMilliseconds() int64 {
	if x != nil {
		return x.EndInMilliseconds
	}
	return 0
}

type BlockLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartNum int64 `protobuf:"varint,1,opt,name=startNum,proto3" json:"startNum,omitempty"`
	EndNum   int64 `protobuf:"varint,2,opt,name=endNum,proto3" json:"endNum,omitempty"`
}

func (x *BlockLimit) Reset() {
	*x = BlockLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockLimit) ProtoMessage() {}

func (x *BlockLimit) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockLimit.ProtoReflect.Descriptor instead.
func (*BlockLimit) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{18}
}

func (x *BlockLimit) GetStartNum() int64 {
	if x != nil {
		return x.StartNum
	}
	return 0
}

func (x *BlockLimit) GetEndNum() int64 {
	if x != nil {
		return x.EndNum
	}
	return 0
}

type TransactionLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId []byte `protobuf:"bytes,1,opt,name=transactionId,proto3" json:"transactionId,omitempty"`
	LimitNum      int64  `protobuf:"varint,2,opt,name=limitNum,proto3" json:"limitNum,omitempty"`
}

func (x *TransactionLimit) Reset() {
	*x = TransactionLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionLimit) ProtoMessage() {}

func (x *TransactionLimit) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionLimit.ProtoReflect.Descriptor instead.
func (*TransactionLimit) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{19}
}

func (x *TransactionLimit) GetTransactionId() []byte {
	if x != nil {
		return x.TransactionId
	}
	return nil
}

func (x *TransactionLimit) GetLimitNum() int64 {
	if x != nil {
		return x.LimitNum
	}
	return 0
}

type AccountPaginated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account *core.Account `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Offset  int64         `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit   int64         `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *AccountPaginated) Reset() {
	*x = AccountPaginated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountPaginated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountPaginated) ProtoMessage() {}

func (x *AccountPaginated) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountPaginated.ProtoReflect.Descriptor instead.
func (*AccountPaginated) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{20}
}

func (x *AccountPaginated) GetAccount() *core.Account {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *AccountPaginated) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *AccountPaginated) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type TimePaginatedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeMessage *TimeMessage `protobuf:"bytes,1,opt,name=timeMessage,proto3" json:"timeMessage,omitempty"`
	Offset      int64        `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit       int64        `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *TimePaginatedMessage) Reset() {
	*x = TimePaginatedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimePaginatedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimePaginatedMessage) ProtoMessage() {}

func (x *TimePaginatedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimePaginatedMessage.ProtoReflect.Descriptor instead.
func (*TimePaginatedMessage) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{21}
}

func (x *TimePaginatedMessage) GetTimeMessage() *TimeMessage {
	if x != nil {
		return x.TimeMessage
	}
	return nil
}

func (x *TimePaginatedMessage) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *TimePaginatedMessage) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

//deprecated
type AccountNetMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FreeNetUsed    int64            `protobuf:"varint,1,opt,name=freeNetUsed,proto3" json:"freeNetUsed,omitempty"`
	FreeNetLimit   int64            `protobuf:"varint,2,opt,name=freeNetLimit,proto3" json:"freeNetLimit,omitempty"`
	NetUsed        int64            `protobuf:"varint,3,opt,name=NetUsed,proto3" json:"NetUsed,omitempty"`
	NetLimit       int64            `protobuf:"varint,4,opt,name=NetLimit,proto3" json:"NetLimit,omitempty"`
	AssetNetUsed   map[string]int64 `protobuf:"bytes,5,rep,name=assetNetUsed,proto3" json:"assetNetUsed,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	AssetNetLimit  map[string]int64 `protobuf:"bytes,6,rep,name=assetNetLimit,proto3" json:"assetNetLimit,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	TotalNetLimit  int64            `protobuf:"varint,7,opt,name=TotalNetLimit,proto3" json:"TotalNetLimit,omitempty"`
	TotalNetWeight int64            `protobuf:"varint,8,opt,name=TotalNetWeight,proto3" json:"TotalNetWeight,omitempty"`
}

func (x *AccountNetMessage) Reset() {
	*x = AccountNetMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountNetMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountNetMessage) ProtoMessage() {}

func (x *AccountNetMessage) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountNetMessage.ProtoReflect.Descriptor instead.
func (*AccountNetMessage) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{22}
}

func (x *AccountNetMessage) GetFreeNetUsed() int64 {
	if x != nil {
		return x.FreeNetUsed
	}
	return 0
}

func (x *AccountNetMessage) GetFreeNetLimit() int64 {
	if x != nil {
		return x.FreeNetLimit
	}
	return 0
}

func (x *AccountNetMessage) GetNetUsed() int64 {
	if x != nil {
		return x.NetUsed
	}
	return 0
}

func (x *AccountNetMessage) GetNetLimit() int64 {
	if x != nil {
		return x.NetLimit
	}
	return 0
}

func (x *AccountNetMessage) GetAssetNetUsed() map[string]int64 {
	if x != nil {
		return x.AssetNetUsed
	}
	return nil
}

func (x *AccountNetMessage) GetAssetNetLimit() map[string]int64 {
	if x != nil {
		return x.AssetNetLimit
	}
	return nil
}

func (x *AccountNetMessage) GetTotalNetLimit() int64 {
	if x != nil {
		return x.TotalNetLimit
	}
	return 0
}

func (x *AccountNetMessage) GetTotalNetWeight() int64 {
	if x != nil {
		return x.TotalNetWeight
	}
	return 0
}

type AccountResourceMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FreeNetUsed          int64            `protobuf:"varint,1,opt,name=freeNetUsed,proto3" json:"freeNetUsed,omitempty"`
	FreeNetLimit         int64            `protobuf:"varint,2,opt,name=freeNetLimit,proto3" json:"freeNetLimit,omitempty"`
	NetUsed              int64            `protobuf:"varint,3,opt,name=NetUsed,proto3" json:"NetUsed,omitempty"`
	NetLimit             int64            `protobuf:"varint,4,opt,name=NetLimit,proto3" json:"NetLimit,omitempty"`
	AssetNetUsed         map[string]int64 `protobuf:"bytes,5,rep,name=assetNetUsed,proto3" json:"assetNetUsed,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	AssetNetLimit        map[string]int64 `protobuf:"bytes,6,rep,name=assetNetLimit,proto3" json:"assetNetLimit,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	TotalNetLimit        int64            `protobuf:"varint,7,opt,name=TotalNetLimit,proto3" json:"TotalNetLimit,omitempty"`
	TotalNetWeight       int64            `protobuf:"varint,8,opt,name=TotalNetWeight,proto3" json:"TotalNetWeight,omitempty"`
	TotalTronPowerWeight int64            `protobuf:"varint,9,opt,name=TotalTronPowerWeight,proto3" json:"TotalTronPowerWeight,omitempty"`
	TronPowerUsed        int64            `protobuf:"varint,10,opt,name=tronPowerUsed,proto3" json:"tronPowerUsed,omitempty"`
	TronPowerLimit       int64            `protobuf:"varint,11,opt,name=tronPowerLimit,proto3" json:"tronPowerLimit,omitempty"`
	EnergyUsed           int64            `protobuf:"varint,13,opt,name=EnergyUsed,proto3" json:"EnergyUsed,omitempty"`
	EnergyLimit          int64            `protobuf:"varint,14,opt,name=EnergyLimit,proto3" json:"EnergyLimit,omitempty"`
	TotalEnergyLimit     int64            `protobuf:"varint,15,opt,name=TotalEnergyLimit,proto3" json:"TotalEnergyLimit,omitempty"`
	TotalEnergyWeight    int64            `protobuf:"varint,16,opt,name=TotalEnergyWeight,proto3" json:"TotalEnergyWeight,omitempty"`
	StorageUsed          int64            `protobuf:"varint,21,opt,name=storageUsed,proto3" json:"storageUsed,omitempty"`
	StorageLimit         int64            `protobuf:"varint,22,opt,name=storageLimit,proto3" json:"storageLimit,omitempty"`
}

func (x *AccountResourceMessage) Reset() {
	*x = AccountResourceMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountResourceMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountResourceMessage) ProtoMessage() {}

func (x *AccountResourceMessage) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountResourceMessage.ProtoReflect.Descriptor instead.
func (*AccountResourceMessage) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{23}
}

func (x *AccountResourceMessage) GetFreeNetUsed() int64 {
	if x != nil {
		return x.FreeNetUsed
	}
	return 0
}

func (x *AccountResourceMessage) GetFreeNetLimit() int64 {
	if x != nil {
		return x.FreeNetLimit
	}
	return 0
}

func (x *AccountResourceMessage) GetNetUsed() int64 {
	if x != nil {
		return x.NetUsed
	}
	return 0
}

func (x *AccountResourceMessage) GetNetLimit() int64 {
	if x != nil {
		return x.NetLimit
	}
	return 0
}

func (x *AccountResourceMessage) GetAssetNetUsed() map[string]int64 {
	if x != nil {
		return x.AssetNetUsed
	}
	return nil
}

func (x *AccountResourceMessage) GetAssetNetLimit() map[string]int64 {
	if x != nil {
		return x.AssetNetLimit
	}
	return nil
}

func (x *AccountResourceMessage) GetTotalNetLimit() int64 {
	if x != nil {
		return x.TotalNetLimit
	}
	return 0
}

func (x *AccountResourceMessage) GetTotalNetWeight() int64 {
	if x != nil {
		return x.TotalNetWeight
	}
	return 0
}

func (x *AccountResourceMessage) GetTotalTronPowerWeight() int64 {
	if x != nil {
		return x.TotalTronPowerWeight
	}
	return 0
}

func (x *AccountResourceMessage) GetTronPowerUsed() int64 {
	if x != nil {
		return x.TronPowerUsed
	}
	return 0
}

func (x *AccountResourceMessage) GetTronPowerLimit() int64 {
	if x != nil {
		return x.TronPowerLimit
	}
	return 0
}

func (x *AccountResourceMessage) GetEnergyUsed() int64 {
	if x != nil {
		return x.EnergyUsed
	}
	return 0
}

func (x *AccountResourceMessage) GetEnergyLimit() int64 {
	if x != nil {
		return x.EnergyLimit
	}
	return 0
}

func (x *AccountResourceMessage) GetTotalEnergyLimit() int64 {
	if x != nil {
		return x.TotalEnergyLimit
	}
	return 0
}

func (x *AccountResourceMessage) GetTotalEnergyWeight() int64 {
	if x != nil {
		return x.TotalEnergyWeight
	}
	return 0
}

func (x *AccountResourceMessage) GetStorageUsed() int64 {
	if x != nil {
		return x.StorageUsed
	}
	return 0
}

func (x *AccountResourceMessage) GetStorageLimit() int64 {
	if x != nil {
		return x.StorageLimit
	}
	return 0
}

type PaginatedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *PaginatedMessage) Reset() {
	*x = PaginatedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaginatedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginatedMessage) ProtoMessage() {}

func (x *PaginatedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaginatedMessage.ProtoReflect.Descriptor instead.
func (*PaginatedMessage) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{24}
}

func (x *PaginatedMessage) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *PaginatedMessage) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type EasyTransferMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PassPhrase []byte `protobuf:"bytes,1,opt,name=passPhrase,proto3" json:"passPhrase,omitempty"`
	ToAddress  []byte `protobuf:"bytes,2,opt,name=toAddress,proto3" json:"toAddress,omitempty"`
	Amount     int64  `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *EasyTransferMessage) Reset() {
	*x = EasyTransferMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EasyTransferMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EasyTransferMessage) ProtoMessage() {}

func (x *EasyTransferMessage) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EasyTransferMessage.ProtoReflect.Descriptor instead.
func (*EasyTransferMessage) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{25}
}

func (x *EasyTransferMessage) GetPassPhrase() []byte {
	if x != nil {
		return x.PassPhrase
	}
	return nil
}

func (x *EasyTransferMessage) GetToAddress() []byte {
	if x != nil {
		return x.ToAddress
	}
	return nil
}

func (x *EasyTransferMessage) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type EasyTransferAssetMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PassPhrase []byte `protobuf:"bytes,1,opt,name=passPhrase,proto3" json:"passPhrase,omitempty"`
	ToAddress  []byte `protobuf:"bytes,2,opt,name=toAddress,proto3" json:"toAddress,omitempty"`
	AssetId    string `protobuf:"bytes,3,opt,name=assetId,proto3" json:"assetId,omitempty"`
	Amount     int64  `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *EasyTransferAssetMessage) Reset() {
	*x = EasyTransferAssetMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EasyTransferAssetMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EasyTransferAssetMessage) ProtoMessage() {}

func (x *EasyTransferAssetMessage) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EasyTransferAssetMessage.ProtoReflect.Descriptor instead.
func (*EasyTransferAssetMessage) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{26}
}

func (x *EasyTransferAssetMessage) GetPassPhrase() []byte {
	if x != nil {
		return x.PassPhrase
	}
	return nil
}

func (x *EasyTransferAssetMessage) GetToAddress() []byte {
	if x != nil {
		return x.ToAddress
	}
	return nil
}

func (x *EasyTransferAssetMessage) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *EasyTransferAssetMessage) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type EasyTransferByPrivateMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrivateKey []byte `protobuf:"bytes,1,opt,name=privateKey,proto3" json:"privateKey,omitempty"`
	ToAddress  []byte `protobuf:"bytes,2,opt,name=toAddress,proto3" json:"toAddress,omitempty"`
	Amount     int64  `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *EasyTransferByPrivateMessage) Reset() {
	*x = EasyTransferByPrivateMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EasyTransferByPrivateMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EasyTransferByPrivateMessage) ProtoMessage() {}

func (x *EasyTransferByPrivateMessage) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EasyTransferByPrivateMessage.ProtoReflect.Descriptor instead.
func (*EasyTransferByPrivateMessage) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{27}
}

func (x *EasyTransferByPrivateMessage) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

func (x *EasyTransferByPrivateMessage) GetToAddress() []byte {
	if x != nil {
		return x.ToAddress
	}
	return nil
}

func (x *EasyTransferByPrivateMessage) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type EasyTransferAssetByPrivateMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrivateKey []byte `protobuf:"bytes,1,opt,name=privateKey,proto3" json:"privateKey,omitempty"`
	ToAddress  []byte `protobuf:"bytes,2,opt,name=toAddress,proto3" json:"toAddress,omitempty"`
	AssetId    string `protobuf:"bytes,3,opt,name=assetId,proto3" json:"assetId,omitempty"`
	Amount     int64  `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *EasyTransferAssetByPrivateMessage) Reset() {
	*x = EasyTransferAssetByPrivateMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EasyTransferAssetByPrivateMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EasyTransferAssetByPrivateMessage) ProtoMessage() {}

func (x *EasyTransferAssetByPrivateMessage) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EasyTransferAssetByPrivateMessage.ProtoReflect.Descriptor instead.
func (*EasyTransferAssetByPrivateMessage) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{28}
}

func (x *EasyTransferAssetByPrivateMessage) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

func (x *EasyTransferAssetByPrivateMessage) GetToAddress() []byte {
	if x != nil {
		return x.ToAddress
	}
	return nil
}

func (x *EasyTransferAssetByPrivateMessage) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *EasyTransferAssetByPrivateMessage) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type EasyTransferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction *core.Transaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	Result      *Return           `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	Txid        []byte            `protobuf:"bytes,3,opt,name=txid,proto3" json:"txid,omitempty"` //transaction id =  sha256(transaction.rowdata)
}

func (x *EasyTransferResponse) Reset() {
	*x = EasyTransferResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EasyTransferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EasyTransferResponse) ProtoMessage() {}

func (x *EasyTransferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EasyTransferResponse.ProtoReflect.Descriptor instead.
func (*EasyTransferResponse) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{29}
}

func (x *EasyTransferResponse) GetTransaction() *core.Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *EasyTransferResponse) GetResult() *Return {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *EasyTransferResponse) GetTxid() []byte {
	if x != nil {
		return x.Txid
	}
	return nil
}

type AddressPrKeyPairMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address    string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	PrivateKey string `protobuf:"bytes,2,opt,name=privateKey,proto3" json:"privateKey,omitempty"`
}

func (x *AddressPrKeyPairMessage) Reset() {
	*x = AddressPrKeyPairMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressPrKeyPairMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressPrKeyPairMessage) ProtoMessage() {}

func (x *AddressPrKeyPairMessage) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressPrKeyPairMessage.ProtoReflect.Descriptor instead.
func (*AddressPrKeyPairMessage) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{30}
}

func (x *AddressPrKeyPairMessage) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AddressPrKeyPairMessage) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

type TransactionExtention struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction    *core.Transaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	Txid           []byte            `protobuf:"bytes,2,opt,name=txid,proto3" json:"txid,omitempty"` //transaction id =  sha256(transaction.rowdata)
	ConstantResult [][]byte          `protobuf:"bytes,3,rep,name=constant_result,json=constantResult,proto3" json:"constant_result,omitempty"`
	Result         *Return           `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
	EnergyUsed     int64             `protobuf:"varint,5,opt,name=energy_used,json=energyUsed,proto3" json:"energy_used,omitempty"`
}

func (x *TransactionExtention) Reset() {
	*x = TransactionExtention{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionExtention) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionExtention) ProtoMessage() {}

func (x *TransactionExtention) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionExtention.ProtoReflect.Descriptor instead.
func (*TransactionExtention) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{31}
}

func (x *TransactionExtention) GetTransaction() *core.Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *TransactionExtention) GetTxid() []byte {
	if x != nil {
		return x.Txid
	}
	return nil
}

func (x *TransactionExtention) GetConstantResult() [][]byte {
	if x != nil {
		return x.ConstantResult
	}
	return nil
}

func (x *TransactionExtention) GetResult() *Return {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *TransactionExtention) GetEnergyUsed() int64 {
	if x != nil {
		return x.EnergyUsed
	}
	return 0
}

type BlockExtention struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transactions []*TransactionExtention `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
	BlockHeader  *core.BlockHeader       `protobuf:"bytes,2,opt,name=block_header,json=blockHeader,proto3" json:"block_header,omitempty"`
	Blockid      []byte                  `protobuf:"bytes,3,opt,name=blockid,proto3" json:"blockid,omitempty"`
}

func (x *BlockExtention) Reset() {
	*x = BlockExtention{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockExtention) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockExtention) ProtoMessage() {}

func (x *BlockExtention) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockExtention.ProtoReflect.Descriptor instead.
func (*BlockExtention) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{32}
}

func (x *BlockExtention) GetTransactions() []*TransactionExtention {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *BlockExtention) GetBlockHeader() *core.BlockHeader {
	if x != nil {
		return x.BlockHeader
	}
	return nil
}

func (x *BlockExtention) GetBlockid() []byte {
	if x != nil {
		return x.Blockid
	}
	return nil
}

type BlockListExtention struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Block []*BlockExtention `protobuf:"bytes,1,rep,name=block,proto3" json:"block,omitempty"`
}

func (x *BlockListExtention) Reset() {
	*x = BlockListExtention{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockListExtention) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockListExtention) ProtoMessage() {}

func (x *BlockListExtention) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockListExtention.ProtoReflect.Descriptor instead.
func (*BlockListExtention) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{33}
}

func (x *BlockListExtention) GetBlock() []*BlockExtention {
	if x != nil {
		return x.Block
	}
	return nil
}

type TransactionListExtention struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction []*TransactionExtention `protobuf:"bytes,1,rep,name=transaction,proto3" json:"transaction,omitempty"`
}

func (x *TransactionListExtention) Reset() {
	*x = TransactionListExtention{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionListExtention) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionListExtention) ProtoMessage() {}

func (x *TransactionListExtention) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionListExtention.ProtoReflect.Descriptor instead.
func (*TransactionListExtention) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{34}
}

func (x *TransactionListExtention) GetTransaction() []*TransactionExtention {
	if x != nil {
		return x.Transaction
	}
	return nil
}

type BlockIncrementalMerkleTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number     int64                       `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	MerkleTree *core.IncrementalMerkleTree `protobuf:"bytes,2,opt,name=merkleTree,proto3" json:"merkleTree,omitempty"`
}

func (x *BlockIncrementalMerkleTree) Reset() {
	*x = BlockIncrementalMerkleTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockIncrementalMerkleTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockIncrementalMerkleTree) ProtoMessage() {}

func (x *BlockIncrementalMerkleTree) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockIncrementalMerkleTree.ProtoReflect.Descriptor instead.
func (*BlockIncrementalMerkleTree) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{35}
}

func (x *BlockIncrementalMerkleTree) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *BlockIncrementalMerkleTree) GetMerkleTree() *core.IncrementalMerkleTree {
	if x != nil {
		return x.MerkleTree
	}
	return nil
}

type TransactionSignWeight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Permission    *core.Permission              `protobuf:"bytes,1,opt,name=permission,proto3" json:"permission,omitempty"`
	ApprovedList  [][]byte                      `protobuf:"bytes,2,rep,name=approved_list,json=approvedList,proto3" json:"approved_list,omitempty"`
	CurrentWeight int64                         `protobuf:"varint,3,opt,name=current_weight,json=currentWeight,proto3" json:"current_weight,omitempty"`
	Result        *TransactionSignWeight_Result `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
	Transaction   *TransactionExtention         `protobuf:"bytes,5,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (x *TransactionSignWeight) Reset() {
	*x = TransactionSignWeight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionSignWeight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionSignWeight) ProtoMessage() {}

func (x *TransactionSignWeight) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionSignWeight.ProtoReflect.Descriptor instead.
func (*TransactionSignWeight) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{36}
}

func (x *TransactionSignWeight) GetPermission() *core.Permission {
	if x != nil {
		return x.Permission
	}
	return nil
}

func (x *TransactionSignWeight) GetApprovedList() [][]byte {
	if x != nil {
		return x.ApprovedList
	}
	return nil
}

func (x *TransactionSignWeight) GetCurrentWeight() int64 {
	if x != nil {
		return x.CurrentWeight
	}
	return 0
}

func (x *TransactionSignWeight) GetResult() *TransactionSignWeight_Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *TransactionSignWeight) GetTransaction() *TransactionExtention {
	if x != nil {
		return x.Transaction
	}
	return nil
}

type TransactionApprovedList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApprovedList [][]byte                        `protobuf:"bytes,2,rep,name=approved_list,json=approvedList,proto3" json:"approved_list,omitempty"`
	Result       *TransactionApprovedList_Result `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
	Transaction  *TransactionExtention           `protobuf:"bytes,5,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (x *TransactionApprovedList) Reset() {
	*x = TransactionApprovedList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionApprovedList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionApprovedList) ProtoMessage() {}

func (x *TransactionApprovedList) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionApprovedList.ProtoReflect.Descriptor instead.
func (*TransactionApprovedList) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{37}
}

func (x *TransactionApprovedList) GetApprovedList() [][]byte {
	if x != nil {
		return x.ApprovedList
	}
	return nil
}

func (x *TransactionApprovedList) GetResult() *TransactionApprovedList_Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *TransactionApprovedList) GetTransaction() *TransactionExtention {
	if x != nil {
		return x.Transaction
	}
	return nil
}

type IvkDecryptParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartBlockIndex int64  `protobuf:"varint,1,opt,name=start_block_index,json=startBlockIndex,proto3" json:"start_block_index,omitempty"`
	EndBlockIndex   int64  `protobuf:"varint,2,opt,name=end_block_index,json=endBlockIndex,proto3" json:"end_block_index,omitempty"`
	Ivk             []byte `protobuf:"bytes,3,opt,name=ivk,proto3" json:"ivk,omitempty"`
}

func (x *IvkDecryptParameters) Reset() {
	*x = IvkDecryptParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IvkDecryptParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IvkDecryptParameters) ProtoMessage() {}

func (x *IvkDecryptParameters) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IvkDecryptParameters.ProtoReflect.Descriptor instead.
func (*IvkDecryptParameters) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{38}
}

func (x *IvkDecryptParameters) GetStartBlockIndex() int64 {
	if x != nil {
		return x.StartBlockIndex
	}
	return 0
}

func (x *IvkDecryptParameters) GetEndBlockIndex() int64 {
	if x != nil {
		return x.EndBlockIndex
	}
	return 0
}

func (x *IvkDecryptParameters) GetIvk() []byte {
	if x != nil {
		return x.Ivk
	}
	return nil
}

type IvkDecryptAndMarkParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartBlockIndex int64  `protobuf:"varint,1,opt,name=start_block_index,json=startBlockIndex,proto3" json:"start_block_index,omitempty"`
	EndBlockIndex   int64  `protobuf:"varint,2,opt,name=end_block_index,json=endBlockIndex,proto3" json:"end_block_index,omitempty"`
	Ivk             []byte `protobuf:"bytes,5,opt,name=ivk,proto3" json:"ivk,omitempty"`
	Ak              []byte `protobuf:"bytes,3,opt,name=ak,proto3" json:"ak,omitempty"`
	Nk              []byte `protobuf:"bytes,4,opt,name=nk,proto3" json:"nk,omitempty"`
}

func (x *IvkDecryptAndMarkParameters) Reset() {
	*x = IvkDecryptAndMarkParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IvkDecryptAndMarkParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IvkDecryptAndMarkParameters) ProtoMessage() {}

func (x *IvkDecryptAndMarkParameters) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IvkDecryptAndMarkParameters.ProtoReflect.Descriptor instead.
func (*IvkDecryptAndMarkParameters) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{39}
}

func (x *IvkDecryptAndMarkParameters) GetStartBlockIndex() int64 {
	if x != nil {
		return x.StartBlockIndex
	}
	return 0
}

func (x *IvkDecryptAndMarkParameters) GetEndBlockIndex() int64 {
	if x != nil {
		return x.EndBlockIndex
	}
	return 0
}

func (x *IvkDecryptAndMarkParameters) GetIvk() []byte {
	if x != nil {
		return x.Ivk
	}
	return nil
}

func (x *IvkDecryptAndMarkParameters) GetAk() []byte {
	if x != nil {
		return x.Ak
	}
	return nil
}

func (x *IvkDecryptAndMarkParameters) GetNk() []byte {
	if x != nil {
		return x.Nk
	}
	return nil
}

type OvkDecryptParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartBlockIndex int64  `protobuf:"varint,1,opt,name=start_block_index,json=startBlockIndex,proto3" json:"start_block_index,omitempty"`
	EndBlockIndex   int64  `protobuf:"varint,2,opt,name=end_block_index,json=endBlockIndex,proto3" json:"end_block_index,omitempty"`
	Ovk             []byte `protobuf:"bytes,3,opt,name=ovk,proto3" json:"ovk,omitempty"`
}

func (x *OvkDecryptParameters) Reset() {
	*x = OvkDecryptParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OvkDecryptParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OvkDecryptParameters) ProtoMessage() {}

func (x *OvkDecryptParameters) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OvkDecryptParameters.ProtoReflect.Descriptor instead.
func (*OvkDecryptParameters) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{40}
}

func (x *OvkDecryptParameters) GetStartBlockIndex() int64 {
	if x != nil {
		return x.StartBlockIndex
	}
	return 0
}

func (x *OvkDecryptParameters) GetEndBlockIndex() int64 {
	if x != nil {
		return x.EndBlockIndex
	}
	return 0
}

func (x *OvkDecryptParameters) GetOvk() []byte {
	if x != nil {
		return x.Ovk
	}
	return nil
}

type DecryptNotes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoteTxs []*DecryptNotes_NoteTx `protobuf:"bytes,1,rep,name=noteTxs,proto3" json:"noteTxs,omitempty"`
}

func (x *DecryptNotes) Reset() {
	*x = DecryptNotes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecryptNotes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecryptNotes) ProtoMessage() {}

func (x *DecryptNotes) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecryptNotes.ProtoReflect.Descriptor instead.
func (*DecryptNotes) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{41}
}

func (x *DecryptNotes) GetNoteTxs() []*DecryptNotes_NoteTx {
	if x != nil {
		return x.NoteTxs
	}
	return nil
}

type DecryptNotesMarked struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoteTxs []*DecryptNotesMarked_NoteTx `protobuf:"bytes,1,rep,name=noteTxs,proto3" json:"noteTxs,omitempty"`
}

func (x *DecryptNotesMarked) Reset() {
	*x = DecryptNotesMarked{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecryptNotesMarked) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecryptNotesMarked) ProtoMessage() {}

func (x *DecryptNotesMarked) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecryptNotesMarked.ProtoReflect.Descriptor instead.
func (*DecryptNotesMarked) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{42}
}

func (x *DecryptNotesMarked) GetNoteTxs() []*DecryptNotesMarked_NoteTx {
	if x != nil {
		return x.NoteTxs
	}
	return nil
}

type Note struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value          int64  `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	PaymentAddress string `protobuf:"bytes,2,opt,name=payment_address,json=paymentAddress,proto3" json:"payment_address,omitempty"`
	Rcm            []byte `protobuf:"bytes,3,opt,name=rcm,proto3" json:"rcm,omitempty"` // random 32
	Memo           []byte `protobuf:"bytes,4,opt,name=memo,proto3" json:"memo,omitempty"`
}

func (x *Note) Reset() {
	*x = Note{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Note) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Note) ProtoMessage() {}

func (x *Note) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Note.ProtoReflect.Descriptor instead.
func (*Note) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{43}
}

func (x *Note) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Note) GetPaymentAddress() string {
	if x != nil {
		return x.PaymentAddress
	}
	return ""
}

func (x *Note) GetRcm() []byte {
	if x != nil {
		return x.Rcm
	}
	return nil
}

func (x *Note) GetMemo() []byte {
	if x != nil {
		return x.Memo
	}
	return nil
}

type SpendNote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Note    *Note                          `protobuf:"bytes,3,opt,name=note,proto3" json:"note,omitempty"`
	Alpha   []byte                         `protobuf:"bytes,4,opt,name=alpha,proto3" json:"alpha,omitempty"` // random number for spend authority signature
	Voucher *core.IncrementalMerkleVoucher `protobuf:"bytes,5,opt,name=voucher,proto3" json:"voucher,omitempty"`
	Path    []byte                         `protobuf:"bytes,6,opt,name=path,proto3" json:"path,omitempty"` // path for cm from leaf to root in merkle tree
}

func (x *SpendNote) Reset() {
	*x = SpendNote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpendNote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpendNote) ProtoMessage() {}

func (x *SpendNote) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpendNote.ProtoReflect.Descriptor instead.
func (*SpendNote) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{44}
}

func (x *SpendNote) GetNote() *Note {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *SpendNote) GetAlpha() []byte {
	if x != nil {
		return x.Alpha
	}
	return nil
}

func (x *SpendNote) GetVoucher() *core.IncrementalMerkleVoucher {
	if x != nil {
		return x.Voucher
	}
	return nil
}

func (x *SpendNote) GetPath() []byte {
	if x != nil {
		return x.Path
	}
	return nil
}

type ReceiveNote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Note *Note `protobuf:"bytes,1,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *ReceiveNote) Reset() {
	*x = ReceiveNote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiveNote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveNote) ProtoMessage() {}

func (x *ReceiveNote) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveNote.ProtoReflect.Descriptor instead.
func (*ReceiveNote) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{45}
}

func (x *ReceiveNote) GetNote() *Note {
	if x != nil {
		return x.Note
	}
	return nil
}

type PrivateParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransparentFromAddress []byte         `protobuf:"bytes,1,opt,name=transparent_from_address,json=transparentFromAddress,proto3" json:"transparent_from_address,omitempty"`
	Ask                    []byte         `protobuf:"bytes,2,opt,name=ask,proto3" json:"ask,omitempty"`
	Nsk                    []byte         `protobuf:"bytes,3,opt,name=nsk,proto3" json:"nsk,omitempty"`
	Ovk                    []byte         `protobuf:"bytes,4,opt,name=ovk,proto3" json:"ovk,omitempty"`
	FromAmount             int64          `protobuf:"varint,5,opt,name=from_amount,json=fromAmount,proto3" json:"from_amount,omitempty"`
	ShieldedSpends         []*SpendNote   `protobuf:"bytes,6,rep,name=shielded_spends,json=shieldedSpends,proto3" json:"shielded_spends,omitempty"`
	ShieldedReceives       []*ReceiveNote `protobuf:"bytes,7,rep,name=shielded_receives,json=shieldedReceives,proto3" json:"shielded_receives,omitempty"`
	TransparentToAddress   []byte         `protobuf:"bytes,8,opt,name=transparent_to_address,json=transparentToAddress,proto3" json:"transparent_to_address,omitempty"`
	ToAmount               int64          `protobuf:"varint,9,opt,name=to_amount,json=toAmount,proto3" json:"to_amount,omitempty"`
	Timeout                int64          `protobuf:"varint,10,opt,name=timeout,proto3" json:"timeout,omitempty"` // timeout in seconds, it works only when it bigger than 0
}

func (x *PrivateParameters) Reset() {
	*x = PrivateParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateParameters) ProtoMessage() {}

func (x *PrivateParameters) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateParameters.ProtoReflect.Descriptor instead.
func (*PrivateParameters) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{46}
}

func (x *PrivateParameters) GetTransparentFromAddress() []byte {
	if x != nil {
		return x.TransparentFromAddress
	}
	return nil
}

func (x *PrivateParameters) GetAsk() []byte {
	if x != nil {
		return x.Ask
	}
	return nil
}

func (x *PrivateParameters) GetNsk() []byte {
	if x != nil {
		return x.Nsk
	}
	return nil
}

func (x *PrivateParameters) GetOvk() []byte {
	if x != nil {
		return x.Ovk
	}
	return nil
}

func (x *PrivateParameters) GetFromAmount() int64 {
	if x != nil {
		return x.FromAmount
	}
	return 0
}

func (x *PrivateParameters) GetShieldedSpends() []*SpendNote {
	if x != nil {
		return x.ShieldedSpends
	}
	return nil
}

func (x *PrivateParameters) GetShieldedReceives() []*ReceiveNote {
	if x != nil {
		return x.ShieldedReceives
	}
	return nil
}

func (x *PrivateParameters) GetTransparentToAddress() []byte {
	if x != nil {
		return x.TransparentToAddress
	}
	return nil
}

func (x *PrivateParameters) GetToAmount() int64 {
	if x != nil {
		return x.ToAmount
	}
	return 0
}

func (x *PrivateParameters) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

type PrivateParametersWithoutAsk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransparentFromAddress []byte         `protobuf:"bytes,1,opt,name=transparent_from_address,json=transparentFromAddress,proto3" json:"transparent_from_address,omitempty"`
	Ak                     []byte         `protobuf:"bytes,2,opt,name=ak,proto3" json:"ak,omitempty"`
	Nsk                    []byte         `protobuf:"bytes,3,opt,name=nsk,proto3" json:"nsk,omitempty"`
	Ovk                    []byte         `protobuf:"bytes,4,opt,name=ovk,proto3" json:"ovk,omitempty"`
	FromAmount             int64          `protobuf:"varint,5,opt,name=from_amount,json=fromAmount,proto3" json:"from_amount,omitempty"`
	ShieldedSpends         []*SpendNote   `protobuf:"bytes,6,rep,name=shielded_spends,json=shieldedSpends,proto3" json:"shielded_spends,omitempty"`
	ShieldedReceives       []*ReceiveNote `protobuf:"bytes,7,rep,name=shielded_receives,json=shieldedReceives,proto3" json:"shielded_receives,omitempty"`
	TransparentToAddress   []byte         `protobuf:"bytes,8,opt,name=transparent_to_address,json=transparentToAddress,proto3" json:"transparent_to_address,omitempty"`
	ToAmount               int64          `protobuf:"varint,9,opt,name=to_amount,json=toAmount,proto3" json:"to_amount,omitempty"`
	Timeout                int64          `protobuf:"varint,10,opt,name=timeout,proto3" json:"timeout,omitempty"` // timeout in seconds, it works only when it bigger than 0
}

func (x *PrivateParametersWithoutAsk) Reset() {
	*x = PrivateParametersWithoutAsk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateParametersWithoutAsk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateParametersWithoutAsk) ProtoMessage() {}

func (x *PrivateParametersWithoutAsk) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateParametersWithoutAsk.ProtoReflect.Descriptor instead.
func (*PrivateParametersWithoutAsk) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{47}
}

func (x *PrivateParametersWithoutAsk) GetTransparentFromAddress() []byte {
	if x != nil {
		return x.TransparentFromAddress
	}
	return nil
}

func (x *PrivateParametersWithoutAsk) GetAk() []byte {
	if x != nil {
		return x.Ak
	}
	return nil
}

func (x *PrivateParametersWithoutAsk) GetNsk() []byte {
	if x != nil {
		return x.Nsk
	}
	return nil
}

func (x *PrivateParametersWithoutAsk) GetOvk() []byte {
	if x != nil {
		return x.Ovk
	}
	return nil
}

func (x *PrivateParametersWithoutAsk) GetFromAmount() int64 {
	if x != nil {
		return x.FromAmount
	}
	return 0
}

func (x *PrivateParametersWithoutAsk) GetShieldedSpends() []*SpendNote {
	if x != nil {
		return x.ShieldedSpends
	}
	return nil
}

func (x *PrivateParametersWithoutAsk) GetShieldedReceives() []*ReceiveNote {
	if x != nil {
		return x.ShieldedReceives
	}
	return nil
}

func (x *PrivateParametersWithoutAsk) GetTransparentToAddress() []byte {
	if x != nil {
		return x.TransparentToAddress
	}
	return nil
}

func (x *PrivateParametersWithoutAsk) GetToAmount() int64 {
	if x != nil {
		return x.ToAmount
	}
	return 0
}

func (x *PrivateParametersWithoutAsk) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

type SpendAuthSigParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ask    []byte `protobuf:"bytes,1,opt,name=ask,proto3" json:"ask,omitempty"`
	TxHash []byte `protobuf:"bytes,2,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	Alpha  []byte `protobuf:"bytes,3,opt,name=alpha,proto3" json:"alpha,omitempty"`
}

func (x *SpendAuthSigParameters) Reset() {
	*x = SpendAuthSigParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpendAuthSigParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpendAuthSigParameters) ProtoMessage() {}

func (x *SpendAuthSigParameters) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpendAuthSigParameters.ProtoReflect.Descriptor instead.
func (*SpendAuthSigParameters) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{48}
}

func (x *SpendAuthSigParameters) GetAsk() []byte {
	if x != nil {
		return x.Ask
	}
	return nil
}

func (x *SpendAuthSigParameters) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *SpendAuthSigParameters) GetAlpha() []byte {
	if x != nil {
		return x.Alpha
	}
	return nil
}

type NfParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Note    *Note                          `protobuf:"bytes,1,opt,name=note,proto3" json:"note,omitempty"`
	Voucher *core.IncrementalMerkleVoucher `protobuf:"bytes,2,opt,name=voucher,proto3" json:"voucher,omitempty"`
	Ak      []byte                         `protobuf:"bytes,3,opt,name=ak,proto3" json:"ak,omitempty"`
	Nk      []byte                         `protobuf:"bytes,4,opt,name=nk,proto3" json:"nk,omitempty"`
}

func (x *NfParameters) Reset() {
	*x = NfParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NfParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NfParameters) ProtoMessage() {}

func (x *NfParameters) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NfParameters.ProtoReflect.Descriptor instead.
func (*NfParameters) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{49}
}

func (x *NfParameters) GetNote() *Note {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *NfParameters) GetVoucher() *core.IncrementalMerkleVoucher {
	if x != nil {
		return x.Voucher
	}
	return nil
}

func (x *NfParameters) GetAk() []byte {
	if x != nil {
		return x.Ak
	}
	return nil
}

func (x *NfParameters) GetNk() []byte {
	if x != nil {
		return x.Nk
	}
	return nil
}

type ExpandedSpendingKeyMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ask []byte `protobuf:"bytes,1,opt,name=ask,proto3" json:"ask,omitempty"`
	Nsk []byte `protobuf:"bytes,2,opt,name=nsk,proto3" json:"nsk,omitempty"`
	Ovk []byte `protobuf:"bytes,3,opt,name=ovk,proto3" json:"ovk,omitempty"`
}

func (x *ExpandedSpendingKeyMessage) Reset() {
	*x = ExpandedSpendingKeyMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpandedSpendingKeyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpandedSpendingKeyMessage) ProtoMessage() {}

func (x *ExpandedSpendingKeyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpandedSpendingKeyMessage.ProtoReflect.Descriptor instead.
func (*ExpandedSpendingKeyMessage) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{50}
}

func (x *ExpandedSpendingKeyMessage) GetAsk() []byte {
	if x != nil {
		return x.Ask
	}
	return nil
}

func (x *ExpandedSpendingKeyMessage) GetNsk() []byte {
	if x != nil {
		return x.Nsk
	}
	return nil
}

func (x *ExpandedSpendingKeyMessage) GetOvk() []byte {
	if x != nil {
		return x.Ovk
	}
	return nil
}

type ViewingKeyMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ak []byte `protobuf:"bytes,1,opt,name=ak,proto3" json:"ak,omitempty"`
	Nk []byte `protobuf:"bytes,2,opt,name=nk,proto3" json:"nk,omitempty"`
}

func (x *ViewingKeyMessage) Reset() {
	*x = ViewingKeyMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViewingKeyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewingKeyMessage) ProtoMessage() {}

func (x *ViewingKeyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewingKeyMessage.ProtoReflect.Descriptor instead.
func (*ViewingKeyMessage) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{51}
}

func (x *ViewingKeyMessage) GetAk() []byte {
	if x != nil {
		return x.Ak
	}
	return nil
}

func (x *ViewingKeyMessage) GetNk() []byte {
	if x != nil {
		return x.Nk
	}
	return nil
}

type IncomingViewingKeyMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ivk []byte `protobuf:"bytes,1,opt,name=ivk,proto3" json:"ivk,omitempty"`
}

func (x *IncomingViewingKeyMessage) Reset() {
	*x = IncomingViewingKeyMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncomingViewingKeyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncomingViewingKeyMessage) ProtoMessage() {}

func (x *IncomingViewingKeyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncomingViewingKeyMessage.ProtoReflect.Descriptor instead.
func (*IncomingViewingKeyMessage) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{52}
}

func (x *IncomingViewingKeyMessage) GetIvk() []byte {
	if x != nil {
		return x.Ivk
	}
	return nil
}

type DiversifierMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	D []byte `protobuf:"bytes,1,opt,name=d,proto3" json:"d,omitempty"`
}

func (x *DiversifierMessage) Reset() {
	*x = DiversifierMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiversifierMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiversifierMessage) ProtoMessage() {}

func (x *DiversifierMessage) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiversifierMessage.ProtoReflect.Descriptor instead.
func (*DiversifierMessage) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{53}
}

func (x *DiversifierMessage) GetD() []byte {
	if x != nil {
		return x.D
	}
	return nil
}

type IncomingViewingKeyDiversifierMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ivk *IncomingViewingKeyMessage `protobuf:"bytes,1,opt,name=ivk,proto3" json:"ivk,omitempty"`
	D   *DiversifierMessage        `protobuf:"bytes,2,opt,name=d,proto3" json:"d,omitempty"`
}

func (x *IncomingViewingKeyDiversifierMessage) Reset() {
	*x = IncomingViewingKeyDiversifierMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncomingViewingKeyDiversifierMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncomingViewingKeyDiversifierMessage) ProtoMessage() {}

func (x *IncomingViewingKeyDiversifierMessage) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncomingViewingKeyDiversifierMessage.ProtoReflect.Descriptor instead.
func (*IncomingViewingKeyDiversifierMessage) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{54}
}

func (x *IncomingViewingKeyDiversifierMessage) GetIvk() *IncomingViewingKeyMessage {
	if x != nil {
		return x.Ivk
	}
	return nil
}

func (x *IncomingViewingKeyDiversifierMessage) GetD() *DiversifierMessage {
	if x != nil {
		return x.D
	}
	return nil
}

type PaymentAddressMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	D              *DiversifierMessage `protobuf:"bytes,1,opt,name=d,proto3" json:"d,omitempty"`
	PkD            []byte              `protobuf:"bytes,2,opt,name=pkD,proto3" json:"pkD,omitempty"`
	PaymentAddress string              `protobuf:"bytes,3,opt,name=payment_address,json=paymentAddress,proto3" json:"payment_address,omitempty"`
}

func (x *PaymentAddressMessage) Reset() {
	*x = PaymentAddressMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentAddressMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentAddressMessage) ProtoMessage() {}

func (x *PaymentAddressMessage) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentAddressMessage.ProtoReflect.Descriptor instead.
func (*PaymentAddressMessage) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{55}
}

func (x *PaymentAddressMessage) GetD() *DiversifierMessage {
	if x != nil {
		return x.D
	}
	return nil
}

func (x *PaymentAddressMessage) GetPkD() []byte {
	if x != nil {
		return x.PkD
	}
	return nil
}

func (x *PaymentAddressMessage) GetPaymentAddress() string {
	if x != nil {
		return x.PaymentAddress
	}
	return ""
}

type ShieldedAddressInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sk             []byte `protobuf:"bytes,1,opt,name=sk,proto3" json:"sk,omitempty"`
	Ask            []byte `protobuf:"bytes,2,opt,name=ask,proto3" json:"ask,omitempty"`
	Nsk            []byte `protobuf:"bytes,3,opt,name=nsk,proto3" json:"nsk,omitempty"`
	Ovk            []byte `protobuf:"bytes,4,opt,name=ovk,proto3" json:"ovk,omitempty"`
	Ak             []byte `protobuf:"bytes,5,opt,name=ak,proto3" json:"ak,omitempty"`
	Nk             []byte `protobuf:"bytes,6,opt,name=nk,proto3" json:"nk,omitempty"`
	Ivk            []byte `protobuf:"bytes,7,opt,name=ivk,proto3" json:"ivk,omitempty"`
	D              []byte `protobuf:"bytes,8,opt,name=d,proto3" json:"d,omitempty"`
	PkD            []byte `protobuf:"bytes,9,opt,name=pkD,proto3" json:"pkD,omitempty"`
	PaymentAddress string `protobuf:"bytes,10,opt,name=payment_address,json=paymentAddress,proto3" json:"payment_address,omitempty"`
}

func (x *ShieldedAddressInfo) Reset() {
	*x = ShieldedAddressInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShieldedAddressInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShieldedAddressInfo) ProtoMessage() {}

func (x *ShieldedAddressInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShieldedAddressInfo.ProtoReflect.Descriptor instead.
func (*ShieldedAddressInfo) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{56}
}

func (x *ShieldedAddressInfo) GetSk() []byte {
	if x != nil {
		return x.Sk
	}
	return nil
}

func (x *ShieldedAddressInfo) GetAsk() []byte {
	if x != nil {
		return x.Ask
	}
	return nil
}

func (x *ShieldedAddressInfo) GetNsk() []byte {
	if x != nil {
		return x.Nsk
	}
	return nil
}

func (x *ShieldedAddressInfo) GetOvk() []byte {
	if x != nil {
		return x.Ovk
	}
	return nil
}

func (x *ShieldedAddressInfo) GetAk() []byte {
	if x != nil {
		return x.Ak
	}
	return nil
}

func (x *ShieldedAddressInfo) GetNk() []byte {
	if x != nil {
		return x.Nk
	}
	return nil
}

func (x *ShieldedAddressInfo) GetIvk() []byte {
	if x != nil {
		return x.Ivk
	}
	return nil
}

func (x *ShieldedAddressInfo) GetD() []byte {
	if x != nil {
		return x.D
	}
	return nil
}

func (x *ShieldedAddressInfo) GetPkD() []byte {
	if x != nil {
		return x.PkD
	}
	return nil
}

func (x *ShieldedAddressInfo) GetPaymentAddress() string {
	if x != nil {
		return x.PaymentAddress
	}
	return ""
}

type NoteParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ak    []byte `protobuf:"bytes,1,opt,name=ak,proto3" json:"ak,omitempty"`
	Nk    []byte `protobuf:"bytes,2,opt,name=nk,proto3" json:"nk,omitempty"`
	Note  *Note  `protobuf:"bytes,3,opt,name=note,proto3" json:"note,omitempty"`
	Txid  []byte `protobuf:"bytes,4,opt,name=txid,proto3" json:"txid,omitempty"`
	Index int32  `protobuf:"varint,5,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *NoteParameters) Reset() {
	*x = NoteParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteParameters) ProtoMessage() {}

func (x *NoteParameters) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteParameters.ProtoReflect.Descriptor instead.
func (*NoteParameters) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{57}
}

func (x *NoteParameters) GetAk() []byte {
	if x != nil {
		return x.Ak
	}
	return nil
}

func (x *NoteParameters) GetNk() []byte {
	if x != nil {
		return x.Nk
	}
	return nil
}

func (x *NoteParameters) GetNote() *Note {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *NoteParameters) GetTxid() []byte {
	if x != nil {
		return x.Txid
	}
	return nil
}

func (x *NoteParameters) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type SpendResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result  bool   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SpendResult) Reset() {
	*x = SpendResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpendResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpendResult) ProtoMessage() {}

func (x *SpendResult) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpendResult.ProtoReflect.Descriptor instead.
func (*SpendResult) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{58}
}

func (x *SpendResult) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *SpendResult) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type TransactionInfoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionInfo []*core.TransactionInfo `protobuf:"bytes,1,rep,name=transactionInfo,proto3" json:"transactionInfo,omitempty"`
}

func (x *TransactionInfoList) Reset() {
	*x = TransactionInfoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionInfoList) ProtoMessage() {}

func (x *TransactionInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionInfoList.ProtoReflect.Descriptor instead.
func (*TransactionInfoList) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{59}
}

func (x *TransactionInfoList) GetTransactionInfo() []*core.TransactionInfo {
	if x != nil {
		return x.TransactionInfo
	}
	return nil
}

type SpendNoteTRC20 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Note  *Note  `protobuf:"bytes,1,opt,name=note,proto3" json:"note,omitempty"`
	Alpha []byte `protobuf:"bytes,2,opt,name=alpha,proto3" json:"alpha,omitempty"`
	Root  []byte `protobuf:"bytes,3,opt,name=root,proto3" json:"root,omitempty"`
	Path  []byte `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	Pos   int64  `protobuf:"varint,5,opt,name=pos,proto3" json:"pos,omitempty"`
}

func (x *SpendNoteTRC20) Reset() {
	*x = SpendNoteTRC20{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpendNoteTRC20) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpendNoteTRC20) ProtoMessage() {}

func (x *SpendNoteTRC20) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpendNoteTRC20.ProtoReflect.Descriptor instead.
func (*SpendNoteTRC20) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{60}
}

func (x *SpendNoteTRC20) GetNote() *Note {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *SpendNoteTRC20) GetAlpha() []byte {
	if x != nil {
		return x.Alpha
	}
	return nil
}

func (x *SpendNoteTRC20) GetRoot() []byte {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *SpendNoteTRC20) GetPath() []byte {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *SpendNoteTRC20) GetPos() int64 {
	if x != nil {
		return x.Pos
	}
	return 0
}

type PrivateShieldedTRC20Parameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ask                           []byte            `protobuf:"bytes,1,opt,name=ask,proto3" json:"ask,omitempty"`
	Nsk                           []byte            `protobuf:"bytes,2,opt,name=nsk,proto3" json:"nsk,omitempty"`
	Ovk                           []byte            `protobuf:"bytes,3,opt,name=ovk,proto3" json:"ovk,omitempty"`
	FromAmount                    string            `protobuf:"bytes,4,opt,name=from_amount,json=fromAmount,proto3" json:"from_amount,omitempty"`
	ShieldedSpends                []*SpendNoteTRC20 `protobuf:"bytes,5,rep,name=shielded_spends,json=shieldedSpends,proto3" json:"shielded_spends,omitempty"`
	ShieldedReceives              []*ReceiveNote    `protobuf:"bytes,6,rep,name=shielded_receives,json=shieldedReceives,proto3" json:"shielded_receives,omitempty"`
	TransparentToAddress          []byte            `protobuf:"bytes,7,opt,name=transparent_to_address,json=transparentToAddress,proto3" json:"transparent_to_address,omitempty"`
	ToAmount                      string            `protobuf:"bytes,8,opt,name=to_amount,json=toAmount,proto3" json:"to_amount,omitempty"`
	Shielded_TRC20ContractAddress []byte            `protobuf:"bytes,9,opt,name=shielded_TRC20_contract_address,json=shieldedTRC20ContractAddress,proto3" json:"shielded_TRC20_contract_address,omitempty"`
}

func (x *PrivateShieldedTRC20Parameters) Reset() {
	*x = PrivateShieldedTRC20Parameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateShieldedTRC20Parameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateShieldedTRC20Parameters) ProtoMessage() {}

func (x *PrivateShieldedTRC20Parameters) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateShieldedTRC20Parameters.ProtoReflect.Descriptor instead.
func (*PrivateShieldedTRC20Parameters) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{61}
}

func (x *PrivateShieldedTRC20Parameters) GetAsk() []byte {
	if x != nil {
		return x.Ask
	}
	return nil
}

func (x *PrivateShieldedTRC20Parameters) GetNsk() []byte {
	if x != nil {
		return x.Nsk
	}
	return nil
}

func (x *PrivateShieldedTRC20Parameters) GetOvk() []byte {
	if x != nil {
		return x.Ovk
	}
	return nil
}

func (x *PrivateShieldedTRC20Parameters) GetFromAmount() string {
	if x != nil {
		return x.FromAmount
	}
	return ""
}

func (x *PrivateShieldedTRC20Parameters) GetShieldedSpends() []*SpendNoteTRC20 {
	if x != nil {
		return x.ShieldedSpends
	}
	return nil
}

func (x *PrivateShieldedTRC20Parameters) GetShieldedReceives() []*ReceiveNote {
	if x != nil {
		return x.ShieldedReceives
	}
	return nil
}

func (x *PrivateShieldedTRC20Parameters) GetTransparentToAddress() []byte {
	if x != nil {
		return x.TransparentToAddress
	}
	return nil
}

func (x *PrivateShieldedTRC20Parameters) GetToAmount() string {
	if x != nil {
		return x.ToAmount
	}
	return ""
}

func (x *PrivateShieldedTRC20Parameters) GetShielded_TRC20ContractAddress() []byte {
	if x != nil {
		return x.Shielded_TRC20ContractAddress
	}
	return nil
}

type PrivateShieldedTRC20ParametersWithoutAsk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ak                            []byte            `protobuf:"bytes,1,opt,name=ak,proto3" json:"ak,omitempty"`
	Nsk                           []byte            `protobuf:"bytes,2,opt,name=nsk,proto3" json:"nsk,omitempty"`
	Ovk                           []byte            `protobuf:"bytes,3,opt,name=ovk,proto3" json:"ovk,omitempty"`
	FromAmount                    string            `protobuf:"bytes,4,opt,name=from_amount,json=fromAmount,proto3" json:"from_amount,omitempty"`
	ShieldedSpends                []*SpendNoteTRC20 `protobuf:"bytes,5,rep,name=shielded_spends,json=shieldedSpends,proto3" json:"shielded_spends,omitempty"`
	ShieldedReceives              []*ReceiveNote    `protobuf:"bytes,6,rep,name=shielded_receives,json=shieldedReceives,proto3" json:"shielded_receives,omitempty"`
	TransparentToAddress          []byte            `protobuf:"bytes,7,opt,name=transparent_to_address,json=transparentToAddress,proto3" json:"transparent_to_address,omitempty"`
	ToAmount                      string            `protobuf:"bytes,8,opt,name=to_amount,json=toAmount,proto3" json:"to_amount,omitempty"`
	Shielded_TRC20ContractAddress []byte            `protobuf:"bytes,9,opt,name=shielded_TRC20_contract_address,json=shieldedTRC20ContractAddress,proto3" json:"shielded_TRC20_contract_address,omitempty"`
}

func (x *PrivateShieldedTRC20ParametersWithoutAsk) Reset() {
	*x = PrivateShieldedTRC20ParametersWithoutAsk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateShieldedTRC20ParametersWithoutAsk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateShieldedTRC20ParametersWithoutAsk) ProtoMessage() {}

func (x *PrivateShieldedTRC20ParametersWithoutAsk) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateShieldedTRC20ParametersWithoutAsk.ProtoReflect.Descriptor instead.
func (*PrivateShieldedTRC20ParametersWithoutAsk) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{62}
}

func (x *PrivateShieldedTRC20ParametersWithoutAsk) GetAk() []byte {
	if x != nil {
		return x.Ak
	}
	return nil
}

func (x *PrivateShieldedTRC20ParametersWithoutAsk) GetNsk() []byte {
	if x != nil {
		return x.Nsk
	}
	return nil
}

func (x *PrivateShieldedTRC20ParametersWithoutAsk) GetOvk() []byte {
	if x != nil {
		return x.Ovk
	}
	return nil
}

func (x *PrivateShieldedTRC20ParametersWithoutAsk) GetFromAmount() string {
	if x != nil {
		return x.FromAmount
	}
	return ""
}

func (x *PrivateShieldedTRC20ParametersWithoutAsk) GetShieldedSpends() []*SpendNoteTRC20 {
	if x != nil {
		return x.ShieldedSpends
	}
	return nil
}

func (x *PrivateShieldedTRC20ParametersWithoutAsk) GetShieldedReceives() []*ReceiveNote {
	if x != nil {
		return x.ShieldedReceives
	}
	return nil
}

func (x *PrivateShieldedTRC20ParametersWithoutAsk) GetTransparentToAddress() []byte {
	if x != nil {
		return x.TransparentToAddress
	}
	return nil
}

func (x *PrivateShieldedTRC20ParametersWithoutAsk) GetToAmount() string {
	if x != nil {
		return x.ToAmount
	}
	return ""
}

func (x *PrivateShieldedTRC20ParametersWithoutAsk) GetShielded_TRC20ContractAddress() []byte {
	if x != nil {
		return x.Shielded_TRC20ContractAddress
	}
	return nil
}

type ShieldedTRC20Parameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpendDescription     []*core.SpendDescription   `protobuf:"bytes,1,rep,name=spend_description,json=spendDescription,proto3" json:"spend_description,omitempty"`
	ReceiveDescription   []*core.ReceiveDescription `protobuf:"bytes,2,rep,name=receive_description,json=receiveDescription,proto3" json:"receive_description,omitempty"`
	BindingSignature     []byte                     `protobuf:"bytes,3,opt,name=binding_signature,json=bindingSignature,proto3" json:"binding_signature,omitempty"`
	MessageHash          []byte                     `protobuf:"bytes,4,opt,name=message_hash,json=messageHash,proto3" json:"message_hash,omitempty"`
	TriggerContractInput string                     `protobuf:"bytes,5,opt,name=trigger_contract_input,json=triggerContractInput,proto3" json:"trigger_contract_input,omitempty"`
	ParameterType        string                     `protobuf:"bytes,6,opt,name=parameter_type,json=parameterType,proto3" json:"parameter_type,omitempty"`
}

func (x *ShieldedTRC20Parameters) Reset() {
	*x = ShieldedTRC20Parameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShieldedTRC20Parameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShieldedTRC20Parameters) ProtoMessage() {}

func (x *ShieldedTRC20Parameters) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShieldedTRC20Parameters.ProtoReflect.Descriptor instead.
func (*ShieldedTRC20Parameters) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{63}
}

func (x *ShieldedTRC20Parameters) GetSpendDescription() []*core.SpendDescription {
	if x != nil {
		return x.SpendDescription
	}
	return nil
}

func (x *ShieldedTRC20Parameters) GetReceiveDescription() []*core.ReceiveDescription {
	if x != nil {
		return x.ReceiveDescription
	}
	return nil
}

func (x *ShieldedTRC20Parameters) GetBindingSignature() []byte {
	if x != nil {
		return x.BindingSignature
	}
	return nil
}

func (x *ShieldedTRC20Parameters) GetMessageHash() []byte {
	if x != nil {
		return x.MessageHash
	}
	return nil
}

func (x *ShieldedTRC20Parameters) GetTriggerContractInput() string {
	if x != nil {
		return x.TriggerContractInput
	}
	return ""
}

func (x *ShieldedTRC20Parameters) GetParameterType() string {
	if x != nil {
		return x.ParameterType
	}
	return ""
}

type IvkDecryptTRC20Parameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartBlockIndex               int64    `protobuf:"varint,1,opt,name=start_block_index,json=startBlockIndex,proto3" json:"start_block_index,omitempty"`
	EndBlockIndex                 int64    `protobuf:"varint,2,opt,name=end_block_index,json=endBlockIndex,proto3" json:"end_block_index,omitempty"`
	Shielded_TRC20ContractAddress []byte   `protobuf:"bytes,3,opt,name=shielded_TRC20_contract_address,json=shieldedTRC20ContractAddress,proto3" json:"shielded_TRC20_contract_address,omitempty"`
	Ivk                           []byte   `protobuf:"bytes,4,opt,name=ivk,proto3" json:"ivk,omitempty"`
	Ak                            []byte   `protobuf:"bytes,5,opt,name=ak,proto3" json:"ak,omitempty"`
	Nk                            []byte   `protobuf:"bytes,6,opt,name=nk,proto3" json:"nk,omitempty"`
	Events                        []string `protobuf:"bytes,7,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *IvkDecryptTRC20Parameters) Reset() {
	*x = IvkDecryptTRC20Parameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IvkDecryptTRC20Parameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IvkDecryptTRC20Parameters) ProtoMessage() {}

func (x *IvkDecryptTRC20Parameters) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IvkDecryptTRC20Parameters.ProtoReflect.Descriptor instead.
func (*IvkDecryptTRC20Parameters) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{64}
}

func (x *IvkDecryptTRC20Parameters) GetStartBlockIndex() int64 {
	if x != nil {
		return x.StartBlockIndex
	}
	return 0
}

func (x *IvkDecryptTRC20Parameters) GetEndBlockIndex() int64 {
	if x != nil {
		return x.EndBlockIndex
	}
	return 0
}

func (x *IvkDecryptTRC20Parameters) GetShielded_TRC20ContractAddress() []byte {
	if x != nil {
		return x.Shielded_TRC20ContractAddress
	}
	return nil
}

func (x *IvkDecryptTRC20Parameters) GetIvk() []byte {
	if x != nil {
		return x.Ivk
	}
	return nil
}

func (x *IvkDecryptTRC20Parameters) GetAk() []byte {
	if x != nil {
		return x.Ak
	}
	return nil
}

func (x *IvkDecryptTRC20Parameters) GetNk() []byte {
	if x != nil {
		return x.Nk
	}
	return nil
}

func (x *IvkDecryptTRC20Parameters) GetEvents() []string {
	if x != nil {
		return x.Events
	}
	return nil
}

type OvkDecryptTRC20Parameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartBlockIndex               int64    `protobuf:"varint,1,opt,name=start_block_index,json=startBlockIndex,proto3" json:"start_block_index,omitempty"`
	EndBlockIndex                 int64    `protobuf:"varint,2,opt,name=end_block_index,json=endBlockIndex,proto3" json:"end_block_index,omitempty"`
	Ovk                           []byte   `protobuf:"bytes,3,opt,name=ovk,proto3" json:"ovk,omitempty"`
	Shielded_TRC20ContractAddress []byte   `protobuf:"bytes,4,opt,name=shielded_TRC20_contract_address,json=shieldedTRC20ContractAddress,proto3" json:"shielded_TRC20_contract_address,omitempty"`
	Events                        []string `protobuf:"bytes,5,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *OvkDecryptTRC20Parameters) Reset() {
	*x = OvkDecryptTRC20Parameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OvkDecryptTRC20Parameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OvkDecryptTRC20Parameters) ProtoMessage() {}

func (x *OvkDecryptTRC20Parameters) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OvkDecryptTRC20Parameters.ProtoReflect.Descriptor instead.
func (*OvkDecryptTRC20Parameters) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{65}
}

func (x *OvkDecryptTRC20Parameters) GetStartBlockIndex() int64 {
	if x != nil {
		return x.StartBlockIndex
	}
	return 0
}

func (x *OvkDecryptTRC20Parameters) GetEndBlockIndex() int64 {
	if x != nil {
		return x.EndBlockIndex
	}
	return 0
}

func (x *OvkDecryptTRC20Parameters) GetOvk() []byte {
	if x != nil {
		return x.Ovk
	}
	return nil
}

func (x *OvkDecryptTRC20Parameters) GetShielded_TRC20ContractAddress() []byte {
	if x != nil {
		return x.Shielded_TRC20ContractAddress
	}
	return nil
}

func (x *OvkDecryptTRC20Parameters) GetEvents() []string {
	if x != nil {
		return x.Events
	}
	return nil
}

type DecryptNotesTRC20 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoteTxs []*DecryptNotesTRC20_NoteTx `protobuf:"bytes,1,rep,name=noteTxs,proto3" json:"noteTxs,omitempty"`
}

func (x *DecryptNotesTRC20) Reset() {
	*x = DecryptNotesTRC20{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecryptNotesTRC20) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecryptNotesTRC20) ProtoMessage() {}

func (x *DecryptNotesTRC20) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecryptNotesTRC20.ProtoReflect.Descriptor instead.
func (*DecryptNotesTRC20) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{66}
}

func (x *DecryptNotesTRC20) GetNoteTxs() []*DecryptNotesTRC20_NoteTx {
	if x != nil {
		return x.NoteTxs
	}
	return nil
}

type NfTRC20Parameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Note                          *Note  `protobuf:"bytes,1,opt,name=note,proto3" json:"note,omitempty"`
	Ak                            []byte `protobuf:"bytes,2,opt,name=ak,proto3" json:"ak,omitempty"`
	Nk                            []byte `protobuf:"bytes,3,opt,name=nk,proto3" json:"nk,omitempty"`
	Position                      int64  `protobuf:"varint,4,opt,name=position,proto3" json:"position,omitempty"`
	Shielded_TRC20ContractAddress []byte `protobuf:"bytes,5,opt,name=shielded_TRC20_contract_address,json=shieldedTRC20ContractAddress,proto3" json:"shielded_TRC20_contract_address,omitempty"`
}

func (x *NfTRC20Parameters) Reset() {
	*x = NfTRC20Parameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NfTRC20Parameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NfTRC20Parameters) ProtoMessage() {}

func (x *NfTRC20Parameters) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NfTRC20Parameters.ProtoReflect.Descriptor instead.
func (*NfTRC20Parameters) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{67}
}

func (x *NfTRC20Parameters) GetNote() *Note {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *NfTRC20Parameters) GetAk() []byte {
	if x != nil {
		return x.Ak
	}
	return nil
}

func (x *NfTRC20Parameters) GetNk() []byte {
	if x != nil {
		return x.Nk
	}
	return nil
}

func (x *NfTRC20Parameters) GetPosition() int64 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *NfTRC20Parameters) GetShielded_TRC20ContractAddress() []byte {
	if x != nil {
		return x.Shielded_TRC20ContractAddress
	}
	return nil
}

type NullifierResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSpent bool `protobuf:"varint,1,opt,name=is_spent,json=isSpent,proto3" json:"is_spent,omitempty"`
}

func (x *NullifierResult) Reset() {
	*x = NullifierResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NullifierResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NullifierResult) ProtoMessage() {}

func (x *NullifierResult) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NullifierResult.ProtoReflect.Descriptor instead.
func (*NullifierResult) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{68}
}

func (x *NullifierResult) GetIsSpent() bool {
	if x != nil {
		return x.IsSpent
	}
	return false
}

type ShieldedTRC20TriggerContractParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shielded_TRC20_Parameters *ShieldedTRC20Parameters `protobuf:"bytes,1,opt,name=shielded_TRC20_Parameters,json=shieldedTRC20Parameters,proto3" json:"shielded_TRC20_Parameters,omitempty"`
	SpendAuthoritySignature   []*BytesMessage          `protobuf:"bytes,2,rep,name=spend_authority_signature,json=spendAuthoritySignature,proto3" json:"spend_authority_signature,omitempty"`
	Amount                    string                   `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	TransparentToAddress      []byte                   `protobuf:"bytes,4,opt,name=transparent_to_address,json=transparentToAddress,proto3" json:"transparent_to_address,omitempty"`
}

func (x *ShieldedTRC20TriggerContractParameters) Reset() {
	*x = ShieldedTRC20TriggerContractParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShieldedTRC20TriggerContractParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShieldedTRC20TriggerContractParameters) ProtoMessage() {}

func (x *ShieldedTRC20TriggerContractParameters) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShieldedTRC20TriggerContractParameters.ProtoReflect.Descriptor instead.
func (*ShieldedTRC20TriggerContractParameters) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{69}
}

func (x *ShieldedTRC20TriggerContractParameters) GetShielded_TRC20_Parameters() *ShieldedTRC20Parameters {
	if x != nil {
		return x.Shielded_TRC20_Parameters
	}
	return nil
}

func (x *ShieldedTRC20TriggerContractParameters) GetSpendAuthoritySignature() []*BytesMessage {
	if x != nil {
		return x.SpendAuthoritySignature
	}
	return nil
}

func (x *ShieldedTRC20TriggerContractParameters) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *ShieldedTRC20TriggerContractParameters) GetTransparentToAddress() []byte {
	if x != nil {
		return x.TransparentToAddress
	}
	return nil
}

type TransactionSignWeight_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    TransactionSignWeight_ResultResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=protocol.TransactionSignWeight_ResultResponseCode" json:"code,omitempty"`
	Message string                                   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *TransactionSignWeight_Result) Reset() {
	*x = TransactionSignWeight_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionSignWeight_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionSignWeight_Result) ProtoMessage() {}

func (x *TransactionSignWeight_Result) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionSignWeight_Result.ProtoReflect.Descriptor instead.
func (*TransactionSignWeight_Result) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{36, 0}
}

func (x *TransactionSignWeight_Result) GetCode() TransactionSignWeight_ResultResponseCode {
	if x != nil {
		return x.Code
	}
	return TransactionSignWeight_Result_ENOUGH_PERMISSION
}

func (x *TransactionSignWeight_Result) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type TransactionApprovedList_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    TransactionApprovedList_ResultResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=protocol.TransactionApprovedList_ResultResponseCode" json:"code,omitempty"`
	Message string                                     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *TransactionApprovedList_Result) Reset() {
	*x = TransactionApprovedList_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionApprovedList_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionApprovedList_Result) ProtoMessage() {}

func (x *TransactionApprovedList_Result) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionApprovedList_Result.ProtoReflect.Descriptor instead.
func (*TransactionApprovedList_Result) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{37, 0}
}

func (x *TransactionApprovedList_Result) GetCode() TransactionApprovedList_ResultResponseCode {
	if x != nil {
		return x.Code
	}
	return TransactionApprovedList_Result_SUCCESS
}

func (x *TransactionApprovedList_Result) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DecryptNotes_NoteTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Note  *Note  `protobuf:"bytes,1,opt,name=note,proto3" json:"note,omitempty"`
	Txid  []byte `protobuf:"bytes,2,opt,name=txid,proto3" json:"txid,omitempty"`    //transaction id =  sha256(transaction.rowdata)
	Index int32  `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"` //the index of note in receive
}

func (x *DecryptNotes_NoteTx) Reset() {
	*x = DecryptNotes_NoteTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecryptNotes_NoteTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecryptNotes_NoteTx) ProtoMessage() {}

func (x *DecryptNotes_NoteTx) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecryptNotes_NoteTx.ProtoReflect.Descriptor instead.
func (*DecryptNotes_NoteTx) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{41, 0}
}

func (x *DecryptNotes_NoteTx) GetNote() *Note {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *DecryptNotes_NoteTx) GetTxid() []byte {
	if x != nil {
		return x.Txid
	}
	return nil
}

func (x *DecryptNotes_NoteTx) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type DecryptNotesMarked_NoteTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Note    *Note  `protobuf:"bytes,1,opt,name=note,proto3" json:"note,omitempty"`
	Txid    []byte `protobuf:"bytes,2,opt,name=txid,proto3" json:"txid,omitempty"`    //transaction id =  sha256(transaction.rowdata)
	Index   int32  `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"` //the index of note in receive
	IsSpend bool   `protobuf:"varint,4,opt,name=is_spend,json=isSpend,proto3" json:"is_spend,omitempty"`
}

func (x *DecryptNotesMarked_NoteTx) Reset() {
	*x = DecryptNotesMarked_NoteTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecryptNotesMarked_NoteTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecryptNotesMarked_NoteTx) ProtoMessage() {}

func (x *DecryptNotesMarked_NoteTx) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecryptNotesMarked_NoteTx.ProtoReflect.Descriptor instead.
func (*DecryptNotesMarked_NoteTx) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{42, 0}
}

func (x *DecryptNotesMarked_NoteTx) GetNote() *Note {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *DecryptNotesMarked_NoteTx) GetTxid() []byte {
	if x != nil {
		return x.Txid
	}
	return nil
}

func (x *DecryptNotesMarked_NoteTx) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *DecryptNotesMarked_NoteTx) GetIsSpend() bool {
	if x != nil {
		return x.IsSpend
	}
	return false
}

type DecryptNotesTRC20_NoteTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Note                 *Note  `protobuf:"bytes,1,opt,name=note,proto3" json:"note,omitempty"`
	Position             int64  `protobuf:"varint,2,opt,name=position,proto3" json:"position,omitempty"`
	IsSpent              bool   `protobuf:"varint,3,opt,name=is_spent,json=isSpent,proto3" json:"is_spent,omitempty"`
	Txid                 []byte `protobuf:"bytes,4,opt,name=txid,proto3" json:"txid,omitempty"`
	Index                int32  `protobuf:"varint,5,opt,name=index,proto3" json:"index,omitempty"` //the index of note in txid
	ToAmount             string `protobuf:"bytes,6,opt,name=to_amount,json=toAmount,proto3" json:"to_amount,omitempty"`
	TransparentToAddress []byte `protobuf:"bytes,7,opt,name=transparent_to_address,json=transparentToAddress,proto3" json:"transparent_to_address,omitempty"`
}

func (x *DecryptNotesTRC20_NoteTx) Reset() {
	*x = DecryptNotesTRC20_NoteTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_api_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecryptNotesTRC20_NoteTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecryptNotesTRC20_NoteTx) ProtoMessage() {}

func (x *DecryptNotesTRC20_NoteTx) ProtoReflect() protoreflect.Message {
	mi := &file_api_api_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecryptNotesTRC20_NoteTx.ProtoReflect.Descriptor instead.
func (*DecryptNotesTRC20_NoteTx) Descriptor() ([]byte, []int) {
	return file_api_api_proto_rawDescGZIP(), []int{66, 0}
}

func (x *DecryptNotesTRC20_NoteTx) GetNote() *Note {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *DecryptNotesTRC20_NoteTx) GetPosition() int64 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *DecryptNotesTRC20_NoteTx) GetIsSpent() bool {
	if x != nil {
		return x.IsSpent
	}
	return false
}

func (x *DecryptNotesTRC20_NoteTx) GetTxid() []byte {
	if x != nil {
		return x.Txid
	}
	return nil
}

func (x *DecryptNotesTRC20_NoteTx) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *DecryptNotesTRC20_NoteTx) GetToAmount() string {
	if x != nil {
		return x.ToAmount
	}
	return ""
}

func (x *DecryptNotesTRC20_NoteTx) GetTransparentToAddress() []byte {
	if x != nil {
		return x.TransparentToAddress
	}
	return nil
}

var File_api_api_proto protoreflect.FileDescriptor

var file_api_api_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x1a, 0x0f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x54, 0x72, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x24, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2f, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24,
	0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2f, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x63, 0x6f, 0x72,
	0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x25, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x22, 0x63,
	0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2f, 0x73, 0x6d, 0x61,
	0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x23, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2f, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xab, 0x03, 0x0a, 0x06, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xba, 0x02, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x49, 0x47, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54,
	0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x02, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x45, 0x58,
	0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x41, 0x4e,
	0x44, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x19, 0x0a,
	0x15, 0x44, 0x55, 0x50, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x41, 0x50, 0x4f,
	0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x4f, 0x4f,
	0x5f, 0x42, 0x49, 0x47, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x07, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x45,
	0x52, 0x56, 0x45, 0x52, 0x5f, 0x42, 0x55, 0x53, 0x59, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x4e,
	0x4f, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0a, 0x12, 0x23,
	0x0a, 0x1f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x4f, 0x55, 0x47, 0x48, 0x5f, 0x45, 0x46, 0x46,
	0x45, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x14, 0x22, 0x4c, 0x0a, 0x0e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x4e, 0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61,
	0x73, 0x68, 0x22, 0x3e, 0x0a, 0x0b, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x2f, 0x0a, 0x09, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x09, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x22, 0x40, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x30, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x73, 0x22, 0x40, 0x0a, 0x0c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x09, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x4e, 0x0a, 0x0e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x22, 0x32, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x4a, 0x0a, 0x0f, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a,
	0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x27, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x78, 0x49, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x22,
	0x5a, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66,
	0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x62, 0x0a, 0x15, 0x44,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x11, 0x64, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22,
	0x30, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x6e,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x22, 0x33, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x31, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x0e, 0x0a, 0x0c, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x21, 0x0a, 0x0d, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22, 0x24, 0x0a, 0x0c,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x6d, 0x0a, 0x0b, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x30, 0x0a, 0x13, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x4d, 0x69, 0x6c, 0x6c,
	0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13,
	0x62, 0x65, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x4d, 0x69, 0x6c, 0x6c,
	0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11,
	0x65, 0x6e, 0x64, 0x49, 0x6e, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x22, 0x40, 0x0a, 0x0a, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x65, 0x6e, 0x64,
	0x4e, 0x75, 0x6d, 0x22, 0x54, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4e, 0x75, 0x6d, 0x22, 0x6d, 0x0a, 0x10, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2b, 0x0a,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x7d, 0x0a, 0x14, 0x54, 0x69, 0x6d, 0x65,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x37, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x74, 0x69,
	0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x89, 0x04, 0x0a, 0x11, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4e, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x66, 0x72, 0x65, 0x65, 0x4e, 0x65, 0x74, 0x55, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x66, 0x72, 0x65, 0x65, 0x4e, 0x65, 0x74, 0x55, 0x73, 0x65, 0x64, 0x12,
	0x22, 0x0a, 0x0c, 0x66, 0x72, 0x65, 0x65, 0x4e, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x66, 0x72, 0x65, 0x65, 0x4e, 0x65, 0x74, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x55, 0x73, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x4e, 0x65, 0x74, 0x55, 0x73, 0x65, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x4e, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x4e, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x51, 0x0a, 0x0c, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x4e, 0x65, 0x74, 0x55, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4e, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x4e, 0x65, 0x74, 0x55, 0x73, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x55, 0x73, 0x65, 0x64, 0x12, 0x54, 0x0a, 0x0d,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x4e, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x4e, 0x65, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x1a, 0x3f, 0x0a, 0x11, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x55, 0x73, 0x65, 0x64,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x40, 0x0a, 0x12, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xfc, 0x06, 0x0a, 0x16, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x66, 0x72, 0x65, 0x65, 0x4e, 0x65, 0x74, 0x55, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x72, 0x65, 0x65, 0x4e, 0x65, 0x74, 0x55, 0x73, 0x65, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x66, 0x72, 0x65, 0x65, 0x4e, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x66, 0x72, 0x65, 0x65, 0x4e, 0x65, 0x74, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x55, 0x73, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x4e, 0x65, 0x74, 0x55, 0x73, 0x65, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x4e, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x4e, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x56, 0x0a, 0x0c, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x55, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x55, 0x73, 0x65, 0x64, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x64, 0x12, 0x59, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x4e, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x4e, 0x65, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x32, 0x0a, 0x14, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x6f, 0x6e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x54, 0x72, 0x6f, 0x6e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x74, 0x72, 0x6f, 0x6e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x55, 0x73, 0x65, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x72, 0x6f, 0x6e, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x72, 0x6f, 0x6e, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74,
	0x72, 0x6f, 0x6e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1e, 0x0a,
	0x0a, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x55, 0x73, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x55, 0x73, 0x65, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x2a, 0x0a, 0x10, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6e, 0x65,
	0x72, 0x67, 0x79, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x55, 0x73, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x55, 0x73, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a,
	0x3f, 0x0a, 0x11, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x55, 0x73, 0x65, 0x64, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x40, 0x0a, 0x12, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x40, 0x0a, 0x10, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x22, 0x6b, 0x0a, 0x13, 0x45, 0x61, 0x73, 0x79, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x61, 0x73, 0x73, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0a, 0x70, 0x61, 0x73, 0x73, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x8a, 0x01, 0x0a, 0x18, 0x45, 0x61, 0x73, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x74,
	0x0a, 0x1c, 0x45, 0x61, 0x73, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x79,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x93, 0x01, 0x0a, 0x21, 0x45, 0x61, 0x73, 0x79, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x42, 0x79, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x74,
	0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x14, 0x45,
	0x61, 0x73, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x22, 0x53, 0x0a, 0x17, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x72, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x22,
	0xd7, 0x01, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x74, 0x78, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0e,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x28,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x65, 0x72,
	0x67, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x65,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x55, 0x73, 0x65, 0x64, 0x22, 0xa8, 0x01, 0x0a, 0x0e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0c,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x38, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0b, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x69, 0x64, 0x22, 0x44, 0x0a, 0x12, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73,
	0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x05, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x5c, 0x0a, 0x18, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x75, 0x0a, 0x1a, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x72, 0x6b,
	0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x3f,
	0x0a, 0x0a, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x49, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x54,
	0x72, 0x65, 0x65, 0x52, 0x0a, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x22,
	0xac, 0x04, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x69, 0x67, 0x6e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x34, 0x0a, 0x0a, 0x70, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x3e, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x40, 0x0a, 0x0b, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x8e, 0x02,
	0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x48, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67,
	0x6e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x9f, 0x01, 0x0a,
	0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x15,
	0x0a, 0x11, 0x45, 0x4e, 0x4f, 0x55, 0x47, 0x48, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x4f,
	0x55, 0x47, 0x48, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x01,
	0x12, 0x1a, 0x0a, 0x16, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x46, 0x4f,
	0x52, 0x4d, 0x41, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15,
	0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x45, 0x52, 0x4d, 0x49,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x0f, 0x0a,
	0x0b, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x14, 0x22, 0x99,
	0x03, 0x0a, 0x17, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x40, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x40, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0xd4, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4a,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x64, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f,
	0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x19,
	0x0a, 0x15, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53,
	0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x14, 0x22, 0x7c, 0x0a, 0x14, 0x49, 0x76,
	0x6b, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x26,
	0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x76, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x03, 0x69, 0x76, 0x6b, 0x22, 0xa3, 0x01, 0x0a, 0x1b, 0x49, 0x76, 0x6b,
	0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x41, 0x6e, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x65,
	0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x10, 0x0a, 0x03,
	0x69, 0x76, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x69, 0x76, 0x6b, 0x12, 0x0e,
	0x0a, 0x02, 0x61, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x61, 0x6b, 0x12, 0x0e,
	0x0a, 0x02, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x6e, 0x6b, 0x22, 0x7c,
	0x0a, 0x14, 0x4f, 0x76, 0x6b, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x6e, 0x64,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x76,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6f, 0x76, 0x6b, 0x22, 0x9f, 0x01, 0x0a,
	0x0c, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x37, 0x0a,
	0x07, 0x6e, 0x6f, 0x74, 0x65, 0x54, 0x78, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x54, 0x78, 0x52, 0x07, 0x6e,
	0x6f, 0x74, 0x65, 0x54, 0x78, 0x73, 0x1a, 0x56, 0x0a, 0x06, 0x4e, 0x6f, 0x74, 0x65, 0x54, 0x78,
	0x12, 0x22, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x04,
	0x6e, 0x6f, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xc6,
	0x01, 0x0a, 0x12, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x64, 0x12, 0x3d, 0x0a, 0x07, 0x6e, 0x6f, 0x74, 0x65, 0x54, 0x78, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x64, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x54, 0x78, 0x52, 0x07, 0x6e, 0x6f, 0x74,
	0x65, 0x54, 0x78, 0x73, 0x1a, 0x71, 0x0a, 0x06, 0x4e, 0x6f, 0x74, 0x65, 0x54, 0x78, 0x12, 0x22,
	0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x04, 0x6e, 0x6f,
	0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x73, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x69, 0x73, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x22, 0x6b, 0x0a, 0x04, 0x4e, 0x6f, 0x74, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x72, 0x63, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x72, 0x63, 0x6d,
	0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x6d, 0x65, 0x6d, 0x6f, 0x22, 0x97, 0x01, 0x0a, 0x09, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x4e, 0x6f,
	0x74, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x6f, 0x74, 0x65,
	0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x12, 0x3c, 0x0a, 0x07,
	0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65,
	0x72, 0x52, 0x07, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x31,
	0x0a, 0x0b, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x22, 0x0a,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x74,
	0x65, 0x22, 0x93, 0x03, 0x0a, 0x11, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03,
	0x61, 0x73, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x03, 0x6e, 0x73, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x76, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x03, 0x6f, 0x76, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x72,
	0x6f, 0x6d, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x0f, 0x73, 0x68, 0x69, 0x65,
	0x6c, 0x64, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x70, 0x65,
	0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x0e, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64,
	0x53, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x42, 0x0a, 0x11, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64,
	0x65, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x10, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64,
	0x65, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x6f, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x9b, 0x03, 0x0a, 0x1b, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74,
	0x68, 0x6f, 0x75, 0x74, 0x41, 0x73, 0x6b, 0x12, 0x38, 0x0a, 0x18, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x61,
	0x6b, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03,
	0x6e, 0x73, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x76, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x03, 0x6f, 0x76, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x0f, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64,
	0x65, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x70, 0x65, 0x6e, 0x64,
	0x4e, 0x6f, 0x74, 0x65, 0x52, 0x0e, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x53, 0x70,
	0x65, 0x6e, 0x64, 0x73, 0x12, 0x42, 0x0a, 0x11, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x10, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x74, 0x6f, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x59, 0x0a, 0x16, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x41, 0x75,
	0x74, 0x68, 0x53, 0x69, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x61, 0x73,
	0x6b, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x22, 0x90, 0x01, 0x0a, 0x0c, 0x4e, 0x66, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x22, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x52,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x72,
	0x6b, 0x6c, 0x65, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x07, 0x76, 0x6f, 0x75, 0x63,
	0x68, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x02, 0x61, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x02, 0x6e, 0x6b, 0x22, 0x52, 0x0a, 0x1a, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x53,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03,
	0x61, 0x73, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x03, 0x6e, 0x73, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x76, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x03, 0x6f, 0x76, 0x6b, 0x22, 0x33, 0x0a, 0x11, 0x56, 0x69, 0x65, 0x77, 0x69,
	0x6e, 0x67, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x61, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x61, 0x6b, 0x12, 0x0e, 0x0a, 0x02,
	0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x6e, 0x6b, 0x22, 0x2d, 0x0a, 0x19,
	0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x56, 0x69, 0x65, 0x77, 0x69, 0x6e, 0x67, 0x4b,
	0x65, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x76, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x69, 0x76, 0x6b, 0x22, 0x22, 0x0a, 0x12, 0x44,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x0c, 0x0a, 0x01, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x64, 0x22,
	0x89, 0x01, 0x0a, 0x24, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x56, 0x69, 0x65, 0x77,
	0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x44, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x03, 0x69, 0x76, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x56, 0x69, 0x65, 0x77, 0x69, 0x6e, 0x67,
	0x4b, 0x65, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x03, 0x69, 0x76, 0x6b, 0x12,
	0x2a, 0x0a, 0x01, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x01, 0x64, 0x22, 0x7e, 0x0a, 0x15, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x01, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x01, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x70, 0x6b, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x70,
	0x6b, 0x44, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xd6, 0x01, 0x0a, 0x13,
	0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x02, 0x73, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x03, 0x61, 0x73, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x03, 0x6e, 0x73, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x76, 0x6b, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6f, 0x76, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x6b, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x61, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x6b, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x6e, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x76, 0x6b,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x69, 0x76, 0x6b, 0x12, 0x0c, 0x0a, 0x01, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6b, 0x44,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x70, 0x6b, 0x44, 0x12, 0x27, 0x0a, 0x0f, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0x7e, 0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x02, 0x61, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x02, 0x6e, 0x6b, 0x12, 0x22, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x4e, 0x6f, 0x74, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x22, 0x3f, 0x0a, 0x0b, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x5a, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0x84, 0x01, 0x0a, 0x0e, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x65, 0x54,
	0x52, 0x43, 0x32, 0x30, 0x12, 0x22, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x6f,
	0x74, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x72, 0x6f,
	0x6f, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x22, 0x98, 0x03, 0x0a, 0x1e, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x54, 0x52, 0x43, 0x32,
	0x30, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x61,
	0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x61, 0x73, 0x6b, 0x12, 0x10, 0x0a,
	0x03, 0x6e, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6e, 0x73, 0x6b, 0x12,
	0x10, 0x0a, 0x03, 0x6f, 0x76, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6f, 0x76,
	0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0f, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x5f, 0x73,
	0x70, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x65,
	0x54, 0x52, 0x43, 0x32, 0x30, 0x52, 0x0e, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x53,
	0x70, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x42, 0x0a, 0x11, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x10, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65,
	0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x1f,
	0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x5f, 0x54, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1c, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x54,
	0x52, 0x43, 0x32, 0x30, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0xa0, 0x03, 0x0a, 0x28, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53,
	0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x54, 0x52, 0x43, 0x32, 0x30, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x41, 0x73, 0x6b,
	0x12, 0x0e, 0x0a, 0x02, 0x61, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x61, 0x6b,
	0x12, 0x10, 0x0a, 0x03, 0x6e, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6e,
	0x73, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x76, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x03, 0x6f, 0x76, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x0f, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65,
	0x64, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x4e,
	0x6f, 0x74, 0x65, 0x54, 0x52, 0x43, 0x32, 0x30, 0x52, 0x0e, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64,
	0x65, 0x64, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x42, 0x0a, 0x11, 0x73, 0x68, 0x69, 0x65,
	0x6c, 0x64, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x10, 0x73, 0x68, 0x69, 0x65,
	0x6c, 0x64, 0x65, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x16,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x45, 0x0a, 0x1f, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x5f, 0x54, 0x52, 0x43, 0x32,
	0x30, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1c, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64,
	0x65, 0x64, 0x54, 0x52, 0x43, 0x32, 0x30, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xde, 0x02, 0x0a, 0x17, 0x53, 0x68, 0x69, 0x65, 0x6c,
	0x64, 0x65, 0x64, 0x54, 0x52, 0x43, 0x32, 0x30, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x47, 0x0a, 0x11, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x73, 0x70, 0x65, 0x6e, 0x64,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x13, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x62, 0x69,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x61, 0x73, 0x68, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x74, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0x80, 0x02, 0x0a, 0x19, 0x49, 0x76, 0x6b, 0x44,
	0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x54, 0x52, 0x43, 0x32, 0x30, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x6e, 0x64, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x45, 0x0a, 0x1f, 0x73, 0x68, 0x69,
	0x65, 0x6c, 0x64, 0x65, 0x64, 0x5f, 0x54, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x1c, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x54, 0x52, 0x43, 0x32,
	0x30, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x76, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x69,
	0x76, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02,
	0x61, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02,
	0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xe0, 0x01, 0x0a, 0x19, 0x4f,
	0x76, 0x6b, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x54, 0x52, 0x43, 0x32, 0x30, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x65,
	0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x10, 0x0a, 0x03,
	0x6f, 0x76, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6f, 0x76, 0x6b, 0x12, 0x45,
	0x0a, 0x1f, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x5f, 0x54, 0x52, 0x43, 0x32, 0x30,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1c, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65,
	0x64, 0x54, 0x52, 0x43, 0x32, 0x30, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xb4, 0x02,
	0x0a, 0x11, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x54, 0x52,
	0x43, 0x32, 0x30, 0x12, 0x3c, 0x0a, 0x07, 0x6e, 0x6f, 0x74, 0x65, 0x54, 0x78, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x54, 0x52, 0x43, 0x32,
	0x30, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x54, 0x78, 0x52, 0x07, 0x6e, 0x6f, 0x74, 0x65, 0x54, 0x78,
	0x73, 0x1a, 0xe0, 0x01, 0x0a, 0x06, 0x4e, 0x6f, 0x74, 0x65, 0x54, 0x78, 0x12, 0x22, 0x0a, 0x04,
	0x6e, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08,
	0x69, 0x73, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x69, 0x73, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34,
	0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x22, 0xba, 0x01, 0x0a, 0x11, 0x4e, 0x66, 0x54, 0x52, 0x43, 0x32, 0x30,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x6e, 0x6f,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x61, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x61, 0x6b, 0x12, 0x0e,
	0x0a, 0x02, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x6e, 0x6b, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x1f, 0x73, 0x68,
	0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x5f, 0x54, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x1c, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x54, 0x52, 0x43,
	0x32, 0x30, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x2c, 0x0a, 0x0f, 0x4e, 0x75, 0x6c, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x22,
	0xa9, 0x02, 0x0a, 0x26, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x54, 0x52, 0x43, 0x32,
	0x30, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x5d, 0x0a, 0x19, 0x73, 0x68,
	0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x5f, 0x54, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65,
	0x64, 0x54, 0x52, 0x43, 0x32, 0x30, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x17, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x54, 0x52, 0x43, 0x32, 0x30, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x52, 0x0a, 0x19, 0x73, 0x70, 0x65,
	0x6e, 0x64, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x17, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0xdb, 0x70, 0x0a, 0x06,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x12, 0x67, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2d, 0x22, 0x12, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x01, 0x2a, 0x5a, 0x14, 0x12, 0x12, 0x2f, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x73, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x49,
	0x64, 0x12, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x22,
	0x16, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x62, 0x79, 0x69, 0x64, 0x3a, 0x01, 0x2a, 0x5a, 0x18, 0x12, 0x16, 0x2f, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x62, 0x79, 0x69, 0x64, 0x12, 0x99, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x22, 0x19, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67,
	0x65, 0x74, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x3a, 0x01, 0x2a, 0x5a, 0x1b, 0x12, 0x19, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67,
	0x65, 0x74, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0xa9, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x54, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x22, 0x47, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x22, 0x1c, 0x2f, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x74, 0x72, 0x61, 0x63, 0x65, 0x3a, 0x01, 0x2a, 0x5a, 0x1e, 0x12, 0x1c,
	0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x74, 0x72, 0x61, 0x63, 0x65, 0x12, 0x89, 0x01, 0x0a,
	0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x15,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x41, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x22, 0x19, 0x2f,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x5a, 0x1b, 0x12, 0x19, 0x2f,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x12, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x88, 0x01, 0x0a,
	0x14, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x10, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x22, 0x47,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x22, 0x1c, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f,
	0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x5a, 0x1e, 0x12, 0x1c, 0x2f, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x2f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x82, 0x01, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x22, 0x15, 0x2f, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x3a, 0x01, 0x2a, 0x5a, 0x17, 0x12, 0x15, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x7e, 0x0a, 0x0c,
	0x53, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x15, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x22, 0x14, 0x2f, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x73, 0x65, 0x74, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69,
	0x64, 0x3a, 0x01, 0x2a, 0x5a, 0x16, 0x12, 0x14, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f,
	0x73, 0x65, 0x74, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x53, 0x0a, 0x0e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x12, 0x1f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a,
	0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x00, 0x12, 0x8f, 0x01, 0x0a, 0x12, 0x56, 0x6f, 0x74, 0x65, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73,
	0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x43,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x22, 0x1a, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f,
	0x76, 0x6f, 0x74, 0x65, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x3a, 0x01, 0x2a, 0x5a, 0x1c, 0x12, 0x1a, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x2f, 0x76, 0x6f, 0x74, 0x65, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x23, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x45, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x13, 0x56, 0x6f, 0x74, 0x65, 0x57, 0x69, 0x74, 0x6e, 0x65,
	0x73, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73,
	0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x88, 0x01, 0x0a, 0x10,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x15,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x22, 0x18, 0x2f,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x69, 0x73, 0x73, 0x75, 0x65, 0x3a, 0x01, 0x2a, 0x5a, 0x1a, 0x12, 0x18, 0x2f, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x69, 0x73, 0x73, 0x75, 0x65, 0x12, 0x53, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x32, 0x12, 0x1c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x82, 0x01, 0x0a, 0x0d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x15,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x22, 0x15, 0x2f,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x77, 0x69, 0x74,
	0x6e, 0x65, 0x73, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x17, 0x12, 0x15, 0x2f, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73,
	0x12, 0x53, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73,
	0x73, 0x32, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x57, 0x69,
	0x74, 0x6e, 0x65, 0x73, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x82, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x22, 0x15, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x01,
	0x2a, 0x5a, 0x17, 0x12, 0x15, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x53, 0x0a, 0x0e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x32, 0x12, 0x1f, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x1e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12,
	0x82, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73,
	0x73, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x57, 0x69, 0x74,
	0x6e, 0x65, 0x73, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x33, 0x22, 0x15, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x17, 0x12, 0x15, 0x2f,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x77, 0x69, 0x74,
	0x6e, 0x65, 0x73, 0x73, 0x12, 0x53, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x69,
	0x74, 0x6e, 0x65, 0x73, 0x73, 0x32, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x82, 0x01, 0x0a, 0x0d, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x1f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x15, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x22, 0x15, 0x2f, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x3a, 0x01, 0x2a, 0x5a, 0x17, 0x12, 0x15, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x53,
	0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x32,
	0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x00, 0x12, 0xa2, 0x01, 0x0a, 0x15, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x27, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x49, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x43, 0x22, 0x1d, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x65, 0x61, 0x73, 0x73, 0x65, 0x74, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x3a, 0x01, 0x2a, 0x5a, 0x1f, 0x12, 0x1d, 0x2f, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x65, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x69, 0x73, 0x73, 0x75, 0x65, 0x12, 0x63, 0x0a, 0x16, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x32, 0x12, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x82, 0x01,
	0x0a, 0x0d, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12,
	0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x46, 0x72, 0x65, 0x65, 0x7a,
	0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x22,
	0x15, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x3a, 0x01, 0x2a, 0x5a, 0x17, 0x12, 0x15, 0x2f, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x12, 0x53, 0x0a, 0x0e, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x32, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x8a, 0x01, 0x0a, 0x0f, 0x55, 0x6e, 0x66, 0x72,
	0x65, 0x65, 0x7a, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x55, 0x6e, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x15,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x22, 0x17, 0x2f,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x75, 0x6e, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x3a, 0x01, 0x2a, 0x5a, 0x19, 0x12, 0x17, 0x2f, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x75, 0x6e, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x10, 0x55, 0x6e, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x32, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x55, 0x6e, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x82, 0x01,
	0x0a, 0x0d, 0x55, 0x6e, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12,
	0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x55, 0x6e, 0x66, 0x72, 0x65,
	0x65, 0x7a, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x22,
	0x15, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x75, 0x6e, 0x66, 0x72, 0x65, 0x65, 0x7a,
	0x65, 0x61, 0x73, 0x73, 0x65, 0x74, 0x3a, 0x01, 0x2a, 0x5a, 0x17, 0x12, 0x15, 0x2f, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x75, 0x6e, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x12, 0x53, 0x0a, 0x0e, 0x55, 0x6e, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x32, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x55, 0x6e, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x8a, 0x01, 0x0a, 0x0f, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x21, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x15,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x22, 0x17, 0x2f,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x3a, 0x01, 0x2a, 0x5a, 0x19, 0x12, 0x17, 0x2f, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x10, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x32, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x7a, 0x0a,
	0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x22, 0x13, 0x2f, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x61, 0x73, 0x73, 0x65, 0x74, 0x3a,
	0x01, 0x2a, 0x5a, 0x15, 0x12, 0x13, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x4f, 0x0a, 0x0c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x32, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0e, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x20, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x1e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00,
	0x12, 0x56, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x1e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x4c,
	0x0a, 0x0a, 0x42, 0x75, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x75, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0f,
	0x42, 0x75, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x75, 0x79, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x0b, 0x53, 0x65, 0x6c, 0x6c, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53,
	0x65, 0x6c, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0e, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x20, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x6e, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x1e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00,
	0x12, 0x58, 0x0a, 0x10, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x12, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x13, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0f, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x21, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x53,
	0x65, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x00, 0x12, 0x5a, 0x0a, 0x11, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x1e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x45,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x79, 0x49, 0x64, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x15, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x79, 0x50, 0x61, 0x69, 0x72, 0x12, 0x19, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x50, 0x61, 0x69,
	0x72, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x1a, 0x19, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x61, 0x69, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x12, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x22, 0x11, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x13,
	0x12, 0x11, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0x92, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x11,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x4b, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x45, 0x22, 0x1e, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x69, 0x73, 0x73, 0x75, 0x65, 0x62, 0x79, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x3a, 0x01, 0x2a, 0x5a, 0x20, 0x12, 0x1e, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x2f, 0x67, 0x65, 0x74, 0x61, 0x73, 0x73, 0x65, 0x74, 0x69, 0x73, 0x73, 0x75, 0x65, 0x62,
	0x79, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x7a, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x65, 0x74, 0x12, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x1b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e,
	0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x33, 0x22, 0x15, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x6e, 0x65, 0x74, 0x3a, 0x01, 0x2a, 0x5a, 0x17, 0x12, 0x15, 0x2f,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x6e, 0x65, 0x74, 0x12, 0x4b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x11, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x20, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x00, 0x12, 0x92, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x1a, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x22,
	0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x22, 0x1b, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x2f, 0x67, 0x65, 0x74, 0x61, 0x73, 0x73, 0x65, 0x74, 0x69, 0x73, 0x73, 0x75, 0x65, 0x62, 0x79,
	0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x01, 0x2a, 0x5a, 0x1d, 0x12, 0x1b, 0x2f, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x61, 0x73, 0x73, 0x65, 0x74, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x62, 0x79, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x42, 0x79, 0x49, 0x64, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x1a, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x22, 0x00, 0x12, 0x6d, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x77, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2f, 0x22, 0x13, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x6e,
	0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x3a, 0x01, 0x2a, 0x5a, 0x15, 0x12, 0x13, 0x2f, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x42, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x32, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x74, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x42, 0x79, 0x4e, 0x75, 0x6d, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a,
	0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x22, 0x15, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x2f, 0x67, 0x65, 0x74, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x62, 0x79, 0x6e, 0x75, 0x6d, 0x3a,
	0x01, 0x2a, 0x5a, 0x17, 0x12, 0x15, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65,
	0x74, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x62, 0x79, 0x6e, 0x75, 0x6d, 0x12, 0x45, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x4e, 0x75, 0x6d, 0x32, 0x12, 0x17, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x00, 0x12, 0x53, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x4e, 0x75, 0x6d, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x17, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x70, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x42, 0x79, 0x49, 0x64, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a,
	0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x22, 0x14, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x2f, 0x67, 0x65, 0x74, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x62, 0x79, 0x69, 0x64, 0x3a, 0x01,
	0x2a, 0x5a, 0x16, 0x12, 0x14, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x62, 0x79, 0x69, 0x64, 0x12, 0x87, 0x01, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4e, 0x65, 0x78,
	0x74, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x45, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x3f, 0x22, 0x1b, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65,
	0x74, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x62, 0x79, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x6e, 0x65, 0x78,
	0x74, 0x3a, 0x01, 0x2a, 0x5a, 0x1d, 0x12, 0x1b, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f,
	0x67, 0x65, 0x74, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x62, 0x79, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x6e,
	0x65, 0x78, 0x74, 0x12, 0x4c, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42,
	0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x32, 0x12, 0x14, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x00, 0x12, 0x8a, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79,
	0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x22,
	0x1b, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x62, 0x79, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x6e, 0x75, 0x6d, 0x3a, 0x01, 0x2a, 0x5a,
	0x1d, 0x12, 0x1b, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x62, 0x79, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x6e, 0x75, 0x6d, 0x12, 0x4f,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x4c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x4e, 0x75, 0x6d, 0x32, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a,
	0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12,
	0x88, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x15,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x22, 0x1a, 0x2f,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x79, 0x69, 0x64, 0x3a, 0x01, 0x2a, 0x5a, 0x1c, 0x12, 0x1a,
	0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x79, 0x69, 0x64, 0x12, 0x51, 0x0a, 0x0e, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6d,
	0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x40, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x16, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x22, 0x00, 0x12,
	0x4f, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x22, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x22, 0x00,
	0x12, 0x53, 0x0a, 0x0f, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x17, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x00, 0x12, 0x50, 0x0a, 0x10, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x41, 0x42, 0x49, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x41, 0x42, 0x49, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x69, 0x74, 0x6e,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x15, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x22, 0x15, 0x2f, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x17, 0x12, 0x15, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12,
	0x5d, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x65,
	0x0a, 0x20, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x27, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x16,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x22, 0x15,
	0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x17, 0x12, 0x15, 0x2f, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x73, 0x12, 0x9f, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x4f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x49, 0x22, 0x20, 0x2f, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x6c, 0x69, 0x73, 0x74, 0x3a, 0x01, 0x2a, 0x5a,
	0x22, 0x12, 0x20, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x70, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x7c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x12,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x22, 0x17, 0x2f, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x62,
	0x79, 0x69, 0x64, 0x3a, 0x01, 0x2a, 0x5a, 0x19, 0x12, 0x17, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x2f, 0x67, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x62, 0x79, 0x69,
	0x64, 0x12, 0x7a, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x22, 0x15, 0x2f, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x17, 0x12, 0x15, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f,
	0x6c, 0x69, 0x73, 0x74, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x9f, 0x01,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x4f,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x49, 0x22, 0x20, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f,
	0x67, 0x65, 0x74, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x65, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x3a, 0x01, 0x2a, 0x5a, 0x22, 0x12, 0x20, 0x2f,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x7c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x79,
	0x49, 0x64, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x3d,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x22, 0x17, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f,
	0x67, 0x65, 0x74, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x62, 0x79, 0x69, 0x64, 0x3a,
	0x01, 0x2a, 0x5a, 0x19, 0x12, 0x17, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65,
	0x74, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x62, 0x79, 0x69, 0x64, 0x12, 0x8c, 0x01,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x19, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x22,
	0x1a, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x1c,
	0x12, 0x1a, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x63, 0x68, 0x61,
	0x69, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x88, 0x01, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x41, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x22, 0x19, 0x2f, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x61, 0x73, 0x73, 0x65, 0x74, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x3a, 0x01, 0x2a, 0x5a, 0x1b, 0x12, 0x19, 0x2f, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x61, 0x73, 0x73, 0x65, 0x74, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0xa7, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x53, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x4d, 0x22, 0x22, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65,
	0x74, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x3a, 0x01, 0x2a, 0x5a, 0x24, 0x12, 0x22, 0x2f,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x69, 0x73, 0x73, 0x75, 0x65, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x84, 0x01, 0x0a, 0x10, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x17,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x39, 0x22,
	0x18, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x5a, 0x1a, 0x12, 0x18,
	0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x96, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x4e, 0x65, 0x78, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x17, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x4b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x45, 0x22, 0x1e, 0x2f, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x6e, 0x65, 0x78, 0x74, 0x6d, 0x61, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x3a, 0x01, 0x2a, 0x5a,
	0x20, 0x12, 0x1e, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x6e, 0x65,
	0x78, 0x74, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x12, 0x8b, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x69, 0x67, 0x6e, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x3d, 0x22, 0x1a, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x3a, 0x01,
	0x2a, 0x5a, 0x1c, 0x12, 0x1a, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x12,
	0x52, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x69, 0x67, 0x6e, 0x32, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67,
	0x6e, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x00, 0x12, 0x7a, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x16, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x22, 0x15, 0x2f, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x17, 0x12, 0x15, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x59, 0x0a, 0x11, 0x45, 0x61, 0x73, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x12, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x45, 0x61, 0x73, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x61, 0x73, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x1a, 0x45, 0x61,
	0x73, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x42,
	0x79, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x61, 0x73, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x42, 0x79, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x45, 0x61, 0x73, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x86, 0x01, 0x0a, 0x0c, 0x45, 0x61, 0x73, 0x79,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x61, 0x73, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x45, 0x61, 0x73, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x22,
	0x14, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x65, 0x61, 0x73, 0x79, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x3a, 0x01, 0x2a, 0x5a, 0x16, 0x12, 0x14, 0x2f, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x2f, 0x65, 0x61, 0x73, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x12, 0xaa, 0x01, 0x0a, 0x15, 0x45, 0x61, 0x73, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x42, 0x79, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x26, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x61, 0x73, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x42, 0x79, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x61,
	0x73, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x49, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x43, 0x22, 0x1d, 0x2f, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x2f, 0x65, 0x61, 0x73, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x62, 0x79, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x5a, 0x1f, 0x12, 0x1d,
	0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x65, 0x61, 0x73, 0x79, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x62, 0x79, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x8b, 0x01,
	0x0a, 0x0f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x72, 0x4b, 0x65,
	0x79, 0x50, 0x61, 0x69, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x37, 0x22, 0x17, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x3a, 0x01, 0x2a,
	0x5a, 0x19, 0x12, 0x17, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x98, 0x01, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x42, 0x79, 0x49, 0x64, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x19,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4b, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x45, 0x22, 0x1e, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x79, 0x69,
	0x64, 0x3a, 0x01, 0x2a, 0x5a, 0x20, 0x12, 0x1e, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f,
	0x67, 0x65, 0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e,
	0x66, 0x6f, 0x62, 0x79, 0x69, 0x64, 0x12, 0xb3, 0x01, 0x0a, 0x17, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x1e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4d, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x47, 0x22, 0x1f, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a, 0x5a, 0x21, 0x12, 0x1f, 0x2f, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x07,
	0x41, 0x64, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69,
	0x67, 0x6e, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69,
	0x67, 0x6e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x1a, 0x47, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x12, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x00, 0x12, 0x42, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12,
	0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68,
	0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x1e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00,
	0x12, 0x5f, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x54, 0x72, 0x65,
	0x65, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4d, 0x65,
	0x72, 0x6b, 0x6c, 0x65, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x00, 0x12, 0x49, 0x0a, 0x0d, 0x53, 0x63, 0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x65, 0x42, 0x79, 0x49,
	0x76, 0x6b, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x49, 0x76,
	0x6b, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x14,
	0x53, 0x63, 0x61, 0x6e, 0x41, 0x6e, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x4e, 0x6f, 0x74, 0x65, 0x42,
	0x79, 0x49, 0x76, 0x6b, 0x12, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x49, 0x76, 0x6b, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x41, 0x6e, 0x64, 0x4d, 0x61, 0x72,
	0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x1c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4e, 0x6f,
	0x74, 0x65, 0x73, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0d, 0x53,
	0x63, 0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x65, 0x42, 0x79, 0x4f, 0x76, 0x6b, 0x12, 0x1e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4f, 0x76, 0x6b, 0x44, 0x65, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x16, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4e,
	0x6f, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x70, 0x65,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x24, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64,
	0x53, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x6b, 0x46, 0x72, 0x6f,
	0x6d, 0x41, 0x73, 0x6b, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x16, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4e, 0x6b, 0x46,
	0x72, 0x6f, 0x6d, 0x4e, 0x73, 0x6b, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x16,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x49,
	0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x56, 0x69, 0x65, 0x77, 0x69, 0x6e, 0x67, 0x4b, 0x65,
	0x79, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x56, 0x69, 0x65,
	0x77, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x23,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69,
	0x6e, 0x67, 0x56, 0x69, 0x65, 0x77, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a,
	0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12,
	0x50, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65,
	0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x68, 0x69, 0x65,
	0x6c, 0x64, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x00, 0x12, 0x69, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x5a, 0x65, 0x6e, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x56, 0x69, 0x65,
	0x77, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x44, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x06,
	0x47, 0x65, 0x74, 0x52, 0x63, 0x6d, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x16,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x07, 0x49, 0x73, 0x53, 0x70,
	0x65, 0x6e, 0x64, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e,
	0x6f, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x15, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x77, 0x0a, 0x2c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x41,
	0x75, 0x74, 0x68, 0x53, 0x69, 0x67, 0x12, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x41, 0x73, 0x6b, 0x1a, 0x1e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12,
	0x4b, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61, 0x73, 0x68, 0x12, 0x15, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x12,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x41, 0x75, 0x74, 0x68, 0x53,
	0x69, 0x67, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x70,
	0x65, 0x6e, 0x64, 0x41, 0x75, 0x74, 0x68, 0x53, 0x69, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x49,
	0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x75,
	0x6c, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x4e, 0x66, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a,
	0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x20, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x28, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x54, 0x52, 0x43, 0x32, 0x30, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x54, 0x52, 0x43, 0x32, 0x30,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x00, 0x12, 0x85, 0x01, 0x0a,
	0x2a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x41, 0x73, 0x6b, 0x12, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x68,
	0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x54, 0x52, 0x43, 0x32, 0x30, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x41, 0x73, 0x6b, 0x1a,
	0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x68, 0x69, 0x65, 0x6c,
	0x64, 0x65, 0x64, 0x54, 0x52, 0x43, 0x32, 0x30, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x1b, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x68, 0x69, 0x65,
	0x6c, 0x64, 0x65, 0x64, 0x54, 0x52, 0x43, 0x32, 0x30, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x42, 0x79,
	0x49, 0x76, 0x6b, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x49,
	0x76, 0x6b, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x54, 0x52, 0x43, 0x32, 0x30, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73,
	0x54, 0x52, 0x43, 0x32, 0x30, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x1b, 0x53, 0x63, 0x61, 0x6e, 0x53,
	0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x54, 0x52, 0x43, 0x32, 0x30, 0x4e, 0x6f, 0x74, 0x65,
	0x73, 0x42, 0x79, 0x4f, 0x76, 0x6b, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x4f, 0x76, 0x6b, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x54, 0x52, 0x43, 0x32,
	0x30, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x1b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4e, 0x6f,
	0x74, 0x65, 0x73, 0x54, 0x52, 0x43, 0x32, 0x30, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x20, 0x49, 0x73,
	0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x54, 0x52, 0x43, 0x32, 0x30, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x12, 0x1b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x66, 0x54, 0x52, 0x43, 0x32,
	0x30, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x19, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x6f, 0x72, 0x53, 0x68,
	0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x54, 0x52, 0x43, 0x32, 0x30, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x12, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53,
	0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x54, 0x52, 0x43, 0x32, 0x30, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12,
	0x52, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x4e, 0x75, 0x6d, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x3f, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x42, 0x75, 0x72, 0x6e, 0x54, 0x72, 0x78, 0x12, 0x16, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x4c,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x1d,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x17,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x32, 0xb3, 0x1d, 0x0a, 0x0e, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x53, 0x6f, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12, 0x77, 0x0a, 0x0a,
	0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x11, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x11, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x22, 0x1a, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x2f, 0x67, 0x65, 0x74, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x01, 0x2a, 0x5a, 0x1c, 0x12, 0x1a, 0x2f, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x2f, 0x67, 0x65, 0x74, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x83, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x4b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x45, 0x22, 0x1e, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73,
	0x6f, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x2f, 0x67, 0x65, 0x74, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x62, 0x79, 0x69, 0x64, 0x3a, 0x01, 0x2a, 0x5a, 0x20, 0x12, 0x1e, 0x2f, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x2f, 0x67, 0x65, 0x74,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x62, 0x79, 0x69, 0x64, 0x12, 0x89, 0x01, 0x0a, 0x0d,
	0x4c, 0x69, 0x73, 0x74, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x16, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x49, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x43, 0x22, 0x1d, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x6f, 0x6c,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x1f, 0x12, 0x1d, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x77, 0x69,
	0x74, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x98, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x51, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4b, 0x22, 0x21, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x73, 0x6f, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x2f, 0x67, 0x65, 0x74, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x69, 0x73, 0x73, 0x75, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x3a, 0x01, 0x2a, 0x5a, 0x23, 0x12,
	0x21, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x2f, 0x67, 0x65, 0x74, 0x61, 0x73, 0x73, 0x65, 0x74, 0x69, 0x73, 0x73, 0x75, 0x65, 0x6c, 0x69,
	0x73, 0x74, 0x12, 0xb7, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x18, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x63, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5d, 0x22,
	0x2a, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x2f, 0x67, 0x65, 0x74, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x69, 0x73, 0x73, 0x75, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x3a, 0x01, 0x2a, 0x5a, 0x2c,
	0x12, 0x2a, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x69, 0x74,
	0x79, 0x2f, 0x67, 0x65, 0x74, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x69, 0x73, 0x73, 0x75, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x42, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x17, 0x47,
	0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x18,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x42, 0x79, 0x49, 0x64, 0x12,
	0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x22, 0x00, 0x12, 0x7d, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4e, 0x6f,
	0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22,
	0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x22, 0x1b, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x73, 0x6f, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x2f, 0x67, 0x65, 0x74, 0x6e, 0x6f, 0x77, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x3a, 0x01, 0x2a, 0x5a, 0x1d, 0x12, 0x1b, 0x2f, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x2f, 0x67, 0x65, 0x74, 0x6e, 0x6f,
	0x77, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x42, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x77,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x32, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x18,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x84, 0x01, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x4e, 0x75, 0x6d, 0x12, 0x17, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x49, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x43, 0x22, 0x1d,
	0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x2f,
	0x67, 0x65, 0x74, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x62, 0x79, 0x6e, 0x75, 0x6d, 0x3a, 0x01, 0x2a,
	0x5a, 0x1f, 0x12, 0x1d, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x6f, 0x6c, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x2f, 0x67, 0x65, 0x74, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x62, 0x79, 0x6e, 0x75,
	0x6d, 0x12, 0x45, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x4e,
	0x75, 0x6d, 0x32, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x18, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x20,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x42, 0x79, 0x49, 0x64, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x12,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x16, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x98, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x16,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x53, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x4d, 0x22, 0x22, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x6f,
	0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x2f, 0x67, 0x65, 0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x79, 0x69, 0x64, 0x3a, 0x01, 0x2a, 0x5a, 0x24, 0x12, 0x22,
	0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x2f,
	0x67, 0x65, 0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x79,
	0x69, 0x64, 0x12, 0xa8, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49, 0x64, 0x12, 0x16, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x5b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x55, 0x22, 0x26, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x2f, 0x67, 0x65, 0x74, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x79, 0x69, 0x64,
	0x3a, 0x01, 0x2a, 0x5a, 0x28, 0x12, 0x26, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x6f,
	0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x2f, 0x67, 0x65, 0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x79, 0x69, 0x64, 0x12, 0x9b, 0x01,
	0x0a, 0x0f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x72, 0x4b, 0x65,
	0x79, 0x50, 0x61, 0x69, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x47, 0x22, 0x1f, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x6f, 0x6c,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x21, 0x12, 0x1f, 0x2f, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x2f, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x5f, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x56, 0x6f, 0x75, 0x63,
	0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x1a, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x49, 0x6e,
	0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x56,
	0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0d,
	0x53, 0x63, 0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x65, 0x42, 0x79, 0x49, 0x76, 0x6b, 0x12, 0x1e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x49, 0x76, 0x6b, 0x44, 0x65, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x16, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x4e, 0x6f, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x14, 0x53, 0x63, 0x61, 0x6e, 0x41,
	0x6e, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x4e, 0x6f, 0x74, 0x65, 0x42, 0x79, 0x49, 0x76, 0x6b, 0x12,
	0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x49, 0x76, 0x6b, 0x44, 0x65,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x41, 0x6e, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x64, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0d, 0x53, 0x63, 0x61, 0x6e, 0x4e, 0x6f,
	0x74, 0x65, 0x42, 0x79, 0x4f, 0x76, 0x6b, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x4f, 0x76, 0x6b, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x3c, 0x0a, 0x07, 0x49, 0x73, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x18, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x61, 0x0a, 0x1b, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x54,
	0x52, 0x43, 0x32, 0x30, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x42, 0x79, 0x49, 0x76, 0x6b, 0x12, 0x23,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x49, 0x76, 0x6b, 0x44, 0x65, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x54, 0x52, 0x43, 0x32, 0x30, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44,
	0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x54, 0x52, 0x43, 0x32, 0x30,
	0x22, 0x00, 0x12, 0x61, 0x0a, 0x1b, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64,
	0x65, 0x64, 0x54, 0x52, 0x43, 0x32, 0x30, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x42, 0x79, 0x4f, 0x76,
	0x6b, 0x12, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4f, 0x76, 0x6b,
	0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x54, 0x52, 0x43, 0x32, 0x30, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x54, 0x52,
	0x43, 0x32, 0x30, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x20, 0x49, 0x73, 0x53, 0x68, 0x69, 0x65, 0x6c,
	0x64, 0x65, 0x64, 0x54, 0x52, 0x43, 0x32, 0x30, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x4e, 0x6f, 0x74, 0x65, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x66, 0x54, 0x52, 0x43, 0x32, 0x30, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x17, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x5b,
	0x0a, 0x17, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x6d, 0x61, 0x72,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x1c, 0x47,
	0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x42, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x17, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x12, 0x16, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a,
	0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x79,
	0x50, 0x61, 0x69, 0x72, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x1a,
	0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x42, 0x79, 0x50, 0x61, 0x69, 0x72, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50,
	0x61, 0x69, 0x72, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00,
	0x12, 0x4c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x61, 0x69,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x3f,
	0x0a, 0x0a, 0x47, 0x65, 0x74, 0x42, 0x75, 0x72, 0x6e, 0x54, 0x72, 0x78, 0x12, 0x16, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x32,
	0xad, 0x04, 0x0a, 0x0f, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0xb1, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x68, 0x69, 0x73, 0x12,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x1a, 0x19, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x5f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x59, 0x22, 0x28,
	0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x2f, 0x67, 0x65, 0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x66, 0x72, 0x6f, 0x6d, 0x74, 0x68, 0x69, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x2a, 0x12, 0x28, 0x2f,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2f,
	0x67, 0x65, 0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x66,
	0x72, 0x6f, 0x6d, 0x74, 0x68, 0x69, 0x73, 0x12, 0x5c, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x68,
	0x69, 0x73, 0x32, 0x12, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x1a,
	0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0xab, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x6f, 0x54, 0x68, 0x69, 0x73, 0x12,
	0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x1a, 0x19, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x5b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x55, 0x22, 0x26,
	0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x2f, 0x67, 0x65, 0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x74, 0x6f, 0x74, 0x68, 0x69, 0x73, 0x3a, 0x01, 0x2a, 0x5a, 0x28, 0x12, 0x26, 0x2f, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x65,
	0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x6f, 0x74,
	0x68, 0x69, 0x73, 0x12, 0x5a, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x6f, 0x54, 0x68, 0x69, 0x73, 0x32, 0x12, 0x1a, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x1a, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x32,
	0x99, 0x02, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x11,
	0x67, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x16, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x77, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x3b,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x4e, 0x75, 0x6d, 0x12,
	0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x00, 0x32, 0x83, 0x01, 0x0a, 0x07,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x12, 0x78, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a,
	0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x22, 0x15,
	0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2f, 0x67, 0x65, 0x74, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x69, 0x6e, 0x66, 0x6f, 0x3a, 0x01, 0x2a, 0x5a, 0x17, 0x12, 0x15, 0x2f, 0x6d, 0x6f, 0x6e,
	0x69, 0x74, 0x6f, 0x72, 0x2f, 0x67, 0x65, 0x74, 0x73, 0x74, 0x61, 0x74, 0x73, 0x69, 0x6e, 0x66,
	0x6f, 0x32, 0x09, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x41, 0x0a, 0x0c,
	0x6f, 0x72, 0x67, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x42, 0x07, 0x47, 0x72,
	0x70, 0x63, 0x41, 0x50, 0x49, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x67,
	0x72, 0x70, 0x63, 0x2d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x61, 0x70, 0x69, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_api_proto_rawDescOnce sync.Once
	file_api_api_proto_rawDescData = file_api_api_proto_rawDesc
)

func file_api_api_proto_rawDescGZIP() []byte {
	file_api_api_proto_rawDescOnce.Do(func() {
		file_api_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_api_proto_rawDescData)
	})
	return file_api_api_proto_rawDescData
}

var file_api_api_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_api_api_proto_msgTypes = make([]protoimpl.MessageInfo, 79)
var file_api_api_proto_goTypes = []interface{}{
	(ReturnResponseCode)(0),                         // 0: protocol.Return.response_code
	(TransactionSignWeight_ResultResponseCode)(0),   // 1: protocol.TransactionSignWeight.Result.response_code
	(TransactionApprovedList_ResultResponseCode)(0), // 2: protocol.TransactionApprovedList.Result.response_code
	(*Return)(nil),                                   // 3: protocol.Return
	(*BlockReference)(nil),                           // 4: protocol.BlockReference
	(*WitnessList)(nil),                              // 5: protocol.WitnessList
	(*ProposalList)(nil),                             // 6: protocol.ProposalList
	(*ExchangeList)(nil),                             // 7: protocol.ExchangeList
	(*AssetIssueList)(nil),                           // 8: protocol.AssetIssueList
	(*BlockList)(nil),                                // 9: protocol.BlockList
	(*TransactionList)(nil),                          // 10: protocol.TransactionList
	(*TransactionIdList)(nil),                        // 11: protocol.TransactionIdList
	(*DelegatedResourceMessage)(nil),                 // 12: protocol.DelegatedResourceMessage
	(*DelegatedResourceList)(nil),                    // 13: protocol.DelegatedResourceList
	(*NodeList)(nil),                                 // 14: protocol.NodeList
	(*Node)(nil),                                     // 15: protocol.Node
	(*Address)(nil),                                  // 16: protocol.Address
	(*EmptyMessage)(nil),                             // 17: protocol.EmptyMessage
	(*NumberMessage)(nil),                            // 18: protocol.NumberMessage
	(*BytesMessage)(nil),                             // 19: protocol.BytesMessage
	(*TimeMessage)(nil),                              // 20: protocol.TimeMessage
	(*BlockLimit)(nil),                               // 21: protocol.BlockLimit
	(*TransactionLimit)(nil),                         // 22: protocol.TransactionLimit
	(*AccountPaginated)(nil),                         // 23: protocol.AccountPaginated
	(*TimePaginatedMessage)(nil),                     // 24: protocol.TimePaginatedMessage
	(*AccountNetMessage)(nil),                        // 25: protocol.AccountNetMessage
	(*AccountResourceMessage)(nil),                   // 26: protocol.AccountResourceMessage
	(*PaginatedMessage)(nil),                         // 27: protocol.PaginatedMessage
	(*EasyTransferMessage)(nil),                      // 28: protocol.EasyTransferMessage
	(*EasyTransferAssetMessage)(nil),                 // 29: protocol.EasyTransferAssetMessage
	(*EasyTransferByPrivateMessage)(nil),             // 30: protocol.EasyTransferByPrivateMessage
	(*EasyTransferAssetByPrivateMessage)(nil),        // 31: protocol.EasyTransferAssetByPrivateMessage
	(*EasyTransferResponse)(nil),                     // 32: protocol.EasyTransferResponse
	(*AddressPrKeyPairMessage)(nil),                  // 33: protocol.AddressPrKeyPairMessage
	(*TransactionExtention)(nil),                     // 34: protocol.TransactionExtention
	(*BlockExtention)(nil),                           // 35: protocol.BlockExtention
	(*BlockListExtention)(nil),                       // 36: protocol.BlockListExtention
	(*TransactionListExtention)(nil),                 // 37: protocol.TransactionListExtention
	(*BlockIncrementalMerkleTree)(nil),               // 38: protocol.BlockIncrementalMerkleTree
	(*TransactionSignWeight)(nil),                    // 39: protocol.TransactionSignWeight
	(*TransactionApprovedList)(nil),                  // 40: protocol.TransactionApprovedList
	(*IvkDecryptParameters)(nil),                     // 41: protocol.IvkDecryptParameters
	(*IvkDecryptAndMarkParameters)(nil),              // 42: protocol.IvkDecryptAndMarkParameters
	(*OvkDecryptParameters)(nil),                     // 43: protocol.OvkDecryptParameters
	(*DecryptNotes)(nil),                             // 44: protocol.DecryptNotes
	(*DecryptNotesMarked)(nil),                       // 45: protocol.DecryptNotesMarked
	(*Note)(nil),                                     // 46: protocol.Note
	(*SpendNote)(nil),                                // 47: protocol.SpendNote
	(*ReceiveNote)(nil),                              // 48: protocol.ReceiveNote
	(*PrivateParameters)(nil),                        // 49: protocol.PrivateParameters
	(*PrivateParametersWithoutAsk)(nil),              // 50: protocol.PrivateParametersWithoutAsk
	(*SpendAuthSigParameters)(nil),                   // 51: protocol.SpendAuthSigParameters
	(*NfParameters)(nil),                             // 52: protocol.NfParameters
	(*ExpandedSpendingKeyMessage)(nil),               // 53: protocol.ExpandedSpendingKeyMessage
	(*ViewingKeyMessage)(nil),                        // 54: protocol.ViewingKeyMessage
	(*IncomingViewingKeyMessage)(nil),                // 55: protocol.IncomingViewingKeyMessage
	(*DiversifierMessage)(nil),                       // 56: protocol.DiversifierMessage
	(*IncomingViewingKeyDiversifierMessage)(nil),     // 57: protocol.IncomingViewingKeyDiversifierMessage
	(*PaymentAddressMessage)(nil),                    // 58: protocol.PaymentAddressMessage
	(*ShieldedAddressInfo)(nil),                      // 59: protocol.ShieldedAddressInfo
	(*NoteParameters)(nil),                           // 60: protocol.NoteParameters
	(*SpendResult)(nil),                              // 61: protocol.SpendResult
	(*TransactionInfoList)(nil),                      // 62: protocol.TransactionInfoList
	(*SpendNoteTRC20)(nil),                           // 63: protocol.SpendNoteTRC20
	(*PrivateShieldedTRC20Parameters)(nil),           // 64: protocol.PrivateShieldedTRC20Parameters
	(*PrivateShieldedTRC20ParametersWithoutAsk)(nil), // 65: protocol.PrivateShieldedTRC20ParametersWithoutAsk
	(*ShieldedTRC20Parameters)(nil),                  // 66: protocol.ShieldedTRC20Parameters
	(*IvkDecryptTRC20Parameters)(nil),                // 67: protocol.IvkDecryptTRC20Parameters
	(*OvkDecryptTRC20Parameters)(nil),                // 68: protocol.OvkDecryptTRC20Parameters
	(*DecryptNotesTRC20)(nil),                        // 69: protocol.DecryptNotesTRC20
	(*NfTRC20Parameters)(nil),                        // 70: protocol.NfTRC20Parameters
	(*NullifierResult)(nil),                          // 71: protocol.NullifierResult
	(*ShieldedTRC20TriggerContractParameters)(nil),   // 72: protocol.ShieldedTRC20TriggerContractParameters
	nil,                                            // 73: protocol.AccountNetMessage.AssetNetUsedEntry
	nil,                                            // 74: protocol.AccountNetMessage.AssetNetLimitEntry
	nil,                                            // 75: protocol.AccountResourceMessage.AssetNetUsedEntry
	nil,                                            // 76: protocol.AccountResourceMessage.AssetNetLimitEntry
	(*TransactionSignWeight_Result)(nil),           // 77: protocol.TransactionSignWeight.Result
	(*TransactionApprovedList_Result)(nil),         // 78: protocol.TransactionApprovedList.Result
	(*DecryptNotes_NoteTx)(nil),                    // 79: protocol.DecryptNotes.NoteTx
	(*DecryptNotesMarked_NoteTx)(nil),              // 80: protocol.DecryptNotesMarked.NoteTx
	(*DecryptNotesTRC20_NoteTx)(nil),               // 81: protocol.DecryptNotesTRC20.NoteTx
	(*core.Witness)(nil),                           // 82: protocol.Witness
	(*core.Proposal)(nil),                          // 83: protocol.Proposal
	(*core.Exchange)(nil),                          // 84: protocol.Exchange
	(*core.AssetIssueContract)(nil),                // 85: protocol.AssetIssueContract
	(*core.Block)(nil),                             // 86: protocol.Block
	(*core.Transaction)(nil),                       // 87: protocol.Transaction
	(*core.DelegatedResource)(nil),                 // 88: protocol.DelegatedResource
	(*core.Account)(nil),                           // 89: protocol.Account
	(*core.BlockHeader)(nil),                       // 90: protocol.BlockHeader
	(*core.IncrementalMerkleTree)(nil),             // 91: protocol.IncrementalMerkleTree
	(*core.Permission)(nil),                        // 92: protocol.Permission
	(*core.IncrementalMerkleVoucher)(nil),          // 93: protocol.IncrementalMerkleVoucher
	(*core.TransactionInfo)(nil),                   // 94: protocol.TransactionInfo
	(*core.SpendDescription)(nil),                  // 95: protocol.SpendDescription
	(*core.ReceiveDescription)(nil),                // 96: protocol.ReceiveDescription
	(*core.AccountBalanceRequest)(nil),             // 97: protocol.AccountBalanceRequest
	(*core.BlockBalanceTrace_BlockIdentifier)(nil), // 98: protocol.BlockBalanceTrace.BlockIdentifier
	(*core.TransferContract)(nil),                  // 99: protocol.TransferContract
	(*core.AccountUpdateContract)(nil),             // 100: protocol.AccountUpdateContract
	(*core.SetAccountIdContract)(nil),              // 101: protocol.SetAccountIdContract
	(*core.VoteWitnessContract)(nil),               // 102: protocol.VoteWitnessContract
	(*core.UpdateSettingContract)(nil),             // 103: protocol.UpdateSettingContract
	(*core.UpdateEnergyLimitContract)(nil),         // 104: protocol.UpdateEnergyLimitContract
	(*core.WitnessUpdateContract)(nil),             // 105: protocol.WitnessUpdateContract
	(*core.AccountCreateContract)(nil),             // 106: protocol.AccountCreateContract
	(*core.WitnessCreateContract)(nil),             // 107: protocol.WitnessCreateContract
	(*core.TransferAssetContract)(nil),             // 108: protocol.TransferAssetContract
	(*core.ParticipateAssetIssueContract)(nil),     // 109: protocol.ParticipateAssetIssueContract
	(*core.FreezeBalanceContract)(nil),             // 110: protocol.FreezeBalanceContract
	(*core.UnfreezeBalanceContract)(nil),           // 111: protocol.UnfreezeBalanceContract
	(*core.UnfreezeAssetContract)(nil),             // 112: protocol.UnfreezeAssetContract
	(*core.WithdrawBalanceContract)(nil),           // 113: protocol.WithdrawBalanceContract
	(*core.UpdateAssetContract)(nil),               // 114: protocol.UpdateAssetContract
	(*core.ProposalCreateContract)(nil),            // 115: protocol.ProposalCreateContract
	(*core.ProposalApproveContract)(nil),           // 116: protocol.ProposalApproveContract
	(*core.ProposalDeleteContract)(nil),            // 117: protocol.ProposalDeleteContract
	(*core.BuyStorageContract)(nil),                // 118: protocol.BuyStorageContract
	(*core.BuyStorageBytesContract)(nil),           // 119: protocol.BuyStorageBytesContract
	(*core.SellStorageContract)(nil),               // 120: protocol.SellStorageContract
	(*core.ExchangeCreateContract)(nil),            // 121: protocol.ExchangeCreateContract
	(*core.ExchangeInjectContract)(nil),            // 122: protocol.ExchangeInjectContract
	(*core.ExchangeWithdrawContract)(nil),          // 123: protocol.ExchangeWithdrawContract
	(*core.ExchangeTransactionContract)(nil),       // 124: protocol.ExchangeTransactionContract
	(*core.MarketSellAssetContract)(nil),           // 125: protocol.MarketSellAssetContract
	(*core.MarketCancelOrderContract)(nil),         // 126: protocol.MarketCancelOrderContract
	(*core.MarketOrderPair)(nil),                   // 127: protocol.MarketOrderPair
	(*core.CreateSmartContract)(nil),               // 128: protocol.CreateSmartContract
	(*core.TriggerSmartContract)(nil),              // 129: protocol.TriggerSmartContract
	(*core.ClearABIContract)(nil),                  // 130: protocol.ClearABIContract
	(*core.TransactionSign)(nil),                   // 131: protocol.TransactionSign
	(*core.AccountPermissionUpdateContract)(nil),   // 132: protocol.AccountPermissionUpdateContract
	(*core.UpdateBrokerageContract)(nil),           // 133: protocol.UpdateBrokerageContract
	(*core.OutputPointInfo)(nil),                   // 134: protocol.OutputPointInfo
	(*core.AccountBalanceResponse)(nil),            // 135: protocol.AccountBalanceResponse
	(*core.BlockBalanceTrace)(nil),                 // 136: protocol.BlockBalanceTrace
	(*core.MarketOrder)(nil),                       // 137: protocol.MarketOrder
	(*core.MarketOrderList)(nil),                   // 138: protocol.MarketOrderList
	(*core.MarketPriceList)(nil),                   // 139: protocol.MarketPriceList
	(*core.MarketOrderPairList)(nil),               // 140: protocol.MarketOrderPairList
	(*core.SmartContract)(nil),                     // 141: protocol.SmartContract
	(*core.SmartContractDataWrapper)(nil),          // 142: protocol.SmartContractDataWrapper
	(*core.DelegatedResourceAccountIndex)(nil),     // 143: protocol.DelegatedResourceAccountIndex
	(*core.ChainParameters)(nil),                   // 144: protocol.ChainParameters
	(*core.NodeInfo)(nil),                          // 145: protocol.NodeInfo
	(*core.IncrementalMerkleVoucherInfo)(nil),      // 146: protocol.IncrementalMerkleVoucherInfo
	(*core.DynamicProperties)(nil),                 // 147: protocol.DynamicProperties
	(*core.MetricsInfo)(nil),                       // 148: protocol.MetricsInfo
}
var file_api_api_proto_depIdxs = []int32{
	0,   // 0: protocol.Return.code:type_name -> protocol.Return.response_code
	82,  // 1: protocol.WitnessList.witnesses:type_name -> protocol.Witness
	83,  // 2: protocol.ProposalList.proposals:type_name -> protocol.Proposal
	84,  // 3: protocol.ExchangeList.exchanges:type_name -> protocol.Exchange
	85,  // 4: protocol.AssetIssueList.assetIssue:type_name -> protocol.AssetIssueContract
	86,  // 5: protocol.BlockList.block:type_name -> protocol.Block
	87,  // 6: protocol.TransactionList.transaction:type_name -> protocol.Transaction
	88,  // 7: protocol.DelegatedResourceList.delegatedResource:type_name -> protocol.DelegatedResource
	15,  // 8: protocol.NodeList.nodes:type_name -> protocol.Node
	16,  // 9: protocol.Node.address:type_name -> protocol.Address
	89,  // 10: protocol.AccountPaginated.account:type_name -> protocol.Account
	20,  // 11: protocol.TimePaginatedMessage.timeMessage:type_name -> protocol.TimeMessage
	73,  // 12: protocol.AccountNetMessage.assetNetUsed:type_name -> protocol.AccountNetMessage.AssetNetUsedEntry
	74,  // 13: protocol.AccountNetMessage.assetNetLimit:type_name -> protocol.AccountNetMessage.AssetNetLimitEntry
	75,  // 14: protocol.AccountResourceMessage.assetNetUsed:type_name -> protocol.AccountResourceMessage.AssetNetUsedEntry
	76,  // 15: protocol.AccountResourceMessage.assetNetLimit:type_name -> protocol.AccountResourceMessage.AssetNetLimitEntry
	87,  // 16: protocol.EasyTransferResponse.transaction:type_name -> protocol.Transaction
	3,   // 17: protocol.EasyTransferResponse.result:type_name -> protocol.Return
	87,  // 18: protocol.TransactionExtention.transaction:type_name -> protocol.Transaction
	3,   // 19: protocol.TransactionExtention.result:type_name -> protocol.Return
	34,  // 20: protocol.BlockExtention.transactions:type_name -> protocol.TransactionExtention
	90,  // 21: protocol.BlockExtention.block_header:type_name -> protocol.BlockHeader
	35,  // 22: protocol.BlockListExtention.block:type_name -> protocol.BlockExtention
	34,  // 23: protocol.TransactionListExtention.transaction:type_name -> protocol.TransactionExtention
	91,  // 24: protocol.BlockIncrementalMerkleTree.merkleTree:type_name -> protocol.IncrementalMerkleTree
	92,  // 25: protocol.TransactionSignWeight.permission:type_name -> protocol.Permission
	77,  // 26: protocol.TransactionSignWeight.result:type_name -> protocol.TransactionSignWeight.Result
	34,  // 27: protocol.TransactionSignWeight.transaction:type_name -> protocol.TransactionExtention
	78,  // 28: protocol.TransactionApprovedList.result:type_name -> protocol.TransactionApprovedList.Result
	34,  // 29: protocol.TransactionApprovedList.transaction:type_name -> protocol.TransactionExtention
	79,  // 30: protocol.DecryptNotes.noteTxs:type_name -> protocol.DecryptNotes.NoteTx
	80,  // 31: protocol.DecryptNotesMarked.noteTxs:type_name -> protocol.DecryptNotesMarked.NoteTx
	46,  // 32: protocol.SpendNote.note:type_name -> protocol.Note
	93,  // 33: protocol.SpendNote.voucher:type_name -> protocol.IncrementalMerkleVoucher
	46,  // 34: protocol.ReceiveNote.note:type_name -> protocol.Note
	47,  // 35: protocol.PrivateParameters.shielded_spends:type_name -> protocol.SpendNote
	48,  // 36: protocol.PrivateParameters.shielded_receives:type_name -> protocol.ReceiveNote
	47,  // 37: protocol.PrivateParametersWithoutAsk.shielded_spends:type_name -> protocol.SpendNote
	48,  // 38: protocol.PrivateParametersWithoutAsk.shielded_receives:type_name -> protocol.ReceiveNote
	46,  // 39: protocol.NfParameters.note:type_name -> protocol.Note
	93,  // 40: protocol.NfParameters.voucher:type_name -> protocol.IncrementalMerkleVoucher
	55,  // 41: protocol.IncomingViewingKeyDiversifierMessage.ivk:type_name -> protocol.IncomingViewingKeyMessage
	56,  // 42: protocol.IncomingViewingKeyDiversifierMessage.d:type_name -> protocol.DiversifierMessage
	56,  // 43: protocol.PaymentAddressMessage.d:type_name -> protocol.DiversifierMessage
	46,  // 44: protocol.NoteParameters.note:type_name -> protocol.Note
	94,  // 45: protocol.TransactionInfoList.transactionInfo:type_name -> protocol.TransactionInfo
	46,  // 46: protocol.SpendNoteTRC20.note:type_name -> protocol.Note
	63,  // 47: protocol.PrivateShieldedTRC20Parameters.shielded_spends:type_name -> protocol.SpendNoteTRC20
	48,  // 48: protocol.PrivateShieldedTRC20Parameters.shielded_receives:type_name -> protocol.ReceiveNote
	63,  // 49: protocol.PrivateShieldedTRC20ParametersWithoutAsk.shielded_spends:type_name -> protocol.SpendNoteTRC20
	48,  // 50: protocol.PrivateShieldedTRC20ParametersWithoutAsk.shielded_receives:type_name -> protocol.ReceiveNote
	95,  // 51: protocol.ShieldedTRC20Parameters.spend_description:type_name -> protocol.SpendDescription
	96,  // 52: protocol.ShieldedTRC20Parameters.receive_description:type_name -> protocol.ReceiveDescription
	81,  // 53: protocol.DecryptNotesTRC20.noteTxs:type_name -> protocol.DecryptNotesTRC20.NoteTx
	46,  // 54: protocol.NfTRC20Parameters.note:type_name -> protocol.Note
	66,  // 55: protocol.ShieldedTRC20TriggerContractParameters.shielded_TRC20_Parameters:type_name -> protocol.ShieldedTRC20Parameters
	19,  // 56: protocol.ShieldedTRC20TriggerContractParameters.spend_authority_signature:type_name -> protocol.BytesMessage
	1,   // 57: protocol.TransactionSignWeight.Result.code:type_name -> protocol.TransactionSignWeight.Result.response_code
	2,   // 58: protocol.TransactionApprovedList.Result.code:type_name -> protocol.TransactionApprovedList.Result.response_code
	46,  // 59: protocol.DecryptNotes.NoteTx.note:type_name -> protocol.Note
	46,  // 60: protocol.DecryptNotesMarked.NoteTx.note:type_name -> protocol.Note
	46,  // 61: protocol.DecryptNotesTRC20.NoteTx.note:type_name -> protocol.Note
	89,  // 62: protocol.Wallet.GetAccount:input_type -> protocol.Account
	89,  // 63: protocol.Wallet.GetAccountById:input_type -> protocol.Account
	97,  // 64: protocol.Wallet.GetAccountBalance:input_type -> protocol.AccountBalanceRequest
	98,  // 65: protocol.Wallet.GetBlockBalanceTrace:input_type -> protocol.BlockBalanceTrace.BlockIdentifier
	99,  // 66: protocol.Wallet.CreateTransaction:input_type -> protocol.TransferContract
	99,  // 67: protocol.Wallet.CreateTransaction2:input_type -> protocol.TransferContract
	87,  // 68: protocol.Wallet.BroadcastTransaction:input_type -> protocol.Transaction
	100, // 69: protocol.Wallet.UpdateAccount:input_type -> protocol.AccountUpdateContract
	101, // 70: protocol.Wallet.SetAccountId:input_type -> protocol.SetAccountIdContract
	100, // 71: protocol.Wallet.UpdateAccount2:input_type -> protocol.AccountUpdateContract
	102, // 72: protocol.Wallet.VoteWitnessAccount:input_type -> protocol.VoteWitnessContract
	103, // 73: protocol.Wallet.UpdateSetting:input_type -> protocol.UpdateSettingContract
	104, // 74: protocol.Wallet.UpdateEnergyLimit:input_type -> protocol.UpdateEnergyLimitContract
	102, // 75: protocol.Wallet.VoteWitnessAccount2:input_type -> protocol.VoteWitnessContract
	85,  // 76: protocol.Wallet.CreateAssetIssue:input_type -> protocol.AssetIssueContract
	85,  // 77: protocol.Wallet.CreateAssetIssue2:input_type -> protocol.AssetIssueContract
	105, // 78: protocol.Wallet.UpdateWitness:input_type -> protocol.WitnessUpdateContract
	105, // 79: protocol.Wallet.UpdateWitness2:input_type -> protocol.WitnessUpdateContract
	106, // 80: protocol.Wallet.CreateAccount:input_type -> protocol.AccountCreateContract
	106, // 81: protocol.Wallet.CreateAccount2:input_type -> protocol.AccountCreateContract
	107, // 82: protocol.Wallet.CreateWitness:input_type -> protocol.WitnessCreateContract
	107, // 83: protocol.Wallet.CreateWitness2:input_type -> protocol.WitnessCreateContract
	108, // 84: protocol.Wallet.TransferAsset:input_type -> protocol.TransferAssetContract
	108, // 85: protocol.Wallet.TransferAsset2:input_type -> protocol.TransferAssetContract
	109, // 86: protocol.Wallet.ParticipateAssetIssue:input_type -> protocol.ParticipateAssetIssueContract
	109, // 87: protocol.Wallet.ParticipateAssetIssue2:input_type -> protocol.ParticipateAssetIssueContract
	110, // 88: protocol.Wallet.FreezeBalance:input_type -> protocol.FreezeBalanceContract
	110, // 89: protocol.Wallet.FreezeBalance2:input_type -> protocol.FreezeBalanceContract
	111, // 90: protocol.Wallet.UnfreezeBalance:input_type -> protocol.UnfreezeBalanceContract
	111, // 91: protocol.Wallet.UnfreezeBalance2:input_type -> protocol.UnfreezeBalanceContract
	112, // 92: protocol.Wallet.UnfreezeAsset:input_type -> protocol.UnfreezeAssetContract
	112, // 93: protocol.Wallet.UnfreezeAsset2:input_type -> protocol.UnfreezeAssetContract
	113, // 94: protocol.Wallet.WithdrawBalance:input_type -> protocol.WithdrawBalanceContract
	113, // 95: protocol.Wallet.WithdrawBalance2:input_type -> protocol.WithdrawBalanceContract
	114, // 96: protocol.Wallet.UpdateAsset:input_type -> protocol.UpdateAssetContract
	114, // 97: protocol.Wallet.UpdateAsset2:input_type -> protocol.UpdateAssetContract
	115, // 98: protocol.Wallet.ProposalCreate:input_type -> protocol.ProposalCreateContract
	116, // 99: protocol.Wallet.ProposalApprove:input_type -> protocol.ProposalApproveContract
	117, // 100: protocol.Wallet.ProposalDelete:input_type -> protocol.ProposalDeleteContract
	118, // 101: protocol.Wallet.BuyStorage:input_type -> protocol.BuyStorageContract
	119, // 102: protocol.Wallet.BuyStorageBytes:input_type -> protocol.BuyStorageBytesContract
	120, // 103: protocol.Wallet.SellStorage:input_type -> protocol.SellStorageContract
	121, // 104: protocol.Wallet.ExchangeCreate:input_type -> protocol.ExchangeCreateContract
	122, // 105: protocol.Wallet.ExchangeInject:input_type -> protocol.ExchangeInjectContract
	123, // 106: protocol.Wallet.ExchangeWithdraw:input_type -> protocol.ExchangeWithdrawContract
	124, // 107: protocol.Wallet.ExchangeTransaction:input_type -> protocol.ExchangeTransactionContract
	125, // 108: protocol.Wallet.MarketSellAsset:input_type -> protocol.MarketSellAssetContract
	126, // 109: protocol.Wallet.MarketCancelOrder:input_type -> protocol.MarketCancelOrderContract
	19,  // 110: protocol.Wallet.GetMarketOrderById:input_type -> protocol.BytesMessage
	19,  // 111: protocol.Wallet.GetMarketOrderByAccount:input_type -> protocol.BytesMessage
	127, // 112: protocol.Wallet.GetMarketPriceByPair:input_type -> protocol.MarketOrderPair
	127, // 113: protocol.Wallet.GetMarketOrderListByPair:input_type -> protocol.MarketOrderPair
	17,  // 114: protocol.Wallet.GetMarketPairList:input_type -> protocol.EmptyMessage
	17,  // 115: protocol.Wallet.ListNodes:input_type -> protocol.EmptyMessage
	89,  // 116: protocol.Wallet.GetAssetIssueByAccount:input_type -> protocol.Account
	89,  // 117: protocol.Wallet.GetAccountNet:input_type -> protocol.Account
	89,  // 118: protocol.Wallet.GetAccountResource:input_type -> protocol.Account
	19,  // 119: protocol.Wallet.GetAssetIssueByName:input_type -> protocol.BytesMessage
	19,  // 120: protocol.Wallet.GetAssetIssueListByName:input_type -> protocol.BytesMessage
	19,  // 121: protocol.Wallet.GetAssetIssueById:input_type -> protocol.BytesMessage
	17,  // 122: protocol.Wallet.GetNowBlock:input_type -> protocol.EmptyMessage
	17,  // 123: protocol.Wallet.GetNowBlock2:input_type -> protocol.EmptyMessage
	18,  // 124: protocol.Wallet.GetBlockByNum:input_type -> protocol.NumberMessage
	18,  // 125: protocol.Wallet.GetBlockByNum2:input_type -> protocol.NumberMessage
	18,  // 126: protocol.Wallet.GetTransactionCountByBlockNum:input_type -> protocol.NumberMessage
	19,  // 127: protocol.Wallet.GetBlockById:input_type -> protocol.BytesMessage
	21,  // 128: protocol.Wallet.GetBlockByLimitNext:input_type -> protocol.BlockLimit
	21,  // 129: protocol.Wallet.GetBlockByLimitNext2:input_type -> protocol.BlockLimit
	18,  // 130: protocol.Wallet.GetBlockByLatestNum:input_type -> protocol.NumberMessage
	18,  // 131: protocol.Wallet.GetBlockByLatestNum2:input_type -> protocol.NumberMessage
	19,  // 132: protocol.Wallet.GetTransactionById:input_type -> protocol.BytesMessage
	128, // 133: protocol.Wallet.DeployContract:input_type -> protocol.CreateSmartContract
	19,  // 134: protocol.Wallet.GetContract:input_type -> protocol.BytesMessage
	19,  // 135: protocol.Wallet.GetContractInfo:input_type -> protocol.BytesMessage
	129, // 136: protocol.Wallet.TriggerContract:input_type -> protocol.TriggerSmartContract
	129, // 137: protocol.Wallet.TriggerConstantContract:input_type -> protocol.TriggerSmartContract
	130, // 138: protocol.Wallet.ClearContractABI:input_type -> protocol.ClearABIContract
	17,  // 139: protocol.Wallet.ListWitnesses:input_type -> protocol.EmptyMessage
	12,  // 140: protocol.Wallet.GetDelegatedResource:input_type -> protocol.DelegatedResourceMessage
	19,  // 141: protocol.Wallet.GetDelegatedResourceAccountIndex:input_type -> protocol.BytesMessage
	17,  // 142: protocol.Wallet.ListProposals:input_type -> protocol.EmptyMessage
	27,  // 143: protocol.Wallet.GetPaginatedProposalList:input_type -> protocol.PaginatedMessage
	19,  // 144: protocol.Wallet.GetProposalById:input_type -> protocol.BytesMessage
	17,  // 145: protocol.Wallet.ListExchanges:input_type -> protocol.EmptyMessage
	27,  // 146: protocol.Wallet.GetPaginatedExchangeList:input_type -> protocol.PaginatedMessage
	19,  // 147: protocol.Wallet.GetExchangeById:input_type -> protocol.BytesMessage
	17,  // 148: protocol.Wallet.GetChainParameters:input_type -> protocol.EmptyMessage
	17,  // 149: protocol.Wallet.GetAssetIssueList:input_type -> protocol.EmptyMessage
	27,  // 150: protocol.Wallet.GetPaginatedAssetIssueList:input_type -> protocol.PaginatedMessage
	17,  // 151: protocol.Wallet.TotalTransaction:input_type -> protocol.EmptyMessage
	17,  // 152: protocol.Wallet.GetNextMaintenanceTime:input_type -> protocol.EmptyMessage
	131, // 153: protocol.Wallet.GetTransactionSign:input_type -> protocol.TransactionSign
	131, // 154: protocol.Wallet.GetTransactionSign2:input_type -> protocol.TransactionSign
	19,  // 155: protocol.Wallet.CreateAddress:input_type -> protocol.BytesMessage
	29,  // 156: protocol.Wallet.EasyTransferAsset:input_type -> protocol.EasyTransferAssetMessage
	31,  // 157: protocol.Wallet.EasyTransferAssetByPrivate:input_type -> protocol.EasyTransferAssetByPrivateMessage
	28,  // 158: protocol.Wallet.EasyTransfer:input_type -> protocol.EasyTransferMessage
	30,  // 159: protocol.Wallet.EasyTransferByPrivate:input_type -> protocol.EasyTransferByPrivateMessage
	17,  // 160: protocol.Wallet.GenerateAddress:input_type -> protocol.EmptyMessage
	19,  // 161: protocol.Wallet.GetTransactionInfoById:input_type -> protocol.BytesMessage
	132, // 162: protocol.Wallet.AccountPermissionUpdate:input_type -> protocol.AccountPermissionUpdateContract
	131, // 163: protocol.Wallet.AddSign:input_type -> protocol.TransactionSign
	87,  // 164: protocol.Wallet.GetTransactionSignWeight:input_type -> protocol.Transaction
	87,  // 165: protocol.Wallet.GetTransactionApprovedList:input_type -> protocol.Transaction
	17,  // 166: protocol.Wallet.GetNodeInfo:input_type -> protocol.EmptyMessage
	19,  // 167: protocol.Wallet.GetRewardInfo:input_type -> protocol.BytesMessage
	19,  // 168: protocol.Wallet.GetBrokerageInfo:input_type -> protocol.BytesMessage
	133, // 169: protocol.Wallet.UpdateBrokerage:input_type -> protocol.UpdateBrokerageContract
	49,  // 170: protocol.Wallet.CreateShieldedTransaction:input_type -> protocol.PrivateParameters
	134, // 171: protocol.Wallet.GetMerkleTreeVoucherInfo:input_type -> protocol.OutputPointInfo
	41,  // 172: protocol.Wallet.ScanNoteByIvk:input_type -> protocol.IvkDecryptParameters
	42,  // 173: protocol.Wallet.ScanAndMarkNoteByIvk:input_type -> protocol.IvkDecryptAndMarkParameters
	43,  // 174: protocol.Wallet.ScanNoteByOvk:input_type -> protocol.OvkDecryptParameters
	17,  // 175: protocol.Wallet.GetSpendingKey:input_type -> protocol.EmptyMessage
	19,  // 176: protocol.Wallet.GetExpandedSpendingKey:input_type -> protocol.BytesMessage
	19,  // 177: protocol.Wallet.GetAkFromAsk:input_type -> protocol.BytesMessage
	19,  // 178: protocol.Wallet.GetNkFromNsk:input_type -> protocol.BytesMessage
	54,  // 179: protocol.Wallet.GetIncomingViewingKey:input_type -> protocol.ViewingKeyMessage
	17,  // 180: protocol.Wallet.GetDiversifier:input_type -> protocol.EmptyMessage
	17,  // 181: protocol.Wallet.GetNewShieldedAddress:input_type -> protocol.EmptyMessage
	57,  // 182: protocol.Wallet.GetZenPaymentAddress:input_type -> protocol.IncomingViewingKeyDiversifierMessage
	17,  // 183: protocol.Wallet.GetRcm:input_type -> protocol.EmptyMessage
	60,  // 184: protocol.Wallet.IsSpend:input_type -> protocol.NoteParameters
	50,  // 185: protocol.Wallet.CreateShieldedTransactionWithoutSpendAuthSig:input_type -> protocol.PrivateParametersWithoutAsk
	87,  // 186: protocol.Wallet.GetShieldTransactionHash:input_type -> protocol.Transaction
	51,  // 187: protocol.Wallet.CreateSpendAuthSig:input_type -> protocol.SpendAuthSigParameters
	52,  // 188: protocol.Wallet.CreateShieldNullifier:input_type -> protocol.NfParameters
	64,  // 189: protocol.Wallet.CreateShieldedContractParameters:input_type -> protocol.PrivateShieldedTRC20Parameters
	65,  // 190: protocol.Wallet.CreateShieldedContractParametersWithoutAsk:input_type -> protocol.PrivateShieldedTRC20ParametersWithoutAsk
	67,  // 191: protocol.Wallet.ScanShieldedTRC20NotesByIvk:input_type -> protocol.IvkDecryptTRC20Parameters
	68,  // 192: protocol.Wallet.ScanShieldedTRC20NotesByOvk:input_type -> protocol.OvkDecryptTRC20Parameters
	70,  // 193: protocol.Wallet.IsShieldedTRC20ContractNoteSpent:input_type -> protocol.NfTRC20Parameters
	72,  // 194: protocol.Wallet.GetTriggerInputForShieldedTRC20Contract:input_type -> protocol.ShieldedTRC20TriggerContractParameters
	87,  // 195: protocol.Wallet.CreateCommonTransaction:input_type -> protocol.Transaction
	18,  // 196: protocol.Wallet.GetTransactionInfoByBlockNum:input_type -> protocol.NumberMessage
	17,  // 197: protocol.Wallet.GetBurnTrx:input_type -> protocol.EmptyMessage
	19,  // 198: protocol.Wallet.GetTransactionFromPending:input_type -> protocol.BytesMessage
	17,  // 199: protocol.Wallet.GetTransactionListFromPending:input_type -> protocol.EmptyMessage
	17,  // 200: protocol.Wallet.GetPendingSize:input_type -> protocol.EmptyMessage
	89,  // 201: protocol.WalletSolidity.GetAccount:input_type -> protocol.Account
	89,  // 202: protocol.WalletSolidity.GetAccountById:input_type -> protocol.Account
	17,  // 203: protocol.WalletSolidity.ListWitnesses:input_type -> protocol.EmptyMessage
	17,  // 204: protocol.WalletSolidity.GetAssetIssueList:input_type -> protocol.EmptyMessage
	27,  // 205: protocol.WalletSolidity.GetPaginatedAssetIssueList:input_type -> protocol.PaginatedMessage
	19,  // 206: protocol.WalletSolidity.GetAssetIssueByName:input_type -> protocol.BytesMessage
	19,  // 207: protocol.WalletSolidity.GetAssetIssueListByName:input_type -> protocol.BytesMessage
	19,  // 208: protocol.WalletSolidity.GetAssetIssueById:input_type -> protocol.BytesMessage
	17,  // 209: protocol.WalletSolidity.GetNowBlock:input_type -> protocol.EmptyMessage
	17,  // 210: protocol.WalletSolidity.GetNowBlock2:input_type -> protocol.EmptyMessage
	18,  // 211: protocol.WalletSolidity.GetBlockByNum:input_type -> protocol.NumberMessage
	18,  // 212: protocol.WalletSolidity.GetBlockByNum2:input_type -> protocol.NumberMessage
	18,  // 213: protocol.WalletSolidity.GetTransactionCountByBlockNum:input_type -> protocol.NumberMessage
	12,  // 214: protocol.WalletSolidity.GetDelegatedResource:input_type -> protocol.DelegatedResourceMessage
	19,  // 215: protocol.WalletSolidity.GetDelegatedResourceAccountIndex:input_type -> protocol.BytesMessage
	19,  // 216: protocol.WalletSolidity.GetExchangeById:input_type -> protocol.BytesMessage
	17,  // 217: protocol.WalletSolidity.ListExchanges:input_type -> protocol.EmptyMessage
	19,  // 218: protocol.WalletSolidity.GetTransactionById:input_type -> protocol.BytesMessage
	19,  // 219: protocol.WalletSolidity.GetTransactionInfoById:input_type -> protocol.BytesMessage
	17,  // 220: protocol.WalletSolidity.GenerateAddress:input_type -> protocol.EmptyMessage
	134, // 221: protocol.WalletSolidity.GetMerkleTreeVoucherInfo:input_type -> protocol.OutputPointInfo
	41,  // 222: protocol.WalletSolidity.ScanNoteByIvk:input_type -> protocol.IvkDecryptParameters
	42,  // 223: protocol.WalletSolidity.ScanAndMarkNoteByIvk:input_type -> protocol.IvkDecryptAndMarkParameters
	43,  // 224: protocol.WalletSolidity.ScanNoteByOvk:input_type -> protocol.OvkDecryptParameters
	60,  // 225: protocol.WalletSolidity.IsSpend:input_type -> protocol.NoteParameters
	67,  // 226: protocol.WalletSolidity.ScanShieldedTRC20NotesByIvk:input_type -> protocol.IvkDecryptTRC20Parameters
	68,  // 227: protocol.WalletSolidity.ScanShieldedTRC20NotesByOvk:input_type -> protocol.OvkDecryptTRC20Parameters
	70,  // 228: protocol.WalletSolidity.IsShieldedTRC20ContractNoteSpent:input_type -> protocol.NfTRC20Parameters
	19,  // 229: protocol.WalletSolidity.GetRewardInfo:input_type -> protocol.BytesMessage
	19,  // 230: protocol.WalletSolidity.GetBrokerageInfo:input_type -> protocol.BytesMessage
	129, // 231: protocol.WalletSolidity.TriggerConstantContract:input_type -> protocol.TriggerSmartContract
	18,  // 232: protocol.WalletSolidity.GetTransactionInfoByBlockNum:input_type -> protocol.NumberMessage
	19,  // 233: protocol.WalletSolidity.GetMarketOrderById:input_type -> protocol.BytesMessage
	19,  // 234: protocol.WalletSolidity.GetMarketOrderByAccount:input_type -> protocol.BytesMessage
	127, // 235: protocol.WalletSolidity.GetMarketPriceByPair:input_type -> protocol.MarketOrderPair
	127, // 236: protocol.WalletSolidity.GetMarketOrderListByPair:input_type -> protocol.MarketOrderPair
	17,  // 237: protocol.WalletSolidity.GetMarketPairList:input_type -> protocol.EmptyMessage
	17,  // 238: protocol.WalletSolidity.GetBurnTrx:input_type -> protocol.EmptyMessage
	23,  // 239: protocol.WalletExtension.GetTransactionsFromThis:input_type -> protocol.AccountPaginated
	23,  // 240: protocol.WalletExtension.GetTransactionsFromThis2:input_type -> protocol.AccountPaginated
	23,  // 241: protocol.WalletExtension.GetTransactionsToThis:input_type -> protocol.AccountPaginated
	23,  // 242: protocol.WalletExtension.GetTransactionsToThis2:input_type -> protocol.AccountPaginated
	17,  // 243: protocol.Database.getBlockReference:input_type -> protocol.EmptyMessage
	17,  // 244: protocol.Database.GetDynamicProperties:input_type -> protocol.EmptyMessage
	17,  // 245: protocol.Database.GetNowBlock:input_type -> protocol.EmptyMessage
	18,  // 246: protocol.Database.GetBlockByNum:input_type -> protocol.NumberMessage
	17,  // 247: protocol.Monitor.GetStatsInfo:input_type -> protocol.EmptyMessage
	89,  // 248: protocol.Wallet.GetAccount:output_type -> protocol.Account
	89,  // 249: protocol.Wallet.GetAccountById:output_type -> protocol.Account
	135, // 250: protocol.Wallet.GetAccountBalance:output_type -> protocol.AccountBalanceResponse
	136, // 251: protocol.Wallet.GetBlockBalanceTrace:output_type -> protocol.BlockBalanceTrace
	87,  // 252: protocol.Wallet.CreateTransaction:output_type -> protocol.Transaction
	34,  // 253: protocol.Wallet.CreateTransaction2:output_type -> protocol.TransactionExtention
	3,   // 254: protocol.Wallet.BroadcastTransaction:output_type -> protocol.Return
	87,  // 255: protocol.Wallet.UpdateAccount:output_type -> protocol.Transaction
	87,  // 256: protocol.Wallet.SetAccountId:output_type -> protocol.Transaction
	34,  // 257: protocol.Wallet.UpdateAccount2:output_type -> protocol.TransactionExtention
	87,  // 258: protocol.Wallet.VoteWitnessAccount:output_type -> protocol.Transaction
	34,  // 259: protocol.Wallet.UpdateSetting:output_type -> protocol.TransactionExtention
	34,  // 260: protocol.Wallet.UpdateEnergyLimit:output_type -> protocol.TransactionExtention
	34,  // 261: protocol.Wallet.VoteWitnessAccount2:output_type -> protocol.TransactionExtention
	87,  // 262: protocol.Wallet.CreateAssetIssue:output_type -> protocol.Transaction
	34,  // 263: protocol.Wallet.CreateAssetIssue2:output_type -> protocol.TransactionExtention
	87,  // 264: protocol.Wallet.UpdateWitness:output_type -> protocol.Transaction
	34,  // 265: protocol.Wallet.UpdateWitness2:output_type -> protocol.TransactionExtention
	87,  // 266: protocol.Wallet.CreateAccount:output_type -> protocol.Transaction
	34,  // 267: protocol.Wallet.CreateAccount2:output_type -> protocol.TransactionExtention
	87,  // 268: protocol.Wallet.CreateWitness:output_type -> protocol.Transaction
	34,  // 269: protocol.Wallet.CreateWitness2:output_type -> protocol.TransactionExtention
	87,  // 270: protocol.Wallet.TransferAsset:output_type -> protocol.Transaction
	34,  // 271: protocol.Wallet.TransferAsset2:output_type -> protocol.TransactionExtention
	87,  // 272: protocol.Wallet.ParticipateAssetIssue:output_type -> protocol.Transaction
	34,  // 273: protocol.Wallet.ParticipateAssetIssue2:output_type -> protocol.TransactionExtention
	87,  // 274: protocol.Wallet.FreezeBalance:output_type -> protocol.Transaction
	34,  // 275: protocol.Wallet.FreezeBalance2:output_type -> protocol.TransactionExtention
	87,  // 276: protocol.Wallet.UnfreezeBalance:output_type -> protocol.Transaction
	34,  // 277: protocol.Wallet.UnfreezeBalance2:output_type -> protocol.TransactionExtention
	87,  // 278: protocol.Wallet.UnfreezeAsset:output_type -> protocol.Transaction
	34,  // 279: protocol.Wallet.UnfreezeAsset2:output_type -> protocol.TransactionExtention
	87,  // 280: protocol.Wallet.WithdrawBalance:output_type -> protocol.Transaction
	34,  // 281: protocol.Wallet.WithdrawBalance2:output_type -> protocol.TransactionExtention
	87,  // 282: protocol.Wallet.UpdateAsset:output_type -> protocol.Transaction
	34,  // 283: protocol.Wallet.UpdateAsset2:output_type -> protocol.TransactionExtention
	34,  // 284: protocol.Wallet.ProposalCreate:output_type -> protocol.TransactionExtention
	34,  // 285: protocol.Wallet.ProposalApprove:output_type -> protocol.TransactionExtention
	34,  // 286: protocol.Wallet.ProposalDelete:output_type -> protocol.TransactionExtention
	34,  // 287: protocol.Wallet.BuyStorage:output_type -> protocol.TransactionExtention
	34,  // 288: protocol.Wallet.BuyStorageBytes:output_type -> protocol.TransactionExtention
	34,  // 289: protocol.Wallet.SellStorage:output_type -> protocol.TransactionExtention
	34,  // 290: protocol.Wallet.ExchangeCreate:output_type -> protocol.TransactionExtention
	34,  // 291: protocol.Wallet.ExchangeInject:output_type -> protocol.TransactionExtention
	34,  // 292: protocol.Wallet.ExchangeWithdraw:output_type -> protocol.TransactionExtention
	34,  // 293: protocol.Wallet.ExchangeTransaction:output_type -> protocol.TransactionExtention
	34,  // 294: protocol.Wallet.MarketSellAsset:output_type -> protocol.TransactionExtention
	34,  // 295: protocol.Wallet.MarketCancelOrder:output_type -> protocol.TransactionExtention
	137, // 296: protocol.Wallet.GetMarketOrderById:output_type -> protocol.MarketOrder
	138, // 297: protocol.Wallet.GetMarketOrderByAccount:output_type -> protocol.MarketOrderList
	139, // 298: protocol.Wallet.GetMarketPriceByPair:output_type -> protocol.MarketPriceList
	138, // 299: protocol.Wallet.GetMarketOrderListByPair:output_type -> protocol.MarketOrderList
	140, // 300: protocol.Wallet.GetMarketPairList:output_type -> protocol.MarketOrderPairList
	14,  // 301: protocol.Wallet.ListNodes:output_type -> protocol.NodeList
	8,   // 302: protocol.Wallet.GetAssetIssueByAccount:output_type -> protocol.AssetIssueList
	25,  // 303: protocol.Wallet.GetAccountNet:output_type -> protocol.AccountNetMessage
	26,  // 304: protocol.Wallet.GetAccountResource:output_type -> protocol.AccountResourceMessage
	85,  // 305: protocol.Wallet.GetAssetIssueByName:output_type -> protocol.AssetIssueContract
	8,   // 306: protocol.Wallet.GetAssetIssueListByName:output_type -> protocol.AssetIssueList
	85,  // 307: protocol.Wallet.GetAssetIssueById:output_type -> protocol.AssetIssueContract
	86,  // 308: protocol.Wallet.GetNowBlock:output_type -> protocol.Block
	35,  // 309: protocol.Wallet.GetNowBlock2:output_type -> protocol.BlockExtention
	86,  // 310: protocol.Wallet.GetBlockByNum:output_type -> protocol.Block
	35,  // 311: protocol.Wallet.GetBlockByNum2:output_type -> protocol.BlockExtention
	18,  // 312: protocol.Wallet.GetTransactionCountByBlockNum:output_type -> protocol.NumberMessage
	86,  // 313: protocol.Wallet.GetBlockById:output_type -> protocol.Block
	9,   // 314: protocol.Wallet.GetBlockByLimitNext:output_type -> protocol.BlockList
	36,  // 315: protocol.Wallet.GetBlockByLimitNext2:output_type -> protocol.BlockListExtention
	9,   // 316: protocol.Wallet.GetBlockByLatestNum:output_type -> protocol.BlockList
	36,  // 317: protocol.Wallet.GetBlockByLatestNum2:output_type -> protocol.BlockListExtention
	87,  // 318: protocol.Wallet.GetTransactionById:output_type -> protocol.Transaction
	34,  // 319: protocol.Wallet.DeployContract:output_type -> protocol.TransactionExtention
	141, // 320: protocol.Wallet.GetContract:output_type -> protocol.SmartContract
	142, // 321: protocol.Wallet.GetContractInfo:output_type -> protocol.SmartContractDataWrapper
	34,  // 322: protocol.Wallet.TriggerContract:output_type -> protocol.TransactionExtention
	34,  // 323: protocol.Wallet.TriggerConstantContract:output_type -> protocol.TransactionExtention
	34,  // 324: protocol.Wallet.ClearContractABI:output_type -> protocol.TransactionExtention
	5,   // 325: protocol.Wallet.ListWitnesses:output_type -> protocol.WitnessList
	13,  // 326: protocol.Wallet.GetDelegatedResource:output_type -> protocol.DelegatedResourceList
	143, // 327: protocol.Wallet.GetDelegatedResourceAccountIndex:output_type -> protocol.DelegatedResourceAccountIndex
	6,   // 328: protocol.Wallet.ListProposals:output_type -> protocol.ProposalList
	6,   // 329: protocol.Wallet.GetPaginatedProposalList:output_type -> protocol.ProposalList
	83,  // 330: protocol.Wallet.GetProposalById:output_type -> protocol.Proposal
	7,   // 331: protocol.Wallet.ListExchanges:output_type -> protocol.ExchangeList
	7,   // 332: protocol.Wallet.GetPaginatedExchangeList:output_type -> protocol.ExchangeList
	84,  // 333: protocol.Wallet.GetExchangeById:output_type -> protocol.Exchange
	144, // 334: protocol.Wallet.GetChainParameters:output_type -> protocol.ChainParameters
	8,   // 335: protocol.Wallet.GetAssetIssueList:output_type -> protocol.AssetIssueList
	8,   // 336: protocol.Wallet.GetPaginatedAssetIssueList:output_type -> protocol.AssetIssueList
	18,  // 337: protocol.Wallet.TotalTransaction:output_type -> protocol.NumberMessage
	18,  // 338: protocol.Wallet.GetNextMaintenanceTime:output_type -> protocol.NumberMessage
	87,  // 339: protocol.Wallet.GetTransactionSign:output_type -> protocol.Transaction
	34,  // 340: protocol.Wallet.GetTransactionSign2:output_type -> protocol.TransactionExtention
	19,  // 341: protocol.Wallet.CreateAddress:output_type -> protocol.BytesMessage
	32,  // 342: protocol.Wallet.EasyTransferAsset:output_type -> protocol.EasyTransferResponse
	32,  // 343: protocol.Wallet.EasyTransferAssetByPrivate:output_type -> protocol.EasyTransferResponse
	32,  // 344: protocol.Wallet.EasyTransfer:output_type -> protocol.EasyTransferResponse
	32,  // 345: protocol.Wallet.EasyTransferByPrivate:output_type -> protocol.EasyTransferResponse
	33,  // 346: protocol.Wallet.GenerateAddress:output_type -> protocol.AddressPrKeyPairMessage
	94,  // 347: protocol.Wallet.GetTransactionInfoById:output_type -> protocol.TransactionInfo
	34,  // 348: protocol.Wallet.AccountPermissionUpdate:output_type -> protocol.TransactionExtention
	34,  // 349: protocol.Wallet.AddSign:output_type -> protocol.TransactionExtention
	39,  // 350: protocol.Wallet.GetTransactionSignWeight:output_type -> protocol.TransactionSignWeight
	40,  // 351: protocol.Wallet.GetTransactionApprovedList:output_type -> protocol.TransactionApprovedList
	145, // 352: protocol.Wallet.GetNodeInfo:output_type -> protocol.NodeInfo
	18,  // 353: protocol.Wallet.GetRewardInfo:output_type -> protocol.NumberMessage
	18,  // 354: protocol.Wallet.GetBrokerageInfo:output_type -> protocol.NumberMessage
	34,  // 355: protocol.Wallet.UpdateBrokerage:output_type -> protocol.TransactionExtention
	34,  // 356: protocol.Wallet.CreateShieldedTransaction:output_type -> protocol.TransactionExtention
	146, // 357: protocol.Wallet.GetMerkleTreeVoucherInfo:output_type -> protocol.IncrementalMerkleVoucherInfo
	44,  // 358: protocol.Wallet.ScanNoteByIvk:output_type -> protocol.DecryptNotes
	45,  // 359: protocol.Wallet.ScanAndMarkNoteByIvk:output_type -> protocol.DecryptNotesMarked
	44,  // 360: protocol.Wallet.ScanNoteByOvk:output_type -> protocol.DecryptNotes
	19,  // 361: protocol.Wallet.GetSpendingKey:output_type -> protocol.BytesMessage
	53,  // 362: protocol.Wallet.GetExpandedSpendingKey:output_type -> protocol.ExpandedSpendingKeyMessage
	19,  // 363: protocol.Wallet.GetAkFromAsk:output_type -> protocol.BytesMessage
	19,  // 364: protocol.Wallet.GetNkFromNsk:output_type -> protocol.BytesMessage
	55,  // 365: protocol.Wallet.GetIncomingViewingKey:output_type -> protocol.IncomingViewingKeyMessage
	56,  // 366: protocol.Wallet.GetDiversifier:output_type -> protocol.DiversifierMessage
	59,  // 367: protocol.Wallet.GetNewShieldedAddress:output_type -> protocol.ShieldedAddressInfo
	58,  // 368: protocol.Wallet.GetZenPaymentAddress:output_type -> protocol.PaymentAddressMessage
	19,  // 369: protocol.Wallet.GetRcm:output_type -> protocol.BytesMessage
	61,  // 370: protocol.Wallet.IsSpend:output_type -> protocol.SpendResult
	34,  // 371: protocol.Wallet.CreateShieldedTransactionWithoutSpendAuthSig:output_type -> protocol.TransactionExtention
	19,  // 372: protocol.Wallet.GetShieldTransactionHash:output_type -> protocol.BytesMessage
	19,  // 373: protocol.Wallet.CreateSpendAuthSig:output_type -> protocol.BytesMessage
	19,  // 374: protocol.Wallet.CreateShieldNullifier:output_type -> protocol.BytesMessage
	66,  // 375: protocol.Wallet.CreateShieldedContractParameters:output_type -> protocol.ShieldedTRC20Parameters
	66,  // 376: protocol.Wallet.CreateShieldedContractParametersWithoutAsk:output_type -> protocol.ShieldedTRC20Parameters
	69,  // 377: protocol.Wallet.ScanShieldedTRC20NotesByIvk:output_type -> protocol.DecryptNotesTRC20
	69,  // 378: protocol.Wallet.ScanShieldedTRC20NotesByOvk:output_type -> protocol.DecryptNotesTRC20
	71,  // 379: protocol.Wallet.IsShieldedTRC20ContractNoteSpent:output_type -> protocol.NullifierResult
	19,  // 380: protocol.Wallet.GetTriggerInputForShieldedTRC20Contract:output_type -> protocol.BytesMessage
	34,  // 381: protocol.Wallet.CreateCommonTransaction:output_type -> protocol.TransactionExtention
	62,  // 382: protocol.Wallet.GetTransactionInfoByBlockNum:output_type -> protocol.TransactionInfoList
	18,  // 383: protocol.Wallet.GetBurnTrx:output_type -> protocol.NumberMessage
	87,  // 384: protocol.Wallet.GetTransactionFromPending:output_type -> protocol.Transaction
	11,  // 385: protocol.Wallet.GetTransactionListFromPending:output_type -> protocol.TransactionIdList
	18,  // 386: protocol.Wallet.GetPendingSize:output_type -> protocol.NumberMessage
	89,  // 387: protocol.WalletSolidity.GetAccount:output_type -> protocol.Account
	89,  // 388: protocol.WalletSolidity.GetAccountById:output_type -> protocol.Account
	5,   // 389: protocol.WalletSolidity.ListWitnesses:output_type -> protocol.WitnessList
	8,   // 390: protocol.WalletSolidity.GetAssetIssueList:output_type -> protocol.AssetIssueList
	8,   // 391: protocol.WalletSolidity.GetPaginatedAssetIssueList:output_type -> protocol.AssetIssueList
	85,  // 392: protocol.WalletSolidity.GetAssetIssueByName:output_type -> protocol.AssetIssueContract
	8,   // 393: protocol.WalletSolidity.GetAssetIssueListByName:output_type -> protocol.AssetIssueList
	85,  // 394: protocol.WalletSolidity.GetAssetIssueById:output_type -> protocol.AssetIssueContract
	86,  // 395: protocol.WalletSolidity.GetNowBlock:output_type -> protocol.Block
	35,  // 396: protocol.WalletSolidity.GetNowBlock2:output_type -> protocol.BlockExtention
	86,  // 397: protocol.WalletSolidity.GetBlockByNum:output_type -> protocol.Block
	35,  // 398: protocol.WalletSolidity.GetBlockByNum2:output_type -> protocol.BlockExtention
	18,  // 399: protocol.WalletSolidity.GetTransactionCountByBlockNum:output_type -> protocol.NumberMessage
	13,  // 400: protocol.WalletSolidity.GetDelegatedResource:output_type -> protocol.DelegatedResourceList
	143, // 401: protocol.WalletSolidity.GetDelegatedResourceAccountIndex:output_type -> protocol.DelegatedResourceAccountIndex
	84,  // 402: protocol.WalletSolidity.GetExchangeById:output_type -> protocol.Exchange
	7,   // 403: protocol.WalletSolidity.ListExchanges:output_type -> protocol.ExchangeList
	87,  // 404: protocol.WalletSolidity.GetTransactionById:output_type -> protocol.Transaction
	94,  // 405: protocol.WalletSolidity.GetTransactionInfoById:output_type -> protocol.TransactionInfo
	33,  // 406: protocol.WalletSolidity.GenerateAddress:output_type -> protocol.AddressPrKeyPairMessage
	146, // 407: protocol.WalletSolidity.GetMerkleTreeVoucherInfo:output_type -> protocol.IncrementalMerkleVoucherInfo
	44,  // 408: protocol.WalletSolidity.ScanNoteByIvk:output_type -> protocol.DecryptNotes
	45,  // 409: protocol.WalletSolidity.ScanAndMarkNoteByIvk:output_type -> protocol.DecryptNotesMarked
	44,  // 410: protocol.WalletSolidity.ScanNoteByOvk:output_type -> protocol.DecryptNotes
	61,  // 411: protocol.WalletSolidity.IsSpend:output_type -> protocol.SpendResult
	69,  // 412: protocol.WalletSolidity.ScanShieldedTRC20NotesByIvk:output_type -> protocol.DecryptNotesTRC20
	69,  // 413: protocol.WalletSolidity.ScanShieldedTRC20NotesByOvk:output_type -> protocol.DecryptNotesTRC20
	71,  // 414: protocol.WalletSolidity.IsShieldedTRC20ContractNoteSpent:output_type -> protocol.NullifierResult
	18,  // 415: protocol.WalletSolidity.GetRewardInfo:output_type -> protocol.NumberMessage
	18,  // 416: protocol.WalletSolidity.GetBrokerageInfo:output_type -> protocol.NumberMessage
	34,  // 417: protocol.WalletSolidity.TriggerConstantContract:output_type -> protocol.TransactionExtention
	62,  // 418: protocol.WalletSolidity.GetTransactionInfoByBlockNum:output_type -> protocol.TransactionInfoList
	137, // 419: protocol.WalletSolidity.GetMarketOrderById:output_type -> protocol.MarketOrder
	138, // 420: protocol.WalletSolidity.GetMarketOrderByAccount:output_type -> protocol.MarketOrderList
	139, // 421: protocol.WalletSolidity.GetMarketPriceByPair:output_type -> protocol.MarketPriceList
	138, // 422: protocol.WalletSolidity.GetMarketOrderListByPair:output_type -> protocol.MarketOrderList
	140, // 423: protocol.WalletSolidity.GetMarketPairList:output_type -> protocol.MarketOrderPairList
	18,  // 424: protocol.WalletSolidity.GetBurnTrx:output_type -> protocol.NumberMessage
	10,  // 425: protocol.WalletExtension.GetTransactionsFromThis:output_type -> protocol.TransactionList
	37,  // 426: protocol.WalletExtension.GetTransactionsFromThis2:output_type -> protocol.TransactionListExtention
	10,  // 427: protocol.WalletExtension.GetTransactionsToThis:output_type -> protocol.TransactionList
	37,  // 428: protocol.WalletExtension.GetTransactionsToThis2:output_type -> protocol.TransactionListExtention
	4,   // 429: protocol.Database.getBlockReference:output_type -> protocol.BlockReference
	147, // 430: protocol.Database.GetDynamicProperties:output_type -> protocol.DynamicProperties
	86,  // 431: protocol.Database.GetNowBlock:output_type -> protocol.Block
	86,  // 432: protocol.Database.GetBlockByNum:output_type -> protocol.Block
	148, // 433: protocol.Monitor.GetStatsInfo:output_type -> protocol.MetricsInfo
	248, // [248:434] is the sub-list for method output_type
	62,  // [62:248] is the sub-list for method input_type
	62,  // [62:62] is the sub-list for extension type_name
	62,  // [62:62] is the sub-list for extension extendee
	0,   // [0:62] is the sub-list for field type_name
}

func init() { file_api_api_proto_init() }
func file_api_api_proto_init() {
	if File_api_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Return); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WitnessList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposalList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetIssueList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionIdList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegatedResourceMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegatedResourceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumberMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BytesMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountPaginated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimePaginatedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountNetMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountResourceMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaginatedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EasyTransferMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EasyTransferAssetMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EasyTransferByPrivateMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EasyTransferAssetByPrivateMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EasyTransferResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressPrKeyPairMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionExtention); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockExtention); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockListExtention); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionListExtention); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockIncrementalMerkleTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionSignWeight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionApprovedList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IvkDecryptParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IvkDecryptAndMarkParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OvkDecryptParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecryptNotes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecryptNotesMarked); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Note); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpendNote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiveNote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateParametersWithoutAsk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpendAuthSigParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NfParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpandedSpendingKeyMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ViewingKeyMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncomingViewingKeyMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiversifierMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncomingViewingKeyDiversifierMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentAddressMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShieldedAddressInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpendResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionInfoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpendNoteTRC20); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateShieldedTRC20Parameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateShieldedTRC20ParametersWithoutAsk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShieldedTRC20Parameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IvkDecryptTRC20Parameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OvkDecryptTRC20Parameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecryptNotesTRC20); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NfTRC20Parameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NullifierResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShieldedTRC20TriggerContractParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionSignWeight_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionApprovedList_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecryptNotes_NoteTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecryptNotesMarked_NoteTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_api_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecryptNotesTRC20_NoteTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_api_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   79,
			NumExtensions: 0,
			NumServices:   6,
		},
		GoTypes:           file_api_api_proto_goTypes,
		DependencyIndexes: file_api_api_proto_depIdxs,
		EnumInfos:         file_api_api_proto_enumTypes,
		MessageInfos:      file_api_api_proto_msgTypes,
	}.Build()
	File_api_api_proto = out.File
	file_api_api_proto_rawDesc = nil
	file_api_api_proto_goTypes = nil
	file_api_api_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// WalletClient is the client API for Wallet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WalletClient interface {
	GetAccount(ctx context.Context, in *core.Account, opts ...grpc.CallOption) (*core.Account, error)
	GetAccountById(ctx context.Context, in *core.Account, opts ...grpc.CallOption) (*core.Account, error)
	GetAccountBalance(ctx context.Context, in *core.AccountBalanceRequest, opts ...grpc.CallOption) (*core.AccountBalanceResponse, error)
	GetBlockBalanceTrace(ctx context.Context, in *core.BlockBalanceTrace_BlockIdentifier, opts ...grpc.CallOption) (*core.BlockBalanceTrace, error)
	//Please use CreateTransaction2 instead of this function.
	CreateTransaction(ctx context.Context, in *core.TransferContract, opts ...grpc.CallOption) (*core.Transaction, error)
	//Use this function instead of CreateTransaction.
	CreateTransaction2(ctx context.Context, in *core.TransferContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	BroadcastTransaction(ctx context.Context, in *core.Transaction, opts ...grpc.CallOption) (*Return, error)
	//Please use UpdateAccount2 instead of this function.
	UpdateAccount(ctx context.Context, in *core.AccountUpdateContract, opts ...grpc.CallOption) (*core.Transaction, error)
	SetAccountId(ctx context.Context, in *core.SetAccountIdContract, opts ...grpc.CallOption) (*core.Transaction, error)
	//Use this function instead of UpdateAccount.
	UpdateAccount2(ctx context.Context, in *core.AccountUpdateContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	//Please use VoteWitnessAccount2 instead of this function.
	VoteWitnessAccount(ctx context.Context, in *core.VoteWitnessContract, opts ...grpc.CallOption) (*core.Transaction, error)
	//modify the consume_user_resource_percent
	UpdateSetting(ctx context.Context, in *core.UpdateSettingContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	//modify the energy_limit
	UpdateEnergyLimit(ctx context.Context, in *core.UpdateEnergyLimitContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	//Use this function instead of VoteWitnessAccount.
	VoteWitnessAccount2(ctx context.Context, in *core.VoteWitnessContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	//Please use CreateAssetIssue2 instead of this function.
	CreateAssetIssue(ctx context.Context, in *core.AssetIssueContract, opts ...grpc.CallOption) (*core.Transaction, error)
	//Use this function instead of CreateAssetIssue.
	CreateAssetIssue2(ctx context.Context, in *core.AssetIssueContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	//Please use UpdateWitness2 instead of this function.
	UpdateWitness(ctx context.Context, in *core.WitnessUpdateContract, opts ...grpc.CallOption) (*core.Transaction, error)
	//Use this function instead of UpdateWitness.
	UpdateWitness2(ctx context.Context, in *core.WitnessUpdateContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	//Please use CreateAccount2 instead of this function.
	CreateAccount(ctx context.Context, in *core.AccountCreateContract, opts ...grpc.CallOption) (*core.Transaction, error)
	//Use this function instead of CreateAccount.
	CreateAccount2(ctx context.Context, in *core.AccountCreateContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	//Please use CreateWitness2 instead of this function.
	CreateWitness(ctx context.Context, in *core.WitnessCreateContract, opts ...grpc.CallOption) (*core.Transaction, error)
	//Use this function instead of CreateWitness.
	CreateWitness2(ctx context.Context, in *core.WitnessCreateContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	//Please use TransferAsset2 instead of this function.
	TransferAsset(ctx context.Context, in *core.TransferAssetContract, opts ...grpc.CallOption) (*core.Transaction, error)
	//Use this function instead of TransferAsset.
	TransferAsset2(ctx context.Context, in *core.TransferAssetContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	//Please use ParticipateAssetIssue2 instead of this function.
	ParticipateAssetIssue(ctx context.Context, in *core.ParticipateAssetIssueContract, opts ...grpc.CallOption) (*core.Transaction, error)
	//Use this function instead of ParticipateAssetIssue.
	ParticipateAssetIssue2(ctx context.Context, in *core.ParticipateAssetIssueContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	//Please use FreezeBalance2 instead of this function.
	FreezeBalance(ctx context.Context, in *core.FreezeBalanceContract, opts ...grpc.CallOption) (*core.Transaction, error)
	//Use this function instead of FreezeBalance.
	FreezeBalance2(ctx context.Context, in *core.FreezeBalanceContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	//Please use UnfreezeBalance2 instead of this function.
	UnfreezeBalance(ctx context.Context, in *core.UnfreezeBalanceContract, opts ...grpc.CallOption) (*core.Transaction, error)
	//Use this function instead of UnfreezeBalance.
	UnfreezeBalance2(ctx context.Context, in *core.UnfreezeBalanceContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	//Please use UnfreezeAsset2 instead of this function.
	UnfreezeAsset(ctx context.Context, in *core.UnfreezeAssetContract, opts ...grpc.CallOption) (*core.Transaction, error)
	//Use this function instead of UnfreezeAsset.
	UnfreezeAsset2(ctx context.Context, in *core.UnfreezeAssetContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	//Please use WithdrawBalance2 instead of this function.
	WithdrawBalance(ctx context.Context, in *core.WithdrawBalanceContract, opts ...grpc.CallOption) (*core.Transaction, error)
	//Use this function instead of WithdrawBalance.
	WithdrawBalance2(ctx context.Context, in *core.WithdrawBalanceContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	//Please use UpdateAsset2 instead of this function.
	UpdateAsset(ctx context.Context, in *core.UpdateAssetContract, opts ...grpc.CallOption) (*core.Transaction, error)
	//Use this function instead of UpdateAsset.
	UpdateAsset2(ctx context.Context, in *core.UpdateAssetContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	ProposalCreate(ctx context.Context, in *core.ProposalCreateContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	ProposalApprove(ctx context.Context, in *core.ProposalApproveContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	ProposalDelete(ctx context.Context, in *core.ProposalDeleteContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	BuyStorage(ctx context.Context, in *core.BuyStorageContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	BuyStorageBytes(ctx context.Context, in *core.BuyStorageBytesContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	SellStorage(ctx context.Context, in *core.SellStorageContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	ExchangeCreate(ctx context.Context, in *core.ExchangeCreateContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	ExchangeInject(ctx context.Context, in *core.ExchangeInjectContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	ExchangeWithdraw(ctx context.Context, in *core.ExchangeWithdrawContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	ExchangeTransaction(ctx context.Context, in *core.ExchangeTransactionContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	MarketSellAsset(ctx context.Context, in *core.MarketSellAssetContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	MarketCancelOrder(ctx context.Context, in *core.MarketCancelOrderContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	GetMarketOrderById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.MarketOrder, error)
	GetMarketOrderByAccount(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.MarketOrderList, error)
	GetMarketPriceByPair(ctx context.Context, in *core.MarketOrderPair, opts ...grpc.CallOption) (*core.MarketPriceList, error)
	GetMarketOrderListByPair(ctx context.Context, in *core.MarketOrderPair, opts ...grpc.CallOption) (*core.MarketOrderList, error)
	GetMarketPairList(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*core.MarketOrderPairList, error)
	ListNodes(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*NodeList, error)
	GetAssetIssueByAccount(ctx context.Context, in *core.Account, opts ...grpc.CallOption) (*AssetIssueList, error)
	GetAccountNet(ctx context.Context, in *core.Account, opts ...grpc.CallOption) (*AccountNetMessage, error)
	GetAccountResource(ctx context.Context, in *core.Account, opts ...grpc.CallOption) (*AccountResourceMessage, error)
	GetAssetIssueByName(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.AssetIssueContract, error)
	GetAssetIssueListByName(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*AssetIssueList, error)
	GetAssetIssueById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.AssetIssueContract, error)
	//Please use GetNowBlock2 instead of this function.
	GetNowBlock(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*core.Block, error)
	//Use this function instead of GetNowBlock.
	GetNowBlock2(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*BlockExtention, error)
	//Please use GetBlockByNum2 instead of this function.
	GetBlockByNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*core.Block, error)
	//Use this function instead of GetBlockByNum.
	GetBlockByNum2(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*BlockExtention, error)
	GetTransactionCountByBlockNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*NumberMessage, error)
	GetBlockById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.Block, error)
	//Please use GetBlockByLimitNext2 instead of this function.
	GetBlockByLimitNext(ctx context.Context, in *BlockLimit, opts ...grpc.CallOption) (*BlockList, error)
	//Use this function instead of GetBlockByLimitNext.
	GetBlockByLimitNext2(ctx context.Context, in *BlockLimit, opts ...grpc.CallOption) (*BlockListExtention, error)
	//Please use GetBlockByLatestNum2 instead of this function.
	GetBlockByLatestNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*BlockList, error)
	//Use this function instead of GetBlockByLatestNum.
	GetBlockByLatestNum2(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*BlockListExtention, error)
	GetTransactionById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.Transaction, error)
	DeployContract(ctx context.Context, in *core.CreateSmartContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	GetContract(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.SmartContract, error)
	GetContractInfo(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.SmartContractDataWrapper, error)
	TriggerContract(ctx context.Context, in *core.TriggerSmartContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	TriggerConstantContract(ctx context.Context, in *core.TriggerSmartContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	ClearContractABI(ctx context.Context, in *core.ClearABIContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	ListWitnesses(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*WitnessList, error)
	GetDelegatedResource(ctx context.Context, in *DelegatedResourceMessage, opts ...grpc.CallOption) (*DelegatedResourceList, error)
	GetDelegatedResourceAccountIndex(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.DelegatedResourceAccountIndex, error)
	ListProposals(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*ProposalList, error)
	GetPaginatedProposalList(ctx context.Context, in *PaginatedMessage, opts ...grpc.CallOption) (*ProposalList, error)
	GetProposalById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.Proposal, error)
	ListExchanges(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*ExchangeList, error)
	GetPaginatedExchangeList(ctx context.Context, in *PaginatedMessage, opts ...grpc.CallOption) (*ExchangeList, error)
	GetExchangeById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.Exchange, error)
	GetChainParameters(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*core.ChainParameters, error)
	GetAssetIssueList(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*AssetIssueList, error)
	GetPaginatedAssetIssueList(ctx context.Context, in *PaginatedMessage, opts ...grpc.CallOption) (*AssetIssueList, error)
	TotalTransaction(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*NumberMessage, error)
	GetNextMaintenanceTime(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*NumberMessage, error)
	//Warning: do not invoke this interface provided by others.
	//Please use GetTransactionSign2 instead of this function.
	GetTransactionSign(ctx context.Context, in *core.TransactionSign, opts ...grpc.CallOption) (*core.Transaction, error)
	//Warning: do not invoke this interface provided by others.
	//Use this function instead of GetTransactionSign.
	GetTransactionSign2(ctx context.Context, in *core.TransactionSign, opts ...grpc.CallOption) (*TransactionExtention, error)
	//Warning: do not invoke this interface provided by others.
	CreateAddress(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*BytesMessage, error)
	//Warning: do not invoke this interface provided by others.
	EasyTransferAsset(ctx context.Context, in *EasyTransferAssetMessage, opts ...grpc.CallOption) (*EasyTransferResponse, error)
	//Warning: do not invoke this interface provided by others.
	EasyTransferAssetByPrivate(ctx context.Context, in *EasyTransferAssetByPrivateMessage, opts ...grpc.CallOption) (*EasyTransferResponse, error)
	//Warning: do not invoke this interface provided by others.
	EasyTransfer(ctx context.Context, in *EasyTransferMessage, opts ...grpc.CallOption) (*EasyTransferResponse, error)
	//Warning: do not invoke this interface provided by others.
	EasyTransferByPrivate(ctx context.Context, in *EasyTransferByPrivateMessage, opts ...grpc.CallOption) (*EasyTransferResponse, error)
	//Warning: do not invoke this interface provided by others.
	GenerateAddress(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*AddressPrKeyPairMessage, error)
	GetTransactionInfoById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.TransactionInfo, error)
	AccountPermissionUpdate(ctx context.Context, in *core.AccountPermissionUpdateContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	AddSign(ctx context.Context, in *core.TransactionSign, opts ...grpc.CallOption) (*TransactionExtention, error)
	GetTransactionSignWeight(ctx context.Context, in *core.Transaction, opts ...grpc.CallOption) (*TransactionSignWeight, error)
	GetTransactionApprovedList(ctx context.Context, in *core.Transaction, opts ...grpc.CallOption) (*TransactionApprovedList, error)
	GetNodeInfo(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*core.NodeInfo, error)
	GetRewardInfo(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*NumberMessage, error)
	GetBrokerageInfo(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*NumberMessage, error)
	UpdateBrokerage(ctx context.Context, in *core.UpdateBrokerageContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	// for shiededTransaction
	CreateShieldedTransaction(ctx context.Context, in *PrivateParameters, opts ...grpc.CallOption) (*TransactionExtention, error)
	GetMerkleTreeVoucherInfo(ctx context.Context, in *core.OutputPointInfo, opts ...grpc.CallOption) (*core.IncrementalMerkleVoucherInfo, error)
	ScanNoteByIvk(ctx context.Context, in *IvkDecryptParameters, opts ...grpc.CallOption) (*DecryptNotes, error)
	ScanAndMarkNoteByIvk(ctx context.Context, in *IvkDecryptAndMarkParameters, opts ...grpc.CallOption) (*DecryptNotesMarked, error)
	ScanNoteByOvk(ctx context.Context, in *OvkDecryptParameters, opts ...grpc.CallOption) (*DecryptNotes, error)
	GetSpendingKey(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*BytesMessage, error)
	GetExpandedSpendingKey(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*ExpandedSpendingKeyMessage, error)
	GetAkFromAsk(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*BytesMessage, error)
	GetNkFromNsk(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*BytesMessage, error)
	GetIncomingViewingKey(ctx context.Context, in *ViewingKeyMessage, opts ...grpc.CallOption) (*IncomingViewingKeyMessage, error)
	GetDiversifier(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*DiversifierMessage, error)
	GetNewShieldedAddress(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*ShieldedAddressInfo, error)
	GetZenPaymentAddress(ctx context.Context, in *IncomingViewingKeyDiversifierMessage, opts ...grpc.CallOption) (*PaymentAddressMessage, error)
	GetRcm(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*BytesMessage, error)
	IsSpend(ctx context.Context, in *NoteParameters, opts ...grpc.CallOption) (*SpendResult, error)
	CreateShieldedTransactionWithoutSpendAuthSig(ctx context.Context, in *PrivateParametersWithoutAsk, opts ...grpc.CallOption) (*TransactionExtention, error)
	GetShieldTransactionHash(ctx context.Context, in *core.Transaction, opts ...grpc.CallOption) (*BytesMessage, error)
	CreateSpendAuthSig(ctx context.Context, in *SpendAuthSigParameters, opts ...grpc.CallOption) (*BytesMessage, error)
	CreateShieldNullifier(ctx context.Context, in *NfParameters, opts ...grpc.CallOption) (*BytesMessage, error)
	//for shielded contract
	CreateShieldedContractParameters(ctx context.Context, in *PrivateShieldedTRC20Parameters, opts ...grpc.CallOption) (*ShieldedTRC20Parameters, error)
	CreateShieldedContractParametersWithoutAsk(ctx context.Context, in *PrivateShieldedTRC20ParametersWithoutAsk, opts ...grpc.CallOption) (*ShieldedTRC20Parameters, error)
	ScanShieldedTRC20NotesByIvk(ctx context.Context, in *IvkDecryptTRC20Parameters, opts ...grpc.CallOption) (*DecryptNotesTRC20, error)
	ScanShieldedTRC20NotesByOvk(ctx context.Context, in *OvkDecryptTRC20Parameters, opts ...grpc.CallOption) (*DecryptNotesTRC20, error)
	IsShieldedTRC20ContractNoteSpent(ctx context.Context, in *NfTRC20Parameters, opts ...grpc.CallOption) (*NullifierResult, error)
	GetTriggerInputForShieldedTRC20Contract(ctx context.Context, in *ShieldedTRC20TriggerContractParameters, opts ...grpc.CallOption) (*BytesMessage, error)
	CreateCommonTransaction(ctx context.Context, in *core.Transaction, opts ...grpc.CallOption) (*TransactionExtention, error)
	GetTransactionInfoByBlockNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*TransactionInfoList, error)
	GetBurnTrx(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*NumberMessage, error)
	GetTransactionFromPending(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.Transaction, error)
	GetTransactionListFromPending(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*TransactionIdList, error)
	GetPendingSize(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*NumberMessage, error)
}

type walletClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletClient(cc grpc.ClientConnInterface) WalletClient {
	return &walletClient{cc}
}

func (c *walletClient) GetAccount(ctx context.Context, in *core.Account, opts ...grpc.CallOption) (*core.Account, error) {
	out := new(core.Account)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetAccountById(ctx context.Context, in *core.Account, opts ...grpc.CallOption) (*core.Account, error) {
	out := new(core.Account)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetAccountById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetAccountBalance(ctx context.Context, in *core.AccountBalanceRequest, opts ...grpc.CallOption) (*core.AccountBalanceResponse, error) {
	out := new(core.AccountBalanceResponse)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetAccountBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetBlockBalanceTrace(ctx context.Context, in *core.BlockBalanceTrace_BlockIdentifier, opts ...grpc.CallOption) (*core.BlockBalanceTrace, error) {
	out := new(core.BlockBalanceTrace)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetBlockBalanceTrace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CreateTransaction(ctx context.Context, in *core.TransferContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/CreateTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CreateTransaction2(ctx context.Context, in *core.TransferContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/CreateTransaction2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) BroadcastTransaction(ctx context.Context, in *core.Transaction, opts ...grpc.CallOption) (*Return, error) {
	out := new(Return)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/BroadcastTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UpdateAccount(ctx context.Context, in *core.AccountUpdateContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/UpdateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) SetAccountId(ctx context.Context, in *core.SetAccountIdContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/SetAccountId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UpdateAccount2(ctx context.Context, in *core.AccountUpdateContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/UpdateAccount2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) VoteWitnessAccount(ctx context.Context, in *core.VoteWitnessContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/VoteWitnessAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UpdateSetting(ctx context.Context, in *core.UpdateSettingContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/UpdateSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UpdateEnergyLimit(ctx context.Context, in *core.UpdateEnergyLimitContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/UpdateEnergyLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) VoteWitnessAccount2(ctx context.Context, in *core.VoteWitnessContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/VoteWitnessAccount2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CreateAssetIssue(ctx context.Context, in *core.AssetIssueContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/CreateAssetIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CreateAssetIssue2(ctx context.Context, in *core.AssetIssueContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/CreateAssetIssue2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UpdateWitness(ctx context.Context, in *core.WitnessUpdateContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/UpdateWitness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UpdateWitness2(ctx context.Context, in *core.WitnessUpdateContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/UpdateWitness2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CreateAccount(ctx context.Context, in *core.AccountCreateContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CreateAccount2(ctx context.Context, in *core.AccountCreateContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/CreateAccount2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CreateWitness(ctx context.Context, in *core.WitnessCreateContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/CreateWitness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CreateWitness2(ctx context.Context, in *core.WitnessCreateContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/CreateWitness2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) TransferAsset(ctx context.Context, in *core.TransferAssetContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/TransferAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) TransferAsset2(ctx context.Context, in *core.TransferAssetContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/TransferAsset2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ParticipateAssetIssue(ctx context.Context, in *core.ParticipateAssetIssueContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/ParticipateAssetIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ParticipateAssetIssue2(ctx context.Context, in *core.ParticipateAssetIssueContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/ParticipateAssetIssue2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) FreezeBalance(ctx context.Context, in *core.FreezeBalanceContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/FreezeBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) FreezeBalance2(ctx context.Context, in *core.FreezeBalanceContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/FreezeBalance2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UnfreezeBalance(ctx context.Context, in *core.UnfreezeBalanceContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/UnfreezeBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UnfreezeBalance2(ctx context.Context, in *core.UnfreezeBalanceContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/UnfreezeBalance2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UnfreezeAsset(ctx context.Context, in *core.UnfreezeAssetContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/UnfreezeAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UnfreezeAsset2(ctx context.Context, in *core.UnfreezeAssetContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/UnfreezeAsset2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) WithdrawBalance(ctx context.Context, in *core.WithdrawBalanceContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/WithdrawBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) WithdrawBalance2(ctx context.Context, in *core.WithdrawBalanceContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/WithdrawBalance2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UpdateAsset(ctx context.Context, in *core.UpdateAssetContract, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/UpdateAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UpdateAsset2(ctx context.Context, in *core.UpdateAssetContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/UpdateAsset2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ProposalCreate(ctx context.Context, in *core.ProposalCreateContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/ProposalCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ProposalApprove(ctx context.Context, in *core.ProposalApproveContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/ProposalApprove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ProposalDelete(ctx context.Context, in *core.ProposalDeleteContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/ProposalDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) BuyStorage(ctx context.Context, in *core.BuyStorageContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/BuyStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) BuyStorageBytes(ctx context.Context, in *core.BuyStorageBytesContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/BuyStorageBytes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) SellStorage(ctx context.Context, in *core.SellStorageContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/SellStorage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ExchangeCreate(ctx context.Context, in *core.ExchangeCreateContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/ExchangeCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ExchangeInject(ctx context.Context, in *core.ExchangeInjectContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/ExchangeInject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ExchangeWithdraw(ctx context.Context, in *core.ExchangeWithdrawContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/ExchangeWithdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ExchangeTransaction(ctx context.Context, in *core.ExchangeTransactionContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/ExchangeTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) MarketSellAsset(ctx context.Context, in *core.MarketSellAssetContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/MarketSellAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) MarketCancelOrder(ctx context.Context, in *core.MarketCancelOrderContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/MarketCancelOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetMarketOrderById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.MarketOrder, error) {
	out := new(core.MarketOrder)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetMarketOrderById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetMarketOrderByAccount(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.MarketOrderList, error) {
	out := new(core.MarketOrderList)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetMarketOrderByAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetMarketPriceByPair(ctx context.Context, in *core.MarketOrderPair, opts ...grpc.CallOption) (*core.MarketPriceList, error) {
	out := new(core.MarketPriceList)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetMarketPriceByPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetMarketOrderListByPair(ctx context.Context, in *core.MarketOrderPair, opts ...grpc.CallOption) (*core.MarketOrderList, error) {
	out := new(core.MarketOrderList)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetMarketOrderListByPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetMarketPairList(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*core.MarketOrderPairList, error) {
	out := new(core.MarketOrderPairList)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetMarketPairList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ListNodes(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*NodeList, error) {
	out := new(NodeList)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/ListNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetAssetIssueByAccount(ctx context.Context, in *core.Account, opts ...grpc.CallOption) (*AssetIssueList, error) {
	out := new(AssetIssueList)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetAssetIssueByAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetAccountNet(ctx context.Context, in *core.Account, opts ...grpc.CallOption) (*AccountNetMessage, error) {
	out := new(AccountNetMessage)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetAccountNet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetAccountResource(ctx context.Context, in *core.Account, opts ...grpc.CallOption) (*AccountResourceMessage, error) {
	out := new(AccountResourceMessage)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetAccountResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetAssetIssueByName(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.AssetIssueContract, error) {
	out := new(core.AssetIssueContract)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetAssetIssueByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetAssetIssueListByName(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*AssetIssueList, error) {
	out := new(AssetIssueList)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetAssetIssueListByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetAssetIssueById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.AssetIssueContract, error) {
	out := new(core.AssetIssueContract)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetAssetIssueById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetNowBlock(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*core.Block, error) {
	out := new(core.Block)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetNowBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetNowBlock2(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*BlockExtention, error) {
	out := new(BlockExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetNowBlock2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetBlockByNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*core.Block, error) {
	out := new(core.Block)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetBlockByNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetBlockByNum2(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*BlockExtention, error) {
	out := new(BlockExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetBlockByNum2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetTransactionCountByBlockNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*NumberMessage, error) {
	out := new(NumberMessage)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetTransactionCountByBlockNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetBlockById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.Block, error) {
	out := new(core.Block)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetBlockById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetBlockByLimitNext(ctx context.Context, in *BlockLimit, opts ...grpc.CallOption) (*BlockList, error) {
	out := new(BlockList)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetBlockByLimitNext", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetBlockByLimitNext2(ctx context.Context, in *BlockLimit, opts ...grpc.CallOption) (*BlockListExtention, error) {
	out := new(BlockListExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetBlockByLimitNext2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetBlockByLatestNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*BlockList, error) {
	out := new(BlockList)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetBlockByLatestNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetBlockByLatestNum2(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*BlockListExtention, error) {
	out := new(BlockListExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetBlockByLatestNum2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetTransactionById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetTransactionById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) DeployContract(ctx context.Context, in *core.CreateSmartContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/DeployContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetContract(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.SmartContract, error) {
	out := new(core.SmartContract)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetContractInfo(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.SmartContractDataWrapper, error) {
	out := new(core.SmartContractDataWrapper)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetContractInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) TriggerContract(ctx context.Context, in *core.TriggerSmartContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/TriggerContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) TriggerConstantContract(ctx context.Context, in *core.TriggerSmartContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/TriggerConstantContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ClearContractABI(ctx context.Context, in *core.ClearABIContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/ClearContractABI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ListWitnesses(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*WitnessList, error) {
	out := new(WitnessList)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/ListWitnesses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetDelegatedResource(ctx context.Context, in *DelegatedResourceMessage, opts ...grpc.CallOption) (*DelegatedResourceList, error) {
	out := new(DelegatedResourceList)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetDelegatedResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetDelegatedResourceAccountIndex(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.DelegatedResourceAccountIndex, error) {
	out := new(core.DelegatedResourceAccountIndex)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetDelegatedResourceAccountIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ListProposals(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*ProposalList, error) {
	out := new(ProposalList)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/ListProposals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetPaginatedProposalList(ctx context.Context, in *PaginatedMessage, opts ...grpc.CallOption) (*ProposalList, error) {
	out := new(ProposalList)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetPaginatedProposalList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetProposalById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.Proposal, error) {
	out := new(core.Proposal)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetProposalById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ListExchanges(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*ExchangeList, error) {
	out := new(ExchangeList)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/ListExchanges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetPaginatedExchangeList(ctx context.Context, in *PaginatedMessage, opts ...grpc.CallOption) (*ExchangeList, error) {
	out := new(ExchangeList)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetPaginatedExchangeList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetExchangeById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.Exchange, error) {
	out := new(core.Exchange)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetExchangeById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetChainParameters(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*core.ChainParameters, error) {
	out := new(core.ChainParameters)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetChainParameters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetAssetIssueList(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*AssetIssueList, error) {
	out := new(AssetIssueList)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetAssetIssueList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetPaginatedAssetIssueList(ctx context.Context, in *PaginatedMessage, opts ...grpc.CallOption) (*AssetIssueList, error) {
	out := new(AssetIssueList)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetPaginatedAssetIssueList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) TotalTransaction(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*NumberMessage, error) {
	out := new(NumberMessage)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/TotalTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetNextMaintenanceTime(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*NumberMessage, error) {
	out := new(NumberMessage)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetNextMaintenanceTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetTransactionSign(ctx context.Context, in *core.TransactionSign, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetTransactionSign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetTransactionSign2(ctx context.Context, in *core.TransactionSign, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetTransactionSign2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CreateAddress(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*BytesMessage, error) {
	out := new(BytesMessage)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/CreateAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) EasyTransferAsset(ctx context.Context, in *EasyTransferAssetMessage, opts ...grpc.CallOption) (*EasyTransferResponse, error) {
	out := new(EasyTransferResponse)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/EasyTransferAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) EasyTransferAssetByPrivate(ctx context.Context, in *EasyTransferAssetByPrivateMessage, opts ...grpc.CallOption) (*EasyTransferResponse, error) {
	out := new(EasyTransferResponse)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/EasyTransferAssetByPrivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) EasyTransfer(ctx context.Context, in *EasyTransferMessage, opts ...grpc.CallOption) (*EasyTransferResponse, error) {
	out := new(EasyTransferResponse)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/EasyTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) EasyTransferByPrivate(ctx context.Context, in *EasyTransferByPrivateMessage, opts ...grpc.CallOption) (*EasyTransferResponse, error) {
	out := new(EasyTransferResponse)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/EasyTransferByPrivate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GenerateAddress(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*AddressPrKeyPairMessage, error) {
	out := new(AddressPrKeyPairMessage)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GenerateAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetTransactionInfoById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.TransactionInfo, error) {
	out := new(core.TransactionInfo)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetTransactionInfoById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) AccountPermissionUpdate(ctx context.Context, in *core.AccountPermissionUpdateContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/AccountPermissionUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) AddSign(ctx context.Context, in *core.TransactionSign, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/AddSign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetTransactionSignWeight(ctx context.Context, in *core.Transaction, opts ...grpc.CallOption) (*TransactionSignWeight, error) {
	out := new(TransactionSignWeight)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetTransactionSignWeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetTransactionApprovedList(ctx context.Context, in *core.Transaction, opts ...grpc.CallOption) (*TransactionApprovedList, error) {
	out := new(TransactionApprovedList)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetTransactionApprovedList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetNodeInfo(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*core.NodeInfo, error) {
	out := new(core.NodeInfo)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetNodeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetRewardInfo(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*NumberMessage, error) {
	out := new(NumberMessage)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetRewardInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetBrokerageInfo(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*NumberMessage, error) {
	out := new(NumberMessage)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetBrokerageInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) UpdateBrokerage(ctx context.Context, in *core.UpdateBrokerageContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/UpdateBrokerage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CreateShieldedTransaction(ctx context.Context, in *PrivateParameters, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/CreateShieldedTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetMerkleTreeVoucherInfo(ctx context.Context, in *core.OutputPointInfo, opts ...grpc.CallOption) (*core.IncrementalMerkleVoucherInfo, error) {
	out := new(core.IncrementalMerkleVoucherInfo)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetMerkleTreeVoucherInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ScanNoteByIvk(ctx context.Context, in *IvkDecryptParameters, opts ...grpc.CallOption) (*DecryptNotes, error) {
	out := new(DecryptNotes)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/ScanNoteByIvk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ScanAndMarkNoteByIvk(ctx context.Context, in *IvkDecryptAndMarkParameters, opts ...grpc.CallOption) (*DecryptNotesMarked, error) {
	out := new(DecryptNotesMarked)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/ScanAndMarkNoteByIvk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ScanNoteByOvk(ctx context.Context, in *OvkDecryptParameters, opts ...grpc.CallOption) (*DecryptNotes, error) {
	out := new(DecryptNotes)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/ScanNoteByOvk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetSpendingKey(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*BytesMessage, error) {
	out := new(BytesMessage)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetSpendingKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetExpandedSpendingKey(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*ExpandedSpendingKeyMessage, error) {
	out := new(ExpandedSpendingKeyMessage)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetExpandedSpendingKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetAkFromAsk(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*BytesMessage, error) {
	out := new(BytesMessage)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetAkFromAsk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetNkFromNsk(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*BytesMessage, error) {
	out := new(BytesMessage)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetNkFromNsk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetIncomingViewingKey(ctx context.Context, in *ViewingKeyMessage, opts ...grpc.CallOption) (*IncomingViewingKeyMessage, error) {
	out := new(IncomingViewingKeyMessage)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetIncomingViewingKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetDiversifier(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*DiversifierMessage, error) {
	out := new(DiversifierMessage)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetDiversifier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetNewShieldedAddress(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*ShieldedAddressInfo, error) {
	out := new(ShieldedAddressInfo)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetNewShieldedAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetZenPaymentAddress(ctx context.Context, in *IncomingViewingKeyDiversifierMessage, opts ...grpc.CallOption) (*PaymentAddressMessage, error) {
	out := new(PaymentAddressMessage)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetZenPaymentAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetRcm(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*BytesMessage, error) {
	out := new(BytesMessage)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetRcm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) IsSpend(ctx context.Context, in *NoteParameters, opts ...grpc.CallOption) (*SpendResult, error) {
	out := new(SpendResult)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/IsSpend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CreateShieldedTransactionWithoutSpendAuthSig(ctx context.Context, in *PrivateParametersWithoutAsk, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/CreateShieldedTransactionWithoutSpendAuthSig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetShieldTransactionHash(ctx context.Context, in *core.Transaction, opts ...grpc.CallOption) (*BytesMessage, error) {
	out := new(BytesMessage)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetShieldTransactionHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CreateSpendAuthSig(ctx context.Context, in *SpendAuthSigParameters, opts ...grpc.CallOption) (*BytesMessage, error) {
	out := new(BytesMessage)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/CreateSpendAuthSig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CreateShieldNullifier(ctx context.Context, in *NfParameters, opts ...grpc.CallOption) (*BytesMessage, error) {
	out := new(BytesMessage)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/CreateShieldNullifier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CreateShieldedContractParameters(ctx context.Context, in *PrivateShieldedTRC20Parameters, opts ...grpc.CallOption) (*ShieldedTRC20Parameters, error) {
	out := new(ShieldedTRC20Parameters)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/CreateShieldedContractParameters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CreateShieldedContractParametersWithoutAsk(ctx context.Context, in *PrivateShieldedTRC20ParametersWithoutAsk, opts ...grpc.CallOption) (*ShieldedTRC20Parameters, error) {
	out := new(ShieldedTRC20Parameters)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/CreateShieldedContractParametersWithoutAsk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ScanShieldedTRC20NotesByIvk(ctx context.Context, in *IvkDecryptTRC20Parameters, opts ...grpc.CallOption) (*DecryptNotesTRC20, error) {
	out := new(DecryptNotesTRC20)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/ScanShieldedTRC20NotesByIvk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ScanShieldedTRC20NotesByOvk(ctx context.Context, in *OvkDecryptTRC20Parameters, opts ...grpc.CallOption) (*DecryptNotesTRC20, error) {
	out := new(DecryptNotesTRC20)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/ScanShieldedTRC20NotesByOvk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) IsShieldedTRC20ContractNoteSpent(ctx context.Context, in *NfTRC20Parameters, opts ...grpc.CallOption) (*NullifierResult, error) {
	out := new(NullifierResult)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/IsShieldedTRC20ContractNoteSpent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetTriggerInputForShieldedTRC20Contract(ctx context.Context, in *ShieldedTRC20TriggerContractParameters, opts ...grpc.CallOption) (*BytesMessage, error) {
	out := new(BytesMessage)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetTriggerInputForShieldedTRC20Contract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CreateCommonTransaction(ctx context.Context, in *core.Transaction, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/CreateCommonTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetTransactionInfoByBlockNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*TransactionInfoList, error) {
	out := new(TransactionInfoList)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetTransactionInfoByBlockNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetBurnTrx(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*NumberMessage, error) {
	out := new(NumberMessage)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetBurnTrx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetTransactionFromPending(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetTransactionFromPending", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetTransactionListFromPending(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*TransactionIdList, error) {
	out := new(TransactionIdList)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetTransactionListFromPending", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) GetPendingSize(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*NumberMessage, error) {
	out := new(NumberMessage)
	err := c.cc.Invoke(ctx, "/protocol.Wallet/GetPendingSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletServer is the server API for Wallet service.
type WalletServer interface {
	GetAccount(context.Context, *core.Account) (*core.Account, error)
	GetAccountById(context.Context, *core.Account) (*core.Account, error)
	GetAccountBalance(context.Context, *core.AccountBalanceRequest) (*core.AccountBalanceResponse, error)
	GetBlockBalanceTrace(context.Context, *core.BlockBalanceTrace_BlockIdentifier) (*core.BlockBalanceTrace, error)
	//Please use CreateTransaction2 instead of this function.
	CreateTransaction(context.Context, *core.TransferContract) (*core.Transaction, error)
	//Use this function instead of CreateTransaction.
	CreateTransaction2(context.Context, *core.TransferContract) (*TransactionExtention, error)
	BroadcastTransaction(context.Context, *core.Transaction) (*Return, error)
	//Please use UpdateAccount2 instead of this function.
	UpdateAccount(context.Context, *core.AccountUpdateContract) (*core.Transaction, error)
	SetAccountId(context.Context, *core.SetAccountIdContract) (*core.Transaction, error)
	//Use this function instead of UpdateAccount.
	UpdateAccount2(context.Context, *core.AccountUpdateContract) (*TransactionExtention, error)
	//Please use VoteWitnessAccount2 instead of this function.
	VoteWitnessAccount(context.Context, *core.VoteWitnessContract) (*core.Transaction, error)
	//modify the consume_user_resource_percent
	UpdateSetting(context.Context, *core.UpdateSettingContract) (*TransactionExtention, error)
	//modify the energy_limit
	UpdateEnergyLimit(context.Context, *core.UpdateEnergyLimitContract) (*TransactionExtention, error)
	//Use this function instead of VoteWitnessAccount.
	VoteWitnessAccount2(context.Context, *core.VoteWitnessContract) (*TransactionExtention, error)
	//Please use CreateAssetIssue2 instead of this function.
	CreateAssetIssue(context.Context, *core.AssetIssueContract) (*core.Transaction, error)
	//Use this function instead of CreateAssetIssue.
	CreateAssetIssue2(context.Context, *core.AssetIssueContract) (*TransactionExtention, error)
	//Please use UpdateWitness2 instead of this function.
	UpdateWitness(context.Context, *core.WitnessUpdateContract) (*core.Transaction, error)
	//Use this function instead of UpdateWitness.
	UpdateWitness2(context.Context, *core.WitnessUpdateContract) (*TransactionExtention, error)
	//Please use CreateAccount2 instead of this function.
	CreateAccount(context.Context, *core.AccountCreateContract) (*core.Transaction, error)
	//Use this function instead of CreateAccount.
	CreateAccount2(context.Context, *core.AccountCreateContract) (*TransactionExtention, error)
	//Please use CreateWitness2 instead of this function.
	CreateWitness(context.Context, *core.WitnessCreateContract) (*core.Transaction, error)
	//Use this function instead of CreateWitness.
	CreateWitness2(context.Context, *core.WitnessCreateContract) (*TransactionExtention, error)
	//Please use TransferAsset2 instead of this function.
	TransferAsset(context.Context, *core.TransferAssetContract) (*core.Transaction, error)
	//Use this function instead of TransferAsset.
	TransferAsset2(context.Context, *core.TransferAssetContract) (*TransactionExtention, error)
	//Please use ParticipateAssetIssue2 instead of this function.
	ParticipateAssetIssue(context.Context, *core.ParticipateAssetIssueContract) (*core.Transaction, error)
	//Use this function instead of ParticipateAssetIssue.
	ParticipateAssetIssue2(context.Context, *core.ParticipateAssetIssueContract) (*TransactionExtention, error)
	//Please use FreezeBalance2 instead of this function.
	FreezeBalance(context.Context, *core.FreezeBalanceContract) (*core.Transaction, error)
	//Use this function instead of FreezeBalance.
	FreezeBalance2(context.Context, *core.FreezeBalanceContract) (*TransactionExtention, error)
	//Please use UnfreezeBalance2 instead of this function.
	UnfreezeBalance(context.Context, *core.UnfreezeBalanceContract) (*core.Transaction, error)
	//Use this function instead of UnfreezeBalance.
	UnfreezeBalance2(context.Context, *core.UnfreezeBalanceContract) (*TransactionExtention, error)
	//Please use UnfreezeAsset2 instead of this function.
	UnfreezeAsset(context.Context, *core.UnfreezeAssetContract) (*core.Transaction, error)
	//Use this function instead of UnfreezeAsset.
	UnfreezeAsset2(context.Context, *core.UnfreezeAssetContract) (*TransactionExtention, error)
	//Please use WithdrawBalance2 instead of this function.
	WithdrawBalance(context.Context, *core.WithdrawBalanceContract) (*core.Transaction, error)
	//Use this function instead of WithdrawBalance.
	WithdrawBalance2(context.Context, *core.WithdrawBalanceContract) (*TransactionExtention, error)
	//Please use UpdateAsset2 instead of this function.
	UpdateAsset(context.Context, *core.UpdateAssetContract) (*core.Transaction, error)
	//Use this function instead of UpdateAsset.
	UpdateAsset2(context.Context, *core.UpdateAssetContract) (*TransactionExtention, error)
	ProposalCreate(context.Context, *core.ProposalCreateContract) (*TransactionExtention, error)
	ProposalApprove(context.Context, *core.ProposalApproveContract) (*TransactionExtention, error)
	ProposalDelete(context.Context, *core.ProposalDeleteContract) (*TransactionExtention, error)
	BuyStorage(context.Context, *core.BuyStorageContract) (*TransactionExtention, error)
	BuyStorageBytes(context.Context, *core.BuyStorageBytesContract) (*TransactionExtention, error)
	SellStorage(context.Context, *core.SellStorageContract) (*TransactionExtention, error)
	ExchangeCreate(context.Context, *core.ExchangeCreateContract) (*TransactionExtention, error)
	ExchangeInject(context.Context, *core.ExchangeInjectContract) (*TransactionExtention, error)
	ExchangeWithdraw(context.Context, *core.ExchangeWithdrawContract) (*TransactionExtention, error)
	ExchangeTransaction(context.Context, *core.ExchangeTransactionContract) (*TransactionExtention, error)
	MarketSellAsset(context.Context, *core.MarketSellAssetContract) (*TransactionExtention, error)
	MarketCancelOrder(context.Context, *core.MarketCancelOrderContract) (*TransactionExtention, error)
	GetMarketOrderById(context.Context, *BytesMessage) (*core.MarketOrder, error)
	GetMarketOrderByAccount(context.Context, *BytesMessage) (*core.MarketOrderList, error)
	GetMarketPriceByPair(context.Context, *core.MarketOrderPair) (*core.MarketPriceList, error)
	GetMarketOrderListByPair(context.Context, *core.MarketOrderPair) (*core.MarketOrderList, error)
	GetMarketPairList(context.Context, *EmptyMessage) (*core.MarketOrderPairList, error)
	ListNodes(context.Context, *EmptyMessage) (*NodeList, error)
	GetAssetIssueByAccount(context.Context, *core.Account) (*AssetIssueList, error)
	GetAccountNet(context.Context, *core.Account) (*AccountNetMessage, error)
	GetAccountResource(context.Context, *core.Account) (*AccountResourceMessage, error)
	GetAssetIssueByName(context.Context, *BytesMessage) (*core.AssetIssueContract, error)
	GetAssetIssueListByName(context.Context, *BytesMessage) (*AssetIssueList, error)
	GetAssetIssueById(context.Context, *BytesMessage) (*core.AssetIssueContract, error)
	//Please use GetNowBlock2 instead of this function.
	GetNowBlock(context.Context, *EmptyMessage) (*core.Block, error)
	//Use this function instead of GetNowBlock.
	GetNowBlock2(context.Context, *EmptyMessage) (*BlockExtention, error)
	//Please use GetBlockByNum2 instead of this function.
	GetBlockByNum(context.Context, *NumberMessage) (*core.Block, error)
	//Use this function instead of GetBlockByNum.
	GetBlockByNum2(context.Context, *NumberMessage) (*BlockExtention, error)
	GetTransactionCountByBlockNum(context.Context, *NumberMessage) (*NumberMessage, error)
	GetBlockById(context.Context, *BytesMessage) (*core.Block, error)
	//Please use GetBlockByLimitNext2 instead of this function.
	GetBlockByLimitNext(context.Context, *BlockLimit) (*BlockList, error)
	//Use this function instead of GetBlockByLimitNext.
	GetBlockByLimitNext2(context.Context, *BlockLimit) (*BlockListExtention, error)
	//Please use GetBlockByLatestNum2 instead of this function.
	GetBlockByLatestNum(context.Context, *NumberMessage) (*BlockList, error)
	//Use this function instead of GetBlockByLatestNum.
	GetBlockByLatestNum2(context.Context, *NumberMessage) (*BlockListExtention, error)
	GetTransactionById(context.Context, *BytesMessage) (*core.Transaction, error)
	DeployContract(context.Context, *core.CreateSmartContract) (*TransactionExtention, error)
	GetContract(context.Context, *BytesMessage) (*core.SmartContract, error)
	GetContractInfo(context.Context, *BytesMessage) (*core.SmartContractDataWrapper, error)
	TriggerContract(context.Context, *core.TriggerSmartContract) (*TransactionExtention, error)
	TriggerConstantContract(context.Context, *core.TriggerSmartContract) (*TransactionExtention, error)
	ClearContractABI(context.Context, *core.ClearABIContract) (*TransactionExtention, error)
	ListWitnesses(context.Context, *EmptyMessage) (*WitnessList, error)
	GetDelegatedResource(context.Context, *DelegatedResourceMessage) (*DelegatedResourceList, error)
	GetDelegatedResourceAccountIndex(context.Context, *BytesMessage) (*core.DelegatedResourceAccountIndex, error)
	ListProposals(context.Context, *EmptyMessage) (*ProposalList, error)
	GetPaginatedProposalList(context.Context, *PaginatedMessage) (*ProposalList, error)
	GetProposalById(context.Context, *BytesMessage) (*core.Proposal, error)
	ListExchanges(context.Context, *EmptyMessage) (*ExchangeList, error)
	GetPaginatedExchangeList(context.Context, *PaginatedMessage) (*ExchangeList, error)
	GetExchangeById(context.Context, *BytesMessage) (*core.Exchange, error)
	GetChainParameters(context.Context, *EmptyMessage) (*core.ChainParameters, error)
	GetAssetIssueList(context.Context, *EmptyMessage) (*AssetIssueList, error)
	GetPaginatedAssetIssueList(context.Context, *PaginatedMessage) (*AssetIssueList, error)
	TotalTransaction(context.Context, *EmptyMessage) (*NumberMessage, error)
	GetNextMaintenanceTime(context.Context, *EmptyMessage) (*NumberMessage, error)
	//Warning: do not invoke this interface provided by others.
	//Please use GetTransactionSign2 instead of this function.
	GetTransactionSign(context.Context, *core.TransactionSign) (*core.Transaction, error)
	//Warning: do not invoke this interface provided by others.
	//Use this function instead of GetTransactionSign.
	GetTransactionSign2(context.Context, *core.TransactionSign) (*TransactionExtention, error)
	//Warning: do not invoke this interface provided by others.
	CreateAddress(context.Context, *BytesMessage) (*BytesMessage, error)
	//Warning: do not invoke this interface provided by others.
	EasyTransferAsset(context.Context, *EasyTransferAssetMessage) (*EasyTransferResponse, error)
	//Warning: do not invoke this interface provided by others.
	EasyTransferAssetByPrivate(context.Context, *EasyTransferAssetByPrivateMessage) (*EasyTransferResponse, error)
	//Warning: do not invoke this interface provided by others.
	EasyTransfer(context.Context, *EasyTransferMessage) (*EasyTransferResponse, error)
	//Warning: do not invoke this interface provided by others.
	EasyTransferByPrivate(context.Context, *EasyTransferByPrivateMessage) (*EasyTransferResponse, error)
	//Warning: do not invoke this interface provided by others.
	GenerateAddress(context.Context, *EmptyMessage) (*AddressPrKeyPairMessage, error)
	GetTransactionInfoById(context.Context, *BytesMessage) (*core.TransactionInfo, error)
	AccountPermissionUpdate(context.Context, *core.AccountPermissionUpdateContract) (*TransactionExtention, error)
	AddSign(context.Context, *core.TransactionSign) (*TransactionExtention, error)
	GetTransactionSignWeight(context.Context, *core.Transaction) (*TransactionSignWeight, error)
	GetTransactionApprovedList(context.Context, *core.Transaction) (*TransactionApprovedList, error)
	GetNodeInfo(context.Context, *EmptyMessage) (*core.NodeInfo, error)
	GetRewardInfo(context.Context, *BytesMessage) (*NumberMessage, error)
	GetBrokerageInfo(context.Context, *BytesMessage) (*NumberMessage, error)
	UpdateBrokerage(context.Context, *core.UpdateBrokerageContract) (*TransactionExtention, error)
	// for shiededTransaction
	CreateShieldedTransaction(context.Context, *PrivateParameters) (*TransactionExtention, error)
	GetMerkleTreeVoucherInfo(context.Context, *core.OutputPointInfo) (*core.IncrementalMerkleVoucherInfo, error)
	ScanNoteByIvk(context.Context, *IvkDecryptParameters) (*DecryptNotes, error)
	ScanAndMarkNoteByIvk(context.Context, *IvkDecryptAndMarkParameters) (*DecryptNotesMarked, error)
	ScanNoteByOvk(context.Context, *OvkDecryptParameters) (*DecryptNotes, error)
	GetSpendingKey(context.Context, *EmptyMessage) (*BytesMessage, error)
	GetExpandedSpendingKey(context.Context, *BytesMessage) (*ExpandedSpendingKeyMessage, error)
	GetAkFromAsk(context.Context, *BytesMessage) (*BytesMessage, error)
	GetNkFromNsk(context.Context, *BytesMessage) (*BytesMessage, error)
	GetIncomingViewingKey(context.Context, *ViewingKeyMessage) (*IncomingViewingKeyMessage, error)
	GetDiversifier(context.Context, *EmptyMessage) (*DiversifierMessage, error)
	GetNewShieldedAddress(context.Context, *EmptyMessage) (*ShieldedAddressInfo, error)
	GetZenPaymentAddress(context.Context, *IncomingViewingKeyDiversifierMessage) (*PaymentAddressMessage, error)
	GetRcm(context.Context, *EmptyMessage) (*BytesMessage, error)
	IsSpend(context.Context, *NoteParameters) (*SpendResult, error)
	CreateShieldedTransactionWithoutSpendAuthSig(context.Context, *PrivateParametersWithoutAsk) (*TransactionExtention, error)
	GetShieldTransactionHash(context.Context, *core.Transaction) (*BytesMessage, error)
	CreateSpendAuthSig(context.Context, *SpendAuthSigParameters) (*BytesMessage, error)
	CreateShieldNullifier(context.Context, *NfParameters) (*BytesMessage, error)
	//for shielded contract
	CreateShieldedContractParameters(context.Context, *PrivateShieldedTRC20Parameters) (*ShieldedTRC20Parameters, error)
	CreateShieldedContractParametersWithoutAsk(context.Context, *PrivateShieldedTRC20ParametersWithoutAsk) (*ShieldedTRC20Parameters, error)
	ScanShieldedTRC20NotesByIvk(context.Context, *IvkDecryptTRC20Parameters) (*DecryptNotesTRC20, error)
	ScanShieldedTRC20NotesByOvk(context.Context, *OvkDecryptTRC20Parameters) (*DecryptNotesTRC20, error)
	IsShieldedTRC20ContractNoteSpent(context.Context, *NfTRC20Parameters) (*NullifierResult, error)
	GetTriggerInputForShieldedTRC20Contract(context.Context, *ShieldedTRC20TriggerContractParameters) (*BytesMessage, error)
	CreateCommonTransaction(context.Context, *core.Transaction) (*TransactionExtention, error)
	GetTransactionInfoByBlockNum(context.Context, *NumberMessage) (*TransactionInfoList, error)
	GetBurnTrx(context.Context, *EmptyMessage) (*NumberMessage, error)
	GetTransactionFromPending(context.Context, *BytesMessage) (*core.Transaction, error)
	GetTransactionListFromPending(context.Context, *EmptyMessage) (*TransactionIdList, error)
	GetPendingSize(context.Context, *EmptyMessage) (*NumberMessage, error)
}

// UnimplementedWalletServer can be embedded to have forward compatible implementations.
type UnimplementedWalletServer struct {
}

func (*UnimplementedWalletServer) GetAccount(context.Context, *core.Account) (*core.Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (*UnimplementedWalletServer) GetAccountById(context.Context, *core.Account) (*core.Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountById not implemented")
}
func (*UnimplementedWalletServer) GetAccountBalance(context.Context, *core.AccountBalanceRequest) (*core.AccountBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountBalance not implemented")
}
func (*UnimplementedWalletServer) GetBlockBalanceTrace(context.Context, *core.BlockBalanceTrace_BlockIdentifier) (*core.BlockBalanceTrace, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockBalanceTrace not implemented")
}
func (*UnimplementedWalletServer) CreateTransaction(context.Context, *core.TransferContract) (*core.Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction not implemented")
}
func (*UnimplementedWalletServer) CreateTransaction2(context.Context, *core.TransferContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction2 not implemented")
}
func (*UnimplementedWalletServer) BroadcastTransaction(context.Context, *core.Transaction) (*Return, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastTransaction not implemented")
}
func (*UnimplementedWalletServer) UpdateAccount(context.Context, *core.AccountUpdateContract) (*core.Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (*UnimplementedWalletServer) SetAccountId(context.Context, *core.SetAccountIdContract) (*core.Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAccountId not implemented")
}
func (*UnimplementedWalletServer) UpdateAccount2(context.Context, *core.AccountUpdateContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount2 not implemented")
}
func (*UnimplementedWalletServer) VoteWitnessAccount(context.Context, *core.VoteWitnessContract) (*core.Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteWitnessAccount not implemented")
}
func (*UnimplementedWalletServer) UpdateSetting(context.Context, *core.UpdateSettingContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSetting not implemented")
}
func (*UnimplementedWalletServer) UpdateEnergyLimit(context.Context, *core.UpdateEnergyLimitContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEnergyLimit not implemented")
}
func (*UnimplementedWalletServer) VoteWitnessAccount2(context.Context, *core.VoteWitnessContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteWitnessAccount2 not implemented")
}
func (*UnimplementedWalletServer) CreateAssetIssue(context.Context, *core.AssetIssueContract) (*core.Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAssetIssue not implemented")
}
func (*UnimplementedWalletServer) CreateAssetIssue2(context.Context, *core.AssetIssueContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAssetIssue2 not implemented")
}
func (*UnimplementedWalletServer) UpdateWitness(context.Context, *core.WitnessUpdateContract) (*core.Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWitness not implemented")
}
func (*UnimplementedWalletServer) UpdateWitness2(context.Context, *core.WitnessUpdateContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWitness2 not implemented")
}
func (*UnimplementedWalletServer) CreateAccount(context.Context, *core.AccountCreateContract) (*core.Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (*UnimplementedWalletServer) CreateAccount2(context.Context, *core.AccountCreateContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount2 not implemented")
}
func (*UnimplementedWalletServer) CreateWitness(context.Context, *core.WitnessCreateContract) (*core.Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWitness not implemented")
}
func (*UnimplementedWalletServer) CreateWitness2(context.Context, *core.WitnessCreateContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWitness2 not implemented")
}
func (*UnimplementedWalletServer) TransferAsset(context.Context, *core.TransferAssetContract) (*core.Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferAsset not implemented")
}
func (*UnimplementedWalletServer) TransferAsset2(context.Context, *core.TransferAssetContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferAsset2 not implemented")
}
func (*UnimplementedWalletServer) ParticipateAssetIssue(context.Context, *core.ParticipateAssetIssueContract) (*core.Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParticipateAssetIssue not implemented")
}
func (*UnimplementedWalletServer) ParticipateAssetIssue2(context.Context, *core.ParticipateAssetIssueContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParticipateAssetIssue2 not implemented")
}
func (*UnimplementedWalletServer) FreezeBalance(context.Context, *core.FreezeBalanceContract) (*core.Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FreezeBalance not implemented")
}
func (*UnimplementedWalletServer) FreezeBalance2(context.Context, *core.FreezeBalanceContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FreezeBalance2 not implemented")
}
func (*UnimplementedWalletServer) UnfreezeBalance(context.Context, *core.UnfreezeBalanceContract) (*core.Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnfreezeBalance not implemented")
}
func (*UnimplementedWalletServer) UnfreezeBalance2(context.Context, *core.UnfreezeBalanceContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnfreezeBalance2 not implemented")
}
func (*UnimplementedWalletServer) UnfreezeAsset(context.Context, *core.UnfreezeAssetContract) (*core.Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnfreezeAsset not implemented")
}
func (*UnimplementedWalletServer) UnfreezeAsset2(context.Context, *core.UnfreezeAssetContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnfreezeAsset2 not implemented")
}
func (*UnimplementedWalletServer) WithdrawBalance(context.Context, *core.WithdrawBalanceContract) (*core.Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawBalance not implemented")
}
func (*UnimplementedWalletServer) WithdrawBalance2(context.Context, *core.WithdrawBalanceContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawBalance2 not implemented")
}
func (*UnimplementedWalletServer) UpdateAsset(context.Context, *core.UpdateAssetContract) (*core.Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAsset not implemented")
}
func (*UnimplementedWalletServer) UpdateAsset2(context.Context, *core.UpdateAssetContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAsset2 not implemented")
}
func (*UnimplementedWalletServer) ProposalCreate(context.Context, *core.ProposalCreateContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposalCreate not implemented")
}
func (*UnimplementedWalletServer) ProposalApprove(context.Context, *core.ProposalApproveContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposalApprove not implemented")
}
func (*UnimplementedWalletServer) ProposalDelete(context.Context, *core.ProposalDeleteContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposalDelete not implemented")
}
func (*UnimplementedWalletServer) BuyStorage(context.Context, *core.BuyStorageContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyStorage not implemented")
}
func (*UnimplementedWalletServer) BuyStorageBytes(context.Context, *core.BuyStorageBytesContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BuyStorageBytes not implemented")
}
func (*UnimplementedWalletServer) SellStorage(context.Context, *core.SellStorageContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SellStorage not implemented")
}
func (*UnimplementedWalletServer) ExchangeCreate(context.Context, *core.ExchangeCreateContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeCreate not implemented")
}
func (*UnimplementedWalletServer) ExchangeInject(context.Context, *core.ExchangeInjectContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeInject not implemented")
}
func (*UnimplementedWalletServer) ExchangeWithdraw(context.Context, *core.ExchangeWithdrawContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeWithdraw not implemented")
}
func (*UnimplementedWalletServer) ExchangeTransaction(context.Context, *core.ExchangeTransactionContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeTransaction not implemented")
}
func (*UnimplementedWalletServer) MarketSellAsset(context.Context, *core.MarketSellAssetContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketSellAsset not implemented")
}
func (*UnimplementedWalletServer) MarketCancelOrder(context.Context, *core.MarketCancelOrderContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarketCancelOrder not implemented")
}
func (*UnimplementedWalletServer) GetMarketOrderById(context.Context, *BytesMessage) (*core.MarketOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketOrderById not implemented")
}
func (*UnimplementedWalletServer) GetMarketOrderByAccount(context.Context, *BytesMessage) (*core.MarketOrderList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketOrderByAccount not implemented")
}
func (*UnimplementedWalletServer) GetMarketPriceByPair(context.Context, *core.MarketOrderPair) (*core.MarketPriceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketPriceByPair not implemented")
}
func (*UnimplementedWalletServer) GetMarketOrderListByPair(context.Context, *core.MarketOrderPair) (*core.MarketOrderList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketOrderListByPair not implemented")
}
func (*UnimplementedWalletServer) GetMarketPairList(context.Context, *EmptyMessage) (*core.MarketOrderPairList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketPairList not implemented")
}
func (*UnimplementedWalletServer) ListNodes(context.Context, *EmptyMessage) (*NodeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodes not implemented")
}
func (*UnimplementedWalletServer) GetAssetIssueByAccount(context.Context, *core.Account) (*AssetIssueList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssetIssueByAccount not implemented")
}
func (*UnimplementedWalletServer) GetAccountNet(context.Context, *core.Account) (*AccountNetMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountNet not implemented")
}
func (*UnimplementedWalletServer) GetAccountResource(context.Context, *core.Account) (*AccountResourceMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountResource not implemented")
}
func (*UnimplementedWalletServer) GetAssetIssueByName(context.Context, *BytesMessage) (*core.AssetIssueContract, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssetIssueByName not implemented")
}
func (*UnimplementedWalletServer) GetAssetIssueListByName(context.Context, *BytesMessage) (*AssetIssueList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssetIssueListByName not implemented")
}
func (*UnimplementedWalletServer) GetAssetIssueById(context.Context, *BytesMessage) (*core.AssetIssueContract, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssetIssueById not implemented")
}
func (*UnimplementedWalletServer) GetNowBlock(context.Context, *EmptyMessage) (*core.Block, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNowBlock not implemented")
}
func (*UnimplementedWalletServer) GetNowBlock2(context.Context, *EmptyMessage) (*BlockExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNowBlock2 not implemented")
}
func (*UnimplementedWalletServer) GetBlockByNum(context.Context, *NumberMessage) (*core.Block, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByNum not implemented")
}
func (*UnimplementedWalletServer) GetBlockByNum2(context.Context, *NumberMessage) (*BlockExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByNum2 not implemented")
}
func (*UnimplementedWalletServer) GetTransactionCountByBlockNum(context.Context, *NumberMessage) (*NumberMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionCountByBlockNum not implemented")
}
func (*UnimplementedWalletServer) GetBlockById(context.Context, *BytesMessage) (*core.Block, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockById not implemented")
}
func (*UnimplementedWalletServer) GetBlockByLimitNext(context.Context, *BlockLimit) (*BlockList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByLimitNext not implemented")
}
func (*UnimplementedWalletServer) GetBlockByLimitNext2(context.Context, *BlockLimit) (*BlockListExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByLimitNext2 not implemented")
}
func (*UnimplementedWalletServer) GetBlockByLatestNum(context.Context, *NumberMessage) (*BlockList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByLatestNum not implemented")
}
func (*UnimplementedWalletServer) GetBlockByLatestNum2(context.Context, *NumberMessage) (*BlockListExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByLatestNum2 not implemented")
}
func (*UnimplementedWalletServer) GetTransactionById(context.Context, *BytesMessage) (*core.Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionById not implemented")
}
func (*UnimplementedWalletServer) DeployContract(context.Context, *core.CreateSmartContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeployContract not implemented")
}
func (*UnimplementedWalletServer) GetContract(context.Context, *BytesMessage) (*core.SmartContract, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContract not implemented")
}
func (*UnimplementedWalletServer) GetContractInfo(context.Context, *BytesMessage) (*core.SmartContractDataWrapper, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContractInfo not implemented")
}
func (*UnimplementedWalletServer) TriggerContract(context.Context, *core.TriggerSmartContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerContract not implemented")
}
func (*UnimplementedWalletServer) TriggerConstantContract(context.Context, *core.TriggerSmartContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerConstantContract not implemented")
}
func (*UnimplementedWalletServer) ClearContractABI(context.Context, *core.ClearABIContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearContractABI not implemented")
}
func (*UnimplementedWalletServer) ListWitnesses(context.Context, *EmptyMessage) (*WitnessList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWitnesses not implemented")
}
func (*UnimplementedWalletServer) GetDelegatedResource(context.Context, *DelegatedResourceMessage) (*DelegatedResourceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegatedResource not implemented")
}
func (*UnimplementedWalletServer) GetDelegatedResourceAccountIndex(context.Context, *BytesMessage) (*core.DelegatedResourceAccountIndex, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegatedResourceAccountIndex not implemented")
}
func (*UnimplementedWalletServer) ListProposals(context.Context, *EmptyMessage) (*ProposalList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProposals not implemented")
}
func (*UnimplementedWalletServer) GetPaginatedProposalList(context.Context, *PaginatedMessage) (*ProposalList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaginatedProposalList not implemented")
}
func (*UnimplementedWalletServer) GetProposalById(context.Context, *BytesMessage) (*core.Proposal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProposalById not implemented")
}
func (*UnimplementedWalletServer) ListExchanges(context.Context, *EmptyMessage) (*ExchangeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExchanges not implemented")
}
func (*UnimplementedWalletServer) GetPaginatedExchangeList(context.Context, *PaginatedMessage) (*ExchangeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaginatedExchangeList not implemented")
}
func (*UnimplementedWalletServer) GetExchangeById(context.Context, *BytesMessage) (*core.Exchange, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExchangeById not implemented")
}
func (*UnimplementedWalletServer) GetChainParameters(context.Context, *EmptyMessage) (*core.ChainParameters, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChainParameters not implemented")
}
func (*UnimplementedWalletServer) GetAssetIssueList(context.Context, *EmptyMessage) (*AssetIssueList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssetIssueList not implemented")
}
func (*UnimplementedWalletServer) GetPaginatedAssetIssueList(context.Context, *PaginatedMessage) (*AssetIssueList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaginatedAssetIssueList not implemented")
}
func (*UnimplementedWalletServer) TotalTransaction(context.Context, *EmptyMessage) (*NumberMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalTransaction not implemented")
}
func (*UnimplementedWalletServer) GetNextMaintenanceTime(context.Context, *EmptyMessage) (*NumberMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextMaintenanceTime not implemented")
}
func (*UnimplementedWalletServer) GetTransactionSign(context.Context, *core.TransactionSign) (*core.Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionSign not implemented")
}
func (*UnimplementedWalletServer) GetTransactionSign2(context.Context, *core.TransactionSign) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionSign2 not implemented")
}
func (*UnimplementedWalletServer) CreateAddress(context.Context, *BytesMessage) (*BytesMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAddress not implemented")
}
func (*UnimplementedWalletServer) EasyTransferAsset(context.Context, *EasyTransferAssetMessage) (*EasyTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EasyTransferAsset not implemented")
}
func (*UnimplementedWalletServer) EasyTransferAssetByPrivate(context.Context, *EasyTransferAssetByPrivateMessage) (*EasyTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EasyTransferAssetByPrivate not implemented")
}
func (*UnimplementedWalletServer) EasyTransfer(context.Context, *EasyTransferMessage) (*EasyTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EasyTransfer not implemented")
}
func (*UnimplementedWalletServer) EasyTransferByPrivate(context.Context, *EasyTransferByPrivateMessage) (*EasyTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EasyTransferByPrivate not implemented")
}
func (*UnimplementedWalletServer) GenerateAddress(context.Context, *EmptyMessage) (*AddressPrKeyPairMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateAddress not implemented")
}
func (*UnimplementedWalletServer) GetTransactionInfoById(context.Context, *BytesMessage) (*core.TransactionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionInfoById not implemented")
}
func (*UnimplementedWalletServer) AccountPermissionUpdate(context.Context, *core.AccountPermissionUpdateContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountPermissionUpdate not implemented")
}
func (*UnimplementedWalletServer) AddSign(context.Context, *core.TransactionSign) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSign not implemented")
}
func (*UnimplementedWalletServer) GetTransactionSignWeight(context.Context, *core.Transaction) (*TransactionSignWeight, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionSignWeight not implemented")
}
func (*UnimplementedWalletServer) GetTransactionApprovedList(context.Context, *core.Transaction) (*TransactionApprovedList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionApprovedList not implemented")
}
func (*UnimplementedWalletServer) GetNodeInfo(context.Context, *EmptyMessage) (*core.NodeInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeInfo not implemented")
}
func (*UnimplementedWalletServer) GetRewardInfo(context.Context, *BytesMessage) (*NumberMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRewardInfo not implemented")
}
func (*UnimplementedWalletServer) GetBrokerageInfo(context.Context, *BytesMessage) (*NumberMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrokerageInfo not implemented")
}
func (*UnimplementedWalletServer) UpdateBrokerage(context.Context, *core.UpdateBrokerageContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateBrokerage not implemented")
}
func (*UnimplementedWalletServer) CreateShieldedTransaction(context.Context, *PrivateParameters) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShieldedTransaction not implemented")
}
func (*UnimplementedWalletServer) GetMerkleTreeVoucherInfo(context.Context, *core.OutputPointInfo) (*core.IncrementalMerkleVoucherInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerkleTreeVoucherInfo not implemented")
}
func (*UnimplementedWalletServer) ScanNoteByIvk(context.Context, *IvkDecryptParameters) (*DecryptNotes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanNoteByIvk not implemented")
}
func (*UnimplementedWalletServer) ScanAndMarkNoteByIvk(context.Context, *IvkDecryptAndMarkParameters) (*DecryptNotesMarked, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanAndMarkNoteByIvk not implemented")
}
func (*UnimplementedWalletServer) ScanNoteByOvk(context.Context, *OvkDecryptParameters) (*DecryptNotes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanNoteByOvk not implemented")
}
func (*UnimplementedWalletServer) GetSpendingKey(context.Context, *EmptyMessage) (*BytesMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpendingKey not implemented")
}
func (*UnimplementedWalletServer) GetExpandedSpendingKey(context.Context, *BytesMessage) (*ExpandedSpendingKeyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExpandedSpendingKey not implemented")
}
func (*UnimplementedWalletServer) GetAkFromAsk(context.Context, *BytesMessage) (*BytesMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAkFromAsk not implemented")
}
func (*UnimplementedWalletServer) GetNkFromNsk(context.Context, *BytesMessage) (*BytesMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNkFromNsk not implemented")
}
func (*UnimplementedWalletServer) GetIncomingViewingKey(context.Context, *ViewingKeyMessage) (*IncomingViewingKeyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIncomingViewingKey not implemented")
}
func (*UnimplementedWalletServer) GetDiversifier(context.Context, *EmptyMessage) (*DiversifierMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiversifier not implemented")
}
func (*UnimplementedWalletServer) GetNewShieldedAddress(context.Context, *EmptyMessage) (*ShieldedAddressInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNewShieldedAddress not implemented")
}
func (*UnimplementedWalletServer) GetZenPaymentAddress(context.Context, *IncomingViewingKeyDiversifierMessage) (*PaymentAddressMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetZenPaymentAddress not implemented")
}
func (*UnimplementedWalletServer) GetRcm(context.Context, *EmptyMessage) (*BytesMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRcm not implemented")
}
func (*UnimplementedWalletServer) IsSpend(context.Context, *NoteParameters) (*SpendResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsSpend not implemented")
}
func (*UnimplementedWalletServer) CreateShieldedTransactionWithoutSpendAuthSig(context.Context, *PrivateParametersWithoutAsk) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShieldedTransactionWithoutSpendAuthSig not implemented")
}
func (*UnimplementedWalletServer) GetShieldTransactionHash(context.Context, *core.Transaction) (*BytesMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShieldTransactionHash not implemented")
}
func (*UnimplementedWalletServer) CreateSpendAuthSig(context.Context, *SpendAuthSigParameters) (*BytesMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSpendAuthSig not implemented")
}
func (*UnimplementedWalletServer) CreateShieldNullifier(context.Context, *NfParameters) (*BytesMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShieldNullifier not implemented")
}
func (*UnimplementedWalletServer) CreateShieldedContractParameters(context.Context, *PrivateShieldedTRC20Parameters) (*ShieldedTRC20Parameters, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShieldedContractParameters not implemented")
}
func (*UnimplementedWalletServer) CreateShieldedContractParametersWithoutAsk(context.Context, *PrivateShieldedTRC20ParametersWithoutAsk) (*ShieldedTRC20Parameters, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShieldedContractParametersWithoutAsk not implemented")
}
func (*UnimplementedWalletServer) ScanShieldedTRC20NotesByIvk(context.Context, *IvkDecryptTRC20Parameters) (*DecryptNotesTRC20, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanShieldedTRC20NotesByIvk not implemented")
}
func (*UnimplementedWalletServer) ScanShieldedTRC20NotesByOvk(context.Context, *OvkDecryptTRC20Parameters) (*DecryptNotesTRC20, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanShieldedTRC20NotesByOvk not implemented")
}
func (*UnimplementedWalletServer) IsShieldedTRC20ContractNoteSpent(context.Context, *NfTRC20Parameters) (*NullifierResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsShieldedTRC20ContractNoteSpent not implemented")
}
func (*UnimplementedWalletServer) GetTriggerInputForShieldedTRC20Contract(context.Context, *ShieldedTRC20TriggerContractParameters) (*BytesMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTriggerInputForShieldedTRC20Contract not implemented")
}
func (*UnimplementedWalletServer) CreateCommonTransaction(context.Context, *core.Transaction) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCommonTransaction not implemented")
}
func (*UnimplementedWalletServer) GetTransactionInfoByBlockNum(context.Context, *NumberMessage) (*TransactionInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionInfoByBlockNum not implemented")
}
func (*UnimplementedWalletServer) GetBurnTrx(context.Context, *EmptyMessage) (*NumberMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBurnTrx not implemented")
}
func (*UnimplementedWalletServer) GetTransactionFromPending(context.Context, *BytesMessage) (*core.Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionFromPending not implemented")
}
func (*UnimplementedWalletServer) GetTransactionListFromPending(context.Context, *EmptyMessage) (*TransactionIdList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionListFromPending not implemented")
}
func (*UnimplementedWalletServer) GetPendingSize(context.Context, *EmptyMessage) (*NumberMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPendingSize not implemented")
}

func RegisterWalletServer(s *grpc.Server, srv WalletServer) {
	s.RegisterService(&_Wallet_serviceDesc, srv)
}

func _Wallet_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetAccount(ctx, req.(*core.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetAccountById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetAccountById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetAccountById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetAccountById(ctx, req.(*core.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetAccountBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.AccountBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetAccountBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetAccountBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetAccountBalance(ctx, req.(*core.AccountBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetBlockBalanceTrace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.BlockBalanceTrace_BlockIdentifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetBlockBalanceTrace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetBlockBalanceTrace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetBlockBalanceTrace(ctx, req.(*core.BlockBalanceTrace_BlockIdentifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.TransferContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/CreateTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateTransaction(ctx, req.(*core.TransferContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CreateTransaction2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.TransferContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateTransaction2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/CreateTransaction2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateTransaction2(ctx, req.(*core.TransferContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_BroadcastTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).BroadcastTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/BroadcastTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).BroadcastTransaction(ctx, req.(*core.Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.AccountUpdateContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/UpdateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UpdateAccount(ctx, req.(*core.AccountUpdateContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_SetAccountId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.SetAccountIdContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).SetAccountId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/SetAccountId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).SetAccountId(ctx, req.(*core.SetAccountIdContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UpdateAccount2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.AccountUpdateContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UpdateAccount2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/UpdateAccount2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UpdateAccount2(ctx, req.(*core.AccountUpdateContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_VoteWitnessAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.VoteWitnessContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).VoteWitnessAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/VoteWitnessAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).VoteWitnessAccount(ctx, req.(*core.VoteWitnessContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UpdateSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.UpdateSettingContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UpdateSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/UpdateSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UpdateSetting(ctx, req.(*core.UpdateSettingContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UpdateEnergyLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.UpdateEnergyLimitContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UpdateEnergyLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/UpdateEnergyLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UpdateEnergyLimit(ctx, req.(*core.UpdateEnergyLimitContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_VoteWitnessAccount2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.VoteWitnessContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).VoteWitnessAccount2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/VoteWitnessAccount2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).VoteWitnessAccount2(ctx, req.(*core.VoteWitnessContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CreateAssetIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.AssetIssueContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateAssetIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/CreateAssetIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateAssetIssue(ctx, req.(*core.AssetIssueContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CreateAssetIssue2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.AssetIssueContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateAssetIssue2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/CreateAssetIssue2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateAssetIssue2(ctx, req.(*core.AssetIssueContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UpdateWitness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.WitnessUpdateContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UpdateWitness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/UpdateWitness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UpdateWitness(ctx, req.(*core.WitnessUpdateContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UpdateWitness2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.WitnessUpdateContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UpdateWitness2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/UpdateWitness2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UpdateWitness2(ctx, req.(*core.WitnessUpdateContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.AccountCreateContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateAccount(ctx, req.(*core.AccountCreateContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CreateAccount2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.AccountCreateContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateAccount2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/CreateAccount2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateAccount2(ctx, req.(*core.AccountCreateContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CreateWitness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.WitnessCreateContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateWitness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/CreateWitness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateWitness(ctx, req.(*core.WitnessCreateContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CreateWitness2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.WitnessCreateContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateWitness2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/CreateWitness2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateWitness2(ctx, req.(*core.WitnessCreateContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_TransferAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.TransferAssetContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).TransferAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/TransferAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).TransferAsset(ctx, req.(*core.TransferAssetContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_TransferAsset2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.TransferAssetContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).TransferAsset2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/TransferAsset2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).TransferAsset2(ctx, req.(*core.TransferAssetContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ParticipateAssetIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.ParticipateAssetIssueContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ParticipateAssetIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/ParticipateAssetIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ParticipateAssetIssue(ctx, req.(*core.ParticipateAssetIssueContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ParticipateAssetIssue2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.ParticipateAssetIssueContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ParticipateAssetIssue2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/ParticipateAssetIssue2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ParticipateAssetIssue2(ctx, req.(*core.ParticipateAssetIssueContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_FreezeBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.FreezeBalanceContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).FreezeBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/FreezeBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).FreezeBalance(ctx, req.(*core.FreezeBalanceContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_FreezeBalance2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.FreezeBalanceContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).FreezeBalance2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/FreezeBalance2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).FreezeBalance2(ctx, req.(*core.FreezeBalanceContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UnfreezeBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.UnfreezeBalanceContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UnfreezeBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/UnfreezeBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UnfreezeBalance(ctx, req.(*core.UnfreezeBalanceContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UnfreezeBalance2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.UnfreezeBalanceContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UnfreezeBalance2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/UnfreezeBalance2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UnfreezeBalance2(ctx, req.(*core.UnfreezeBalanceContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UnfreezeAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.UnfreezeAssetContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UnfreezeAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/UnfreezeAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UnfreezeAsset(ctx, req.(*core.UnfreezeAssetContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UnfreezeAsset2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.UnfreezeAssetContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UnfreezeAsset2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/UnfreezeAsset2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UnfreezeAsset2(ctx, req.(*core.UnfreezeAssetContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_WithdrawBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.WithdrawBalanceContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).WithdrawBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/WithdrawBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).WithdrawBalance(ctx, req.(*core.WithdrawBalanceContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_WithdrawBalance2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.WithdrawBalanceContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).WithdrawBalance2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/WithdrawBalance2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).WithdrawBalance2(ctx, req.(*core.WithdrawBalanceContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UpdateAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.UpdateAssetContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UpdateAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/UpdateAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UpdateAsset(ctx, req.(*core.UpdateAssetContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UpdateAsset2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.UpdateAssetContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UpdateAsset2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/UpdateAsset2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UpdateAsset2(ctx, req.(*core.UpdateAssetContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ProposalCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.ProposalCreateContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ProposalCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/ProposalCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ProposalCreate(ctx, req.(*core.ProposalCreateContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ProposalApprove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.ProposalApproveContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ProposalApprove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/ProposalApprove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ProposalApprove(ctx, req.(*core.ProposalApproveContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ProposalDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.ProposalDeleteContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ProposalDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/ProposalDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ProposalDelete(ctx, req.(*core.ProposalDeleteContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_BuyStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.BuyStorageContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).BuyStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/BuyStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).BuyStorage(ctx, req.(*core.BuyStorageContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_BuyStorageBytes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.BuyStorageBytesContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).BuyStorageBytes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/BuyStorageBytes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).BuyStorageBytes(ctx, req.(*core.BuyStorageBytesContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_SellStorage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.SellStorageContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).SellStorage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/SellStorage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).SellStorage(ctx, req.(*core.SellStorageContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ExchangeCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.ExchangeCreateContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ExchangeCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/ExchangeCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ExchangeCreate(ctx, req.(*core.ExchangeCreateContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ExchangeInject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.ExchangeInjectContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ExchangeInject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/ExchangeInject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ExchangeInject(ctx, req.(*core.ExchangeInjectContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ExchangeWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.ExchangeWithdrawContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ExchangeWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/ExchangeWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ExchangeWithdraw(ctx, req.(*core.ExchangeWithdrawContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ExchangeTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.ExchangeTransactionContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ExchangeTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/ExchangeTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ExchangeTransaction(ctx, req.(*core.ExchangeTransactionContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_MarketSellAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.MarketSellAssetContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).MarketSellAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/MarketSellAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).MarketSellAsset(ctx, req.(*core.MarketSellAssetContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_MarketCancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.MarketCancelOrderContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).MarketCancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/MarketCancelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).MarketCancelOrder(ctx, req.(*core.MarketCancelOrderContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetMarketOrderById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetMarketOrderById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetMarketOrderById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetMarketOrderById(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetMarketOrderByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetMarketOrderByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetMarketOrderByAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetMarketOrderByAccount(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetMarketPriceByPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.MarketOrderPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetMarketPriceByPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetMarketPriceByPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetMarketPriceByPair(ctx, req.(*core.MarketOrderPair))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetMarketOrderListByPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.MarketOrderPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetMarketOrderListByPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetMarketOrderListByPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetMarketOrderListByPair(ctx, req.(*core.MarketOrderPair))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetMarketPairList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetMarketPairList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetMarketPairList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetMarketPairList(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ListNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ListNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/ListNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ListNodes(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetAssetIssueByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetAssetIssueByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetAssetIssueByAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetAssetIssueByAccount(ctx, req.(*core.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetAccountNet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetAccountNet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetAccountNet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetAccountNet(ctx, req.(*core.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetAccountResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetAccountResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetAccountResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetAccountResource(ctx, req.(*core.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetAssetIssueByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetAssetIssueByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetAssetIssueByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetAssetIssueByName(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetAssetIssueListByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetAssetIssueListByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetAssetIssueListByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetAssetIssueListByName(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetAssetIssueById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetAssetIssueById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetAssetIssueById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetAssetIssueById(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetNowBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetNowBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetNowBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetNowBlock(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetNowBlock2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetNowBlock2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetNowBlock2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetNowBlock2(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetBlockByNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumberMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetBlockByNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetBlockByNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetBlockByNum(ctx, req.(*NumberMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetBlockByNum2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumberMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetBlockByNum2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetBlockByNum2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetBlockByNum2(ctx, req.(*NumberMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetTransactionCountByBlockNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumberMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetTransactionCountByBlockNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetTransactionCountByBlockNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetTransactionCountByBlockNum(ctx, req.(*NumberMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetBlockById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetBlockById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetBlockById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetBlockById(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetBlockByLimitNext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockLimit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetBlockByLimitNext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetBlockByLimitNext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetBlockByLimitNext(ctx, req.(*BlockLimit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetBlockByLimitNext2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockLimit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetBlockByLimitNext2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetBlockByLimitNext2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetBlockByLimitNext2(ctx, req.(*BlockLimit))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetBlockByLatestNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumberMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetBlockByLatestNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetBlockByLatestNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetBlockByLatestNum(ctx, req.(*NumberMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetBlockByLatestNum2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumberMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetBlockByLatestNum2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetBlockByLatestNum2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetBlockByLatestNum2(ctx, req.(*NumberMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetTransactionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetTransactionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetTransactionById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetTransactionById(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_DeployContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.CreateSmartContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).DeployContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/DeployContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).DeployContract(ctx, req.(*core.CreateSmartContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetContract(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetContractInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetContractInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetContractInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetContractInfo(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_TriggerContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.TriggerSmartContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).TriggerContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/TriggerContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).TriggerContract(ctx, req.(*core.TriggerSmartContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_TriggerConstantContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.TriggerSmartContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).TriggerConstantContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/TriggerConstantContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).TriggerConstantContract(ctx, req.(*core.TriggerSmartContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ClearContractABI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.ClearABIContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ClearContractABI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/ClearContractABI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ClearContractABI(ctx, req.(*core.ClearABIContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ListWitnesses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ListWitnesses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/ListWitnesses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ListWitnesses(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetDelegatedResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelegatedResourceMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetDelegatedResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetDelegatedResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetDelegatedResource(ctx, req.(*DelegatedResourceMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetDelegatedResourceAccountIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetDelegatedResourceAccountIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetDelegatedResourceAccountIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetDelegatedResourceAccountIndex(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ListProposals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ListProposals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/ListProposals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ListProposals(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetPaginatedProposalList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetPaginatedProposalList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetPaginatedProposalList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetPaginatedProposalList(ctx, req.(*PaginatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetProposalById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetProposalById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetProposalById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetProposalById(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ListExchanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ListExchanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/ListExchanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ListExchanges(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetPaginatedExchangeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetPaginatedExchangeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetPaginatedExchangeList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetPaginatedExchangeList(ctx, req.(*PaginatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetExchangeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetExchangeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetExchangeById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetExchangeById(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetChainParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetChainParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetChainParameters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetChainParameters(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetAssetIssueList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetAssetIssueList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetAssetIssueList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetAssetIssueList(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetPaginatedAssetIssueList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetPaginatedAssetIssueList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetPaginatedAssetIssueList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetPaginatedAssetIssueList(ctx, req.(*PaginatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_TotalTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).TotalTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/TotalTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).TotalTransaction(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetNextMaintenanceTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetNextMaintenanceTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetNextMaintenanceTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetNextMaintenanceTime(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetTransactionSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.TransactionSign)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetTransactionSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetTransactionSign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetTransactionSign(ctx, req.(*core.TransactionSign))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetTransactionSign2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.TransactionSign)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetTransactionSign2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetTransactionSign2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetTransactionSign2(ctx, req.(*core.TransactionSign))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CreateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/CreateAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateAddress(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_EasyTransferAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EasyTransferAssetMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).EasyTransferAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/EasyTransferAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).EasyTransferAsset(ctx, req.(*EasyTransferAssetMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_EasyTransferAssetByPrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EasyTransferAssetByPrivateMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).EasyTransferAssetByPrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/EasyTransferAssetByPrivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).EasyTransferAssetByPrivate(ctx, req.(*EasyTransferAssetByPrivateMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_EasyTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EasyTransferMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).EasyTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/EasyTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).EasyTransfer(ctx, req.(*EasyTransferMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_EasyTransferByPrivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EasyTransferByPrivateMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).EasyTransferByPrivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/EasyTransferByPrivate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).EasyTransferByPrivate(ctx, req.(*EasyTransferByPrivateMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GenerateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GenerateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GenerateAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GenerateAddress(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetTransactionInfoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetTransactionInfoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetTransactionInfoById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetTransactionInfoById(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_AccountPermissionUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.AccountPermissionUpdateContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).AccountPermissionUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/AccountPermissionUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).AccountPermissionUpdate(ctx, req.(*core.AccountPermissionUpdateContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_AddSign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.TransactionSign)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).AddSign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/AddSign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).AddSign(ctx, req.(*core.TransactionSign))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetTransactionSignWeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetTransactionSignWeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetTransactionSignWeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetTransactionSignWeight(ctx, req.(*core.Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetTransactionApprovedList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetTransactionApprovedList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetTransactionApprovedList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetTransactionApprovedList(ctx, req.(*core.Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetNodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetNodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetNodeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetNodeInfo(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetRewardInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetRewardInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetRewardInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetRewardInfo(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetBrokerageInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetBrokerageInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetBrokerageInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetBrokerageInfo(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_UpdateBrokerage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.UpdateBrokerageContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).UpdateBrokerage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/UpdateBrokerage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).UpdateBrokerage(ctx, req.(*core.UpdateBrokerageContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CreateShieldedTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateShieldedTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/CreateShieldedTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateShieldedTransaction(ctx, req.(*PrivateParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetMerkleTreeVoucherInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.OutputPointInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetMerkleTreeVoucherInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetMerkleTreeVoucherInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetMerkleTreeVoucherInfo(ctx, req.(*core.OutputPointInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ScanNoteByIvk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IvkDecryptParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ScanNoteByIvk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/ScanNoteByIvk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ScanNoteByIvk(ctx, req.(*IvkDecryptParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ScanAndMarkNoteByIvk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IvkDecryptAndMarkParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ScanAndMarkNoteByIvk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/ScanAndMarkNoteByIvk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ScanAndMarkNoteByIvk(ctx, req.(*IvkDecryptAndMarkParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ScanNoteByOvk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OvkDecryptParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ScanNoteByOvk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/ScanNoteByOvk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ScanNoteByOvk(ctx, req.(*OvkDecryptParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetSpendingKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetSpendingKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetSpendingKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetSpendingKey(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetExpandedSpendingKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetExpandedSpendingKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetExpandedSpendingKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetExpandedSpendingKey(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetAkFromAsk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetAkFromAsk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetAkFromAsk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetAkFromAsk(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetNkFromNsk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetNkFromNsk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetNkFromNsk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetNkFromNsk(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetIncomingViewingKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewingKeyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetIncomingViewingKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetIncomingViewingKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetIncomingViewingKey(ctx, req.(*ViewingKeyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetDiversifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetDiversifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetDiversifier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetDiversifier(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetNewShieldedAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetNewShieldedAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetNewShieldedAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetNewShieldedAddress(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetZenPaymentAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncomingViewingKeyDiversifierMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetZenPaymentAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetZenPaymentAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetZenPaymentAddress(ctx, req.(*IncomingViewingKeyDiversifierMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetRcm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetRcm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetRcm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetRcm(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_IsSpend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoteParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).IsSpend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/IsSpend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).IsSpend(ctx, req.(*NoteParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CreateShieldedTransactionWithoutSpendAuthSig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateParametersWithoutAsk)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateShieldedTransactionWithoutSpendAuthSig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/CreateShieldedTransactionWithoutSpendAuthSig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateShieldedTransactionWithoutSpendAuthSig(ctx, req.(*PrivateParametersWithoutAsk))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetShieldTransactionHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetShieldTransactionHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetShieldTransactionHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetShieldTransactionHash(ctx, req.(*core.Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CreateSpendAuthSig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpendAuthSigParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateSpendAuthSig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/CreateSpendAuthSig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateSpendAuthSig(ctx, req.(*SpendAuthSigParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CreateShieldNullifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NfParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateShieldNullifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/CreateShieldNullifier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateShieldNullifier(ctx, req.(*NfParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CreateShieldedContractParameters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateShieldedTRC20Parameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateShieldedContractParameters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/CreateShieldedContractParameters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateShieldedContractParameters(ctx, req.(*PrivateShieldedTRC20Parameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CreateShieldedContractParametersWithoutAsk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrivateShieldedTRC20ParametersWithoutAsk)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateShieldedContractParametersWithoutAsk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/CreateShieldedContractParametersWithoutAsk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateShieldedContractParametersWithoutAsk(ctx, req.(*PrivateShieldedTRC20ParametersWithoutAsk))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ScanShieldedTRC20NotesByIvk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IvkDecryptTRC20Parameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ScanShieldedTRC20NotesByIvk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/ScanShieldedTRC20NotesByIvk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ScanShieldedTRC20NotesByIvk(ctx, req.(*IvkDecryptTRC20Parameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ScanShieldedTRC20NotesByOvk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OvkDecryptTRC20Parameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ScanShieldedTRC20NotesByOvk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/ScanShieldedTRC20NotesByOvk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ScanShieldedTRC20NotesByOvk(ctx, req.(*OvkDecryptTRC20Parameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_IsShieldedTRC20ContractNoteSpent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NfTRC20Parameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).IsShieldedTRC20ContractNoteSpent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/IsShieldedTRC20ContractNoteSpent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).IsShieldedTRC20ContractNoteSpent(ctx, req.(*NfTRC20Parameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetTriggerInputForShieldedTRC20Contract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShieldedTRC20TriggerContractParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetTriggerInputForShieldedTRC20Contract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetTriggerInputForShieldedTRC20Contract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetTriggerInputForShieldedTRC20Contract(ctx, req.(*ShieldedTRC20TriggerContractParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CreateCommonTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CreateCommonTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/CreateCommonTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CreateCommonTransaction(ctx, req.(*core.Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetTransactionInfoByBlockNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumberMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetTransactionInfoByBlockNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetTransactionInfoByBlockNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetTransactionInfoByBlockNum(ctx, req.(*NumberMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetBurnTrx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetBurnTrx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetBurnTrx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetBurnTrx(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetTransactionFromPending_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetTransactionFromPending(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetTransactionFromPending",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetTransactionFromPending(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetTransactionListFromPending_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetTransactionListFromPending(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetTransactionListFromPending",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetTransactionListFromPending(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_GetPendingSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).GetPendingSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Wallet/GetPendingSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).GetPendingSize(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Wallet_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.Wallet",
	HandlerType: (*WalletServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccount",
			Handler:    _Wallet_GetAccount_Handler,
		},
		{
			MethodName: "GetAccountById",
			Handler:    _Wallet_GetAccountById_Handler,
		},
		{
			MethodName: "GetAccountBalance",
			Handler:    _Wallet_GetAccountBalance_Handler,
		},
		{
			MethodName: "GetBlockBalanceTrace",
			Handler:    _Wallet_GetBlockBalanceTrace_Handler,
		},
		{
			MethodName: "CreateTransaction",
			Handler:    _Wallet_CreateTransaction_Handler,
		},
		{
			MethodName: "CreateTransaction2",
			Handler:    _Wallet_CreateTransaction2_Handler,
		},
		{
			MethodName: "BroadcastTransaction",
			Handler:    _Wallet_BroadcastTransaction_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _Wallet_UpdateAccount_Handler,
		},
		{
			MethodName: "SetAccountId",
			Handler:    _Wallet_SetAccountId_Handler,
		},
		{
			MethodName: "UpdateAccount2",
			Handler:    _Wallet_UpdateAccount2_Handler,
		},
		{
			MethodName: "VoteWitnessAccount",
			Handler:    _Wallet_VoteWitnessAccount_Handler,
		},
		{
			MethodName: "UpdateSetting",
			Handler:    _Wallet_UpdateSetting_Handler,
		},
		{
			MethodName: "UpdateEnergyLimit",
			Handler:    _Wallet_UpdateEnergyLimit_Handler,
		},
		{
			MethodName: "VoteWitnessAccount2",
			Handler:    _Wallet_VoteWitnessAccount2_Handler,
		},
		{
			MethodName: "CreateAssetIssue",
			Handler:    _Wallet_CreateAssetIssue_Handler,
		},
		{
			MethodName: "CreateAssetIssue2",
			Handler:    _Wallet_CreateAssetIssue2_Handler,
		},
		{
			MethodName: "UpdateWitness",
			Handler:    _Wallet_UpdateWitness_Handler,
		},
		{
			MethodName: "UpdateWitness2",
			Handler:    _Wallet_UpdateWitness2_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _Wallet_CreateAccount_Handler,
		},
		{
			MethodName: "CreateAccount2",
			Handler:    _Wallet_CreateAccount2_Handler,
		},
		{
			MethodName: "CreateWitness",
			Handler:    _Wallet_CreateWitness_Handler,
		},
		{
			MethodName: "CreateWitness2",
			Handler:    _Wallet_CreateWitness2_Handler,
		},
		{
			MethodName: "TransferAsset",
			Handler:    _Wallet_TransferAsset_Handler,
		},
		{
			MethodName: "TransferAsset2",
			Handler:    _Wallet_TransferAsset2_Handler,
		},
		{
			MethodName: "ParticipateAssetIssue",
			Handler:    _Wallet_ParticipateAssetIssue_Handler,
		},
		{
			MethodName: "ParticipateAssetIssue2",
			Handler:    _Wallet_ParticipateAssetIssue2_Handler,
		},
		{
			MethodName: "FreezeBalance",
			Handler:    _Wallet_FreezeBalance_Handler,
		},
		{
			MethodName: "FreezeBalance2",
			Handler:    _Wallet_FreezeBalance2_Handler,
		},
		{
			MethodName: "UnfreezeBalance",
			Handler:    _Wallet_UnfreezeBalance_Handler,
		},
		{
			MethodName: "UnfreezeBalance2",
			Handler:    _Wallet_UnfreezeBalance2_Handler,
		},
		{
			MethodName: "UnfreezeAsset",
			Handler:    _Wallet_UnfreezeAsset_Handler,
		},
		{
			MethodName: "UnfreezeAsset2",
			Handler:    _Wallet_UnfreezeAsset2_Handler,
		},
		{
			MethodName: "WithdrawBalance",
			Handler:    _Wallet_WithdrawBalance_Handler,
		},
		{
			MethodName: "WithdrawBalance2",
			Handler:    _Wallet_WithdrawBalance2_Handler,
		},
		{
			MethodName: "UpdateAsset",
			Handler:    _Wallet_UpdateAsset_Handler,
		},
		{
			MethodName: "UpdateAsset2",
			Handler:    _Wallet_UpdateAsset2_Handler,
		},
		{
			MethodName: "ProposalCreate",
			Handler:    _Wallet_ProposalCreate_Handler,
		},
		{
			MethodName: "ProposalApprove",
			Handler:    _Wallet_ProposalApprove_Handler,
		},
		{
			MethodName: "ProposalDelete",
			Handler:    _Wallet_ProposalDelete_Handler,
		},
		{
			MethodName: "BuyStorage",
			Handler:    _Wallet_BuyStorage_Handler,
		},
		{
			MethodName: "BuyStorageBytes",
			Handler:    _Wallet_BuyStorageBytes_Handler,
		},
		{
			MethodName: "SellStorage",
			Handler:    _Wallet_SellStorage_Handler,
		},
		{
			MethodName: "ExchangeCreate",
			Handler:    _Wallet_ExchangeCreate_Handler,
		},
		{
			MethodName: "ExchangeInject",
			Handler:    _Wallet_ExchangeInject_Handler,
		},
		{
			MethodName: "ExchangeWithdraw",
			Handler:    _Wallet_ExchangeWithdraw_Handler,
		},
		{
			MethodName: "ExchangeTransaction",
			Handler:    _Wallet_ExchangeTransaction_Handler,
		},
		{
			MethodName: "MarketSellAsset",
			Handler:    _Wallet_MarketSellAsset_Handler,
		},
		{
			MethodName: "MarketCancelOrder",
			Handler:    _Wallet_MarketCancelOrder_Handler,
		},
		{
			MethodName: "GetMarketOrderById",
			Handler:    _Wallet_GetMarketOrderById_Handler,
		},
		{
			MethodName: "GetMarketOrderByAccount",
			Handler:    _Wallet_GetMarketOrderByAccount_Handler,
		},
		{
			MethodName: "GetMarketPriceByPair",
			Handler:    _Wallet_GetMarketPriceByPair_Handler,
		},
		{
			MethodName: "GetMarketOrderListByPair",
			Handler:    _Wallet_GetMarketOrderListByPair_Handler,
		},
		{
			MethodName: "GetMarketPairList",
			Handler:    _Wallet_GetMarketPairList_Handler,
		},
		{
			MethodName: "ListNodes",
			Handler:    _Wallet_ListNodes_Handler,
		},
		{
			MethodName: "GetAssetIssueByAccount",
			Handler:    _Wallet_GetAssetIssueByAccount_Handler,
		},
		{
			MethodName: "GetAccountNet",
			Handler:    _Wallet_GetAccountNet_Handler,
		},
		{
			MethodName: "GetAccountResource",
			Handler:    _Wallet_GetAccountResource_Handler,
		},
		{
			MethodName: "GetAssetIssueByName",
			Handler:    _Wallet_GetAssetIssueByName_Handler,
		},
		{
			MethodName: "GetAssetIssueListByName",
			Handler:    _Wallet_GetAssetIssueListByName_Handler,
		},
		{
			MethodName: "GetAssetIssueById",
			Handler:    _Wallet_GetAssetIssueById_Handler,
		},
		{
			MethodName: "GetNowBlock",
			Handler:    _Wallet_GetNowBlock_Handler,
		},
		{
			MethodName: "GetNowBlock2",
			Handler:    _Wallet_GetNowBlock2_Handler,
		},
		{
			MethodName: "GetBlockByNum",
			Handler:    _Wallet_GetBlockByNum_Handler,
		},
		{
			MethodName: "GetBlockByNum2",
			Handler:    _Wallet_GetBlockByNum2_Handler,
		},
		{
			MethodName: "GetTransactionCountByBlockNum",
			Handler:    _Wallet_GetTransactionCountByBlockNum_Handler,
		},
		{
			MethodName: "GetBlockById",
			Handler:    _Wallet_GetBlockById_Handler,
		},
		{
			MethodName: "GetBlockByLimitNext",
			Handler:    _Wallet_GetBlockByLimitNext_Handler,
		},
		{
			MethodName: "GetBlockByLimitNext2",
			Handler:    _Wallet_GetBlockByLimitNext2_Handler,
		},
		{
			MethodName: "GetBlockByLatestNum",
			Handler:    _Wallet_GetBlockByLatestNum_Handler,
		},
		{
			MethodName: "GetBlockByLatestNum2",
			Handler:    _Wallet_GetBlockByLatestNum2_Handler,
		},
		{
			MethodName: "GetTransactionById",
			Handler:    _Wallet_GetTransactionById_Handler,
		},
		{
			MethodName: "DeployContract",
			Handler:    _Wallet_DeployContract_Handler,
		},
		{
			MethodName: "GetContract",
			Handler:    _Wallet_GetContract_Handler,
		},
		{
			MethodName: "GetContractInfo",
			Handler:    _Wallet_GetContractInfo_Handler,
		},
		{
			MethodName: "TriggerContract",
			Handler:    _Wallet_TriggerContract_Handler,
		},
		{
			MethodName: "TriggerConstantContract",
			Handler:    _Wallet_TriggerConstantContract_Handler,
		},
		{
			MethodName: "ClearContractABI",
			Handler:    _Wallet_ClearContractABI_Handler,
		},
		{
			MethodName: "ListWitnesses",
			Handler:    _Wallet_ListWitnesses_Handler,
		},
		{
			MethodName: "GetDelegatedResource",
			Handler:    _Wallet_GetDelegatedResource_Handler,
		},
		{
			MethodName: "GetDelegatedResourceAccountIndex",
			Handler:    _Wallet_GetDelegatedResourceAccountIndex_Handler,
		},
		{
			MethodName: "ListProposals",
			Handler:    _Wallet_ListProposals_Handler,
		},
		{
			MethodName: "GetPaginatedProposalList",
			Handler:    _Wallet_GetPaginatedProposalList_Handler,
		},
		{
			MethodName: "GetProposalById",
			Handler:    _Wallet_GetProposalById_Handler,
		},
		{
			MethodName: "ListExchanges",
			Handler:    _Wallet_ListExchanges_Handler,
		},
		{
			MethodName: "GetPaginatedExchangeList",
			Handler:    _Wallet_GetPaginatedExchangeList_Handler,
		},
		{
			MethodName: "GetExchangeById",
			Handler:    _Wallet_GetExchangeById_Handler,
		},
		{
			MethodName: "GetChainParameters",
			Handler:    _Wallet_GetChainParameters_Handler,
		},
		{
			MethodName: "GetAssetIssueList",
			Handler:    _Wallet_GetAssetIssueList_Handler,
		},
		{
			MethodName: "GetPaginatedAssetIssueList",
			Handler:    _Wallet_GetPaginatedAssetIssueList_Handler,
		},
		{
			MethodName: "TotalTransaction",
			Handler:    _Wallet_TotalTransaction_Handler,
		},
		{
			MethodName: "GetNextMaintenanceTime",
			Handler:    _Wallet_GetNextMaintenanceTime_Handler,
		},
		{
			MethodName: "GetTransactionSign",
			Handler:    _Wallet_GetTransactionSign_Handler,
		},
		{
			MethodName: "GetTransactionSign2",
			Handler:    _Wallet_GetTransactionSign2_Handler,
		},
		{
			MethodName: "CreateAddress",
			Handler:    _Wallet_CreateAddress_Handler,
		},
		{
			MethodName: "EasyTransferAsset",
			Handler:    _Wallet_EasyTransferAsset_Handler,
		},
		{
			MethodName: "EasyTransferAssetByPrivate",
			Handler:    _Wallet_EasyTransferAssetByPrivate_Handler,
		},
		{
			MethodName: "EasyTransfer",
			Handler:    _Wallet_EasyTransfer_Handler,
		},
		{
			MethodName: "EasyTransferByPrivate",
			Handler:    _Wallet_EasyTransferByPrivate_Handler,
		},
		{
			MethodName: "GenerateAddress",
			Handler:    _Wallet_GenerateAddress_Handler,
		},
		{
			MethodName: "GetTransactionInfoById",
			Handler:    _Wallet_GetTransactionInfoById_Handler,
		},
		{
			MethodName: "AccountPermissionUpdate",
			Handler:    _Wallet_AccountPermissionUpdate_Handler,
		},
		{
			MethodName: "AddSign",
			Handler:    _Wallet_AddSign_Handler,
		},
		{
			MethodName: "GetTransactionSignWeight",
			Handler:    _Wallet_GetTransactionSignWeight_Handler,
		},
		{
			MethodName: "GetTransactionApprovedList",
			Handler:    _Wallet_GetTransactionApprovedList_Handler,
		},
		{
			MethodName: "GetNodeInfo",
			Handler:    _Wallet_GetNodeInfo_Handler,
		},
		{
			MethodName: "GetRewardInfo",
			Handler:    _Wallet_GetRewardInfo_Handler,
		},
		{
			MethodName: "GetBrokerageInfo",
			Handler:    _Wallet_GetBrokerageInfo_Handler,
		},
		{
			MethodName: "UpdateBrokerage",
			Handler:    _Wallet_UpdateBrokerage_Handler,
		},
		{
			MethodName: "CreateShieldedTransaction",
			Handler:    _Wallet_CreateShieldedTransaction_Handler,
		},
		{
			MethodName: "GetMerkleTreeVoucherInfo",
			Handler:    _Wallet_GetMerkleTreeVoucherInfo_Handler,
		},
		{
			MethodName: "ScanNoteByIvk",
			Handler:    _Wallet_ScanNoteByIvk_Handler,
		},
		{
			MethodName: "ScanAndMarkNoteByIvk",
			Handler:    _Wallet_ScanAndMarkNoteByIvk_Handler,
		},
		{
			MethodName: "ScanNoteByOvk",
			Handler:    _Wallet_ScanNoteByOvk_Handler,
		},
		{
			MethodName: "GetSpendingKey",
			Handler:    _Wallet_GetSpendingKey_Handler,
		},
		{
			MethodName: "GetExpandedSpendingKey",
			Handler:    _Wallet_GetExpandedSpendingKey_Handler,
		},
		{
			MethodName: "GetAkFromAsk",
			Handler:    _Wallet_GetAkFromAsk_Handler,
		},
		{
			MethodName: "GetNkFromNsk",
			Handler:    _Wallet_GetNkFromNsk_Handler,
		},
		{
			MethodName: "GetIncomingViewingKey",
			Handler:    _Wallet_GetIncomingViewingKey_Handler,
		},
		{
			MethodName: "GetDiversifier",
			Handler:    _Wallet_GetDiversifier_Handler,
		},
		{
			MethodName: "GetNewShieldedAddress",
			Handler:    _Wallet_GetNewShieldedAddress_Handler,
		},
		{
			MethodName: "GetZenPaymentAddress",
			Handler:    _Wallet_GetZenPaymentAddress_Handler,
		},
		{
			MethodName: "GetRcm",
			Handler:    _Wallet_GetRcm_Handler,
		},
		{
			MethodName: "IsSpend",
			Handler:    _Wallet_IsSpend_Handler,
		},
		{
			MethodName: "CreateShieldedTransactionWithoutSpendAuthSig",
			Handler:    _Wallet_CreateShieldedTransactionWithoutSpendAuthSig_Handler,
		},
		{
			MethodName: "GetShieldTransactionHash",
			Handler:    _Wallet_GetShieldTransactionHash_Handler,
		},
		{
			MethodName: "CreateSpendAuthSig",
			Handler:    _Wallet_CreateSpendAuthSig_Handler,
		},
		{
			MethodName: "CreateShieldNullifier",
			Handler:    _Wallet_CreateShieldNullifier_Handler,
		},
		{
			MethodName: "CreateShieldedContractParameters",
			Handler:    _Wallet_CreateShieldedContractParameters_Handler,
		},
		{
			MethodName: "CreateShieldedContractParametersWithoutAsk",
			Handler:    _Wallet_CreateShieldedContractParametersWithoutAsk_Handler,
		},
		{
			MethodName: "ScanShieldedTRC20NotesByIvk",
			Handler:    _Wallet_ScanShieldedTRC20NotesByIvk_Handler,
		},
		{
			MethodName: "ScanShieldedTRC20NotesByOvk",
			Handler:    _Wallet_ScanShieldedTRC20NotesByOvk_Handler,
		},
		{
			MethodName: "IsShieldedTRC20ContractNoteSpent",
			Handler:    _Wallet_IsShieldedTRC20ContractNoteSpent_Handler,
		},
		{
			MethodName: "GetTriggerInputForShieldedTRC20Contract",
			Handler:    _Wallet_GetTriggerInputForShieldedTRC20Contract_Handler,
		},
		{
			MethodName: "CreateCommonTransaction",
			Handler:    _Wallet_CreateCommonTransaction_Handler,
		},
		{
			MethodName: "GetTransactionInfoByBlockNum",
			Handler:    _Wallet_GetTransactionInfoByBlockNum_Handler,
		},
		{
			MethodName: "GetBurnTrx",
			Handler:    _Wallet_GetBurnTrx_Handler,
		},
		{
			MethodName: "GetTransactionFromPending",
			Handler:    _Wallet_GetTransactionFromPending_Handler,
		},
		{
			MethodName: "GetTransactionListFromPending",
			Handler:    _Wallet_GetTransactionListFromPending_Handler,
		},
		{
			MethodName: "GetPendingSize",
			Handler:    _Wallet_GetPendingSize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}

// WalletSolidityClient is the client API for WalletSolidity service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WalletSolidityClient interface {
	GetAccount(ctx context.Context, in *core.Account, opts ...grpc.CallOption) (*core.Account, error)
	GetAccountById(ctx context.Context, in *core.Account, opts ...grpc.CallOption) (*core.Account, error)
	ListWitnesses(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*WitnessList, error)
	GetAssetIssueList(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*AssetIssueList, error)
	GetPaginatedAssetIssueList(ctx context.Context, in *PaginatedMessage, opts ...grpc.CallOption) (*AssetIssueList, error)
	GetAssetIssueByName(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.AssetIssueContract, error)
	GetAssetIssueListByName(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*AssetIssueList, error)
	GetAssetIssueById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.AssetIssueContract, error)
	//Please use GetNowBlock2 instead of this function.
	GetNowBlock(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*core.Block, error)
	//Use this function instead of GetNowBlock.
	GetNowBlock2(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*BlockExtention, error)
	//Please use GetBlockByNum2 instead of this function.
	GetBlockByNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*core.Block, error)
	//Use this function instead of GetBlockByNum.
	GetBlockByNum2(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*BlockExtention, error)
	GetTransactionCountByBlockNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*NumberMessage, error)
	GetDelegatedResource(ctx context.Context, in *DelegatedResourceMessage, opts ...grpc.CallOption) (*DelegatedResourceList, error)
	GetDelegatedResourceAccountIndex(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.DelegatedResourceAccountIndex, error)
	GetExchangeById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.Exchange, error)
	ListExchanges(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*ExchangeList, error)
	GetTransactionById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.Transaction, error)
	GetTransactionInfoById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.TransactionInfo, error)
	//Warning: do not invoke this interface provided by others.
	GenerateAddress(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*AddressPrKeyPairMessage, error)
	GetMerkleTreeVoucherInfo(ctx context.Context, in *core.OutputPointInfo, opts ...grpc.CallOption) (*core.IncrementalMerkleVoucherInfo, error)
	ScanNoteByIvk(ctx context.Context, in *IvkDecryptParameters, opts ...grpc.CallOption) (*DecryptNotes, error)
	ScanAndMarkNoteByIvk(ctx context.Context, in *IvkDecryptAndMarkParameters, opts ...grpc.CallOption) (*DecryptNotesMarked, error)
	ScanNoteByOvk(ctx context.Context, in *OvkDecryptParameters, opts ...grpc.CallOption) (*DecryptNotes, error)
	IsSpend(ctx context.Context, in *NoteParameters, opts ...grpc.CallOption) (*SpendResult, error)
	ScanShieldedTRC20NotesByIvk(ctx context.Context, in *IvkDecryptTRC20Parameters, opts ...grpc.CallOption) (*DecryptNotesTRC20, error)
	ScanShieldedTRC20NotesByOvk(ctx context.Context, in *OvkDecryptTRC20Parameters, opts ...grpc.CallOption) (*DecryptNotesTRC20, error)
	IsShieldedTRC20ContractNoteSpent(ctx context.Context, in *NfTRC20Parameters, opts ...grpc.CallOption) (*NullifierResult, error)
	GetRewardInfo(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*NumberMessage, error)
	GetBrokerageInfo(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*NumberMessage, error)
	TriggerConstantContract(ctx context.Context, in *core.TriggerSmartContract, opts ...grpc.CallOption) (*TransactionExtention, error)
	GetTransactionInfoByBlockNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*TransactionInfoList, error)
	GetMarketOrderById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.MarketOrder, error)
	GetMarketOrderByAccount(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.MarketOrderList, error)
	GetMarketPriceByPair(ctx context.Context, in *core.MarketOrderPair, opts ...grpc.CallOption) (*core.MarketPriceList, error)
	GetMarketOrderListByPair(ctx context.Context, in *core.MarketOrderPair, opts ...grpc.CallOption) (*core.MarketOrderList, error)
	GetMarketPairList(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*core.MarketOrderPairList, error)
	GetBurnTrx(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*NumberMessage, error)
}

type walletSolidityClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletSolidityClient(cc grpc.ClientConnInterface) WalletSolidityClient {
	return &walletSolidityClient{cc}
}

func (c *walletSolidityClient) GetAccount(ctx context.Context, in *core.Account, opts ...grpc.CallOption) (*core.Account, error) {
	out := new(core.Account)
	err := c.cc.Invoke(ctx, "/protocol.WalletSolidity/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetAccountById(ctx context.Context, in *core.Account, opts ...grpc.CallOption) (*core.Account, error) {
	out := new(core.Account)
	err := c.cc.Invoke(ctx, "/protocol.WalletSolidity/GetAccountById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) ListWitnesses(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*WitnessList, error) {
	out := new(WitnessList)
	err := c.cc.Invoke(ctx, "/protocol.WalletSolidity/ListWitnesses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetAssetIssueList(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*AssetIssueList, error) {
	out := new(AssetIssueList)
	err := c.cc.Invoke(ctx, "/protocol.WalletSolidity/GetAssetIssueList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetPaginatedAssetIssueList(ctx context.Context, in *PaginatedMessage, opts ...grpc.CallOption) (*AssetIssueList, error) {
	out := new(AssetIssueList)
	err := c.cc.Invoke(ctx, "/protocol.WalletSolidity/GetPaginatedAssetIssueList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetAssetIssueByName(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.AssetIssueContract, error) {
	out := new(core.AssetIssueContract)
	err := c.cc.Invoke(ctx, "/protocol.WalletSolidity/GetAssetIssueByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetAssetIssueListByName(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*AssetIssueList, error) {
	out := new(AssetIssueList)
	err := c.cc.Invoke(ctx, "/protocol.WalletSolidity/GetAssetIssueListByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetAssetIssueById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.AssetIssueContract, error) {
	out := new(core.AssetIssueContract)
	err := c.cc.Invoke(ctx, "/protocol.WalletSolidity/GetAssetIssueById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetNowBlock(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*core.Block, error) {
	out := new(core.Block)
	err := c.cc.Invoke(ctx, "/protocol.WalletSolidity/GetNowBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetNowBlock2(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*BlockExtention, error) {
	out := new(BlockExtention)
	err := c.cc.Invoke(ctx, "/protocol.WalletSolidity/GetNowBlock2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetBlockByNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*core.Block, error) {
	out := new(core.Block)
	err := c.cc.Invoke(ctx, "/protocol.WalletSolidity/GetBlockByNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetBlockByNum2(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*BlockExtention, error) {
	out := new(BlockExtention)
	err := c.cc.Invoke(ctx, "/protocol.WalletSolidity/GetBlockByNum2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetTransactionCountByBlockNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*NumberMessage, error) {
	out := new(NumberMessage)
	err := c.cc.Invoke(ctx, "/protocol.WalletSolidity/GetTransactionCountByBlockNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetDelegatedResource(ctx context.Context, in *DelegatedResourceMessage, opts ...grpc.CallOption) (*DelegatedResourceList, error) {
	out := new(DelegatedResourceList)
	err := c.cc.Invoke(ctx, "/protocol.WalletSolidity/GetDelegatedResource", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetDelegatedResourceAccountIndex(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.DelegatedResourceAccountIndex, error) {
	out := new(core.DelegatedResourceAccountIndex)
	err := c.cc.Invoke(ctx, "/protocol.WalletSolidity/GetDelegatedResourceAccountIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetExchangeById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.Exchange, error) {
	out := new(core.Exchange)
	err := c.cc.Invoke(ctx, "/protocol.WalletSolidity/GetExchangeById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) ListExchanges(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*ExchangeList, error) {
	out := new(ExchangeList)
	err := c.cc.Invoke(ctx, "/protocol.WalletSolidity/ListExchanges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetTransactionById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.Transaction, error) {
	out := new(core.Transaction)
	err := c.cc.Invoke(ctx, "/protocol.WalletSolidity/GetTransactionById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetTransactionInfoById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.TransactionInfo, error) {
	out := new(core.TransactionInfo)
	err := c.cc.Invoke(ctx, "/protocol.WalletSolidity/GetTransactionInfoById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GenerateAddress(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*AddressPrKeyPairMessage, error) {
	out := new(AddressPrKeyPairMessage)
	err := c.cc.Invoke(ctx, "/protocol.WalletSolidity/GenerateAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetMerkleTreeVoucherInfo(ctx context.Context, in *core.OutputPointInfo, opts ...grpc.CallOption) (*core.IncrementalMerkleVoucherInfo, error) {
	out := new(core.IncrementalMerkleVoucherInfo)
	err := c.cc.Invoke(ctx, "/protocol.WalletSolidity/GetMerkleTreeVoucherInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) ScanNoteByIvk(ctx context.Context, in *IvkDecryptParameters, opts ...grpc.CallOption) (*DecryptNotes, error) {
	out := new(DecryptNotes)
	err := c.cc.Invoke(ctx, "/protocol.WalletSolidity/ScanNoteByIvk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) ScanAndMarkNoteByIvk(ctx context.Context, in *IvkDecryptAndMarkParameters, opts ...grpc.CallOption) (*DecryptNotesMarked, error) {
	out := new(DecryptNotesMarked)
	err := c.cc.Invoke(ctx, "/protocol.WalletSolidity/ScanAndMarkNoteByIvk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) ScanNoteByOvk(ctx context.Context, in *OvkDecryptParameters, opts ...grpc.CallOption) (*DecryptNotes, error) {
	out := new(DecryptNotes)
	err := c.cc.Invoke(ctx, "/protocol.WalletSolidity/ScanNoteByOvk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) IsSpend(ctx context.Context, in *NoteParameters, opts ...grpc.CallOption) (*SpendResult, error) {
	out := new(SpendResult)
	err := c.cc.Invoke(ctx, "/protocol.WalletSolidity/IsSpend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) ScanShieldedTRC20NotesByIvk(ctx context.Context, in *IvkDecryptTRC20Parameters, opts ...grpc.CallOption) (*DecryptNotesTRC20, error) {
	out := new(DecryptNotesTRC20)
	err := c.cc.Invoke(ctx, "/protocol.WalletSolidity/ScanShieldedTRC20NotesByIvk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) ScanShieldedTRC20NotesByOvk(ctx context.Context, in *OvkDecryptTRC20Parameters, opts ...grpc.CallOption) (*DecryptNotesTRC20, error) {
	out := new(DecryptNotesTRC20)
	err := c.cc.Invoke(ctx, "/protocol.WalletSolidity/ScanShieldedTRC20NotesByOvk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) IsShieldedTRC20ContractNoteSpent(ctx context.Context, in *NfTRC20Parameters, opts ...grpc.CallOption) (*NullifierResult, error) {
	out := new(NullifierResult)
	err := c.cc.Invoke(ctx, "/protocol.WalletSolidity/IsShieldedTRC20ContractNoteSpent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetRewardInfo(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*NumberMessage, error) {
	out := new(NumberMessage)
	err := c.cc.Invoke(ctx, "/protocol.WalletSolidity/GetRewardInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetBrokerageInfo(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*NumberMessage, error) {
	out := new(NumberMessage)
	err := c.cc.Invoke(ctx, "/protocol.WalletSolidity/GetBrokerageInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) TriggerConstantContract(ctx context.Context, in *core.TriggerSmartContract, opts ...grpc.CallOption) (*TransactionExtention, error) {
	out := new(TransactionExtention)
	err := c.cc.Invoke(ctx, "/protocol.WalletSolidity/TriggerConstantContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetTransactionInfoByBlockNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*TransactionInfoList, error) {
	out := new(TransactionInfoList)
	err := c.cc.Invoke(ctx, "/protocol.WalletSolidity/GetTransactionInfoByBlockNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetMarketOrderById(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.MarketOrder, error) {
	out := new(core.MarketOrder)
	err := c.cc.Invoke(ctx, "/protocol.WalletSolidity/GetMarketOrderById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetMarketOrderByAccount(ctx context.Context, in *BytesMessage, opts ...grpc.CallOption) (*core.MarketOrderList, error) {
	out := new(core.MarketOrderList)
	err := c.cc.Invoke(ctx, "/protocol.WalletSolidity/GetMarketOrderByAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetMarketPriceByPair(ctx context.Context, in *core.MarketOrderPair, opts ...grpc.CallOption) (*core.MarketPriceList, error) {
	out := new(core.MarketPriceList)
	err := c.cc.Invoke(ctx, "/protocol.WalletSolidity/GetMarketPriceByPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetMarketOrderListByPair(ctx context.Context, in *core.MarketOrderPair, opts ...grpc.CallOption) (*core.MarketOrderList, error) {
	out := new(core.MarketOrderList)
	err := c.cc.Invoke(ctx, "/protocol.WalletSolidity/GetMarketOrderListByPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetMarketPairList(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*core.MarketOrderPairList, error) {
	out := new(core.MarketOrderPairList)
	err := c.cc.Invoke(ctx, "/protocol.WalletSolidity/GetMarketPairList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletSolidityClient) GetBurnTrx(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*NumberMessage, error) {
	out := new(NumberMessage)
	err := c.cc.Invoke(ctx, "/protocol.WalletSolidity/GetBurnTrx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletSolidityServer is the server API for WalletSolidity service.
type WalletSolidityServer interface {
	GetAccount(context.Context, *core.Account) (*core.Account, error)
	GetAccountById(context.Context, *core.Account) (*core.Account, error)
	ListWitnesses(context.Context, *EmptyMessage) (*WitnessList, error)
	GetAssetIssueList(context.Context, *EmptyMessage) (*AssetIssueList, error)
	GetPaginatedAssetIssueList(context.Context, *PaginatedMessage) (*AssetIssueList, error)
	GetAssetIssueByName(context.Context, *BytesMessage) (*core.AssetIssueContract, error)
	GetAssetIssueListByName(context.Context, *BytesMessage) (*AssetIssueList, error)
	GetAssetIssueById(context.Context, *BytesMessage) (*core.AssetIssueContract, error)
	//Please use GetNowBlock2 instead of this function.
	GetNowBlock(context.Context, *EmptyMessage) (*core.Block, error)
	//Use this function instead of GetNowBlock.
	GetNowBlock2(context.Context, *EmptyMessage) (*BlockExtention, error)
	//Please use GetBlockByNum2 instead of this function.
	GetBlockByNum(context.Context, *NumberMessage) (*core.Block, error)
	//Use this function instead of GetBlockByNum.
	GetBlockByNum2(context.Context, *NumberMessage) (*BlockExtention, error)
	GetTransactionCountByBlockNum(context.Context, *NumberMessage) (*NumberMessage, error)
	GetDelegatedResource(context.Context, *DelegatedResourceMessage) (*DelegatedResourceList, error)
	GetDelegatedResourceAccountIndex(context.Context, *BytesMessage) (*core.DelegatedResourceAccountIndex, error)
	GetExchangeById(context.Context, *BytesMessage) (*core.Exchange, error)
	ListExchanges(context.Context, *EmptyMessage) (*ExchangeList, error)
	GetTransactionById(context.Context, *BytesMessage) (*core.Transaction, error)
	GetTransactionInfoById(context.Context, *BytesMessage) (*core.TransactionInfo, error)
	//Warning: do not invoke this interface provided by others.
	GenerateAddress(context.Context, *EmptyMessage) (*AddressPrKeyPairMessage, error)
	GetMerkleTreeVoucherInfo(context.Context, *core.OutputPointInfo) (*core.IncrementalMerkleVoucherInfo, error)
	ScanNoteByIvk(context.Context, *IvkDecryptParameters) (*DecryptNotes, error)
	ScanAndMarkNoteByIvk(context.Context, *IvkDecryptAndMarkParameters) (*DecryptNotesMarked, error)
	ScanNoteByOvk(context.Context, *OvkDecryptParameters) (*DecryptNotes, error)
	IsSpend(context.Context, *NoteParameters) (*SpendResult, error)
	ScanShieldedTRC20NotesByIvk(context.Context, *IvkDecryptTRC20Parameters) (*DecryptNotesTRC20, error)
	ScanShieldedTRC20NotesByOvk(context.Context, *OvkDecryptTRC20Parameters) (*DecryptNotesTRC20, error)
	IsShieldedTRC20ContractNoteSpent(context.Context, *NfTRC20Parameters) (*NullifierResult, error)
	GetRewardInfo(context.Context, *BytesMessage) (*NumberMessage, error)
	GetBrokerageInfo(context.Context, *BytesMessage) (*NumberMessage, error)
	TriggerConstantContract(context.Context, *core.TriggerSmartContract) (*TransactionExtention, error)
	GetTransactionInfoByBlockNum(context.Context, *NumberMessage) (*TransactionInfoList, error)
	GetMarketOrderById(context.Context, *BytesMessage) (*core.MarketOrder, error)
	GetMarketOrderByAccount(context.Context, *BytesMessage) (*core.MarketOrderList, error)
	GetMarketPriceByPair(context.Context, *core.MarketOrderPair) (*core.MarketPriceList, error)
	GetMarketOrderListByPair(context.Context, *core.MarketOrderPair) (*core.MarketOrderList, error)
	GetMarketPairList(context.Context, *EmptyMessage) (*core.MarketOrderPairList, error)
	GetBurnTrx(context.Context, *EmptyMessage) (*NumberMessage, error)
}

// UnimplementedWalletSolidityServer can be embedded to have forward compatible implementations.
type UnimplementedWalletSolidityServer struct {
}

func (*UnimplementedWalletSolidityServer) GetAccount(context.Context, *core.Account) (*core.Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (*UnimplementedWalletSolidityServer) GetAccountById(context.Context, *core.Account) (*core.Account, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountById not implemented")
}
func (*UnimplementedWalletSolidityServer) ListWitnesses(context.Context, *EmptyMessage) (*WitnessList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWitnesses not implemented")
}
func (*UnimplementedWalletSolidityServer) GetAssetIssueList(context.Context, *EmptyMessage) (*AssetIssueList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssetIssueList not implemented")
}
func (*UnimplementedWalletSolidityServer) GetPaginatedAssetIssueList(context.Context, *PaginatedMessage) (*AssetIssueList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaginatedAssetIssueList not implemented")
}
func (*UnimplementedWalletSolidityServer) GetAssetIssueByName(context.Context, *BytesMessage) (*core.AssetIssueContract, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssetIssueByName not implemented")
}
func (*UnimplementedWalletSolidityServer) GetAssetIssueListByName(context.Context, *BytesMessage) (*AssetIssueList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssetIssueListByName not implemented")
}
func (*UnimplementedWalletSolidityServer) GetAssetIssueById(context.Context, *BytesMessage) (*core.AssetIssueContract, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssetIssueById not implemented")
}
func (*UnimplementedWalletSolidityServer) GetNowBlock(context.Context, *EmptyMessage) (*core.Block, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNowBlock not implemented")
}
func (*UnimplementedWalletSolidityServer) GetNowBlock2(context.Context, *EmptyMessage) (*BlockExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNowBlock2 not implemented")
}
func (*UnimplementedWalletSolidityServer) GetBlockByNum(context.Context, *NumberMessage) (*core.Block, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByNum not implemented")
}
func (*UnimplementedWalletSolidityServer) GetBlockByNum2(context.Context, *NumberMessage) (*BlockExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByNum2 not implemented")
}
func (*UnimplementedWalletSolidityServer) GetTransactionCountByBlockNum(context.Context, *NumberMessage) (*NumberMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionCountByBlockNum not implemented")
}
func (*UnimplementedWalletSolidityServer) GetDelegatedResource(context.Context, *DelegatedResourceMessage) (*DelegatedResourceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegatedResource not implemented")
}
func (*UnimplementedWalletSolidityServer) GetDelegatedResourceAccountIndex(context.Context, *BytesMessage) (*core.DelegatedResourceAccountIndex, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDelegatedResourceAccountIndex not implemented")
}
func (*UnimplementedWalletSolidityServer) GetExchangeById(context.Context, *BytesMessage) (*core.Exchange, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExchangeById not implemented")
}
func (*UnimplementedWalletSolidityServer) ListExchanges(context.Context, *EmptyMessage) (*ExchangeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExchanges not implemented")
}
func (*UnimplementedWalletSolidityServer) GetTransactionById(context.Context, *BytesMessage) (*core.Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionById not implemented")
}
func (*UnimplementedWalletSolidityServer) GetTransactionInfoById(context.Context, *BytesMessage) (*core.TransactionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionInfoById not implemented")
}
func (*UnimplementedWalletSolidityServer) GenerateAddress(context.Context, *EmptyMessage) (*AddressPrKeyPairMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateAddress not implemented")
}
func (*UnimplementedWalletSolidityServer) GetMerkleTreeVoucherInfo(context.Context, *core.OutputPointInfo) (*core.IncrementalMerkleVoucherInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMerkleTreeVoucherInfo not implemented")
}
func (*UnimplementedWalletSolidityServer) ScanNoteByIvk(context.Context, *IvkDecryptParameters) (*DecryptNotes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanNoteByIvk not implemented")
}
func (*UnimplementedWalletSolidityServer) ScanAndMarkNoteByIvk(context.Context, *IvkDecryptAndMarkParameters) (*DecryptNotesMarked, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanAndMarkNoteByIvk not implemented")
}
func (*UnimplementedWalletSolidityServer) ScanNoteByOvk(context.Context, *OvkDecryptParameters) (*DecryptNotes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanNoteByOvk not implemented")
}
func (*UnimplementedWalletSolidityServer) IsSpend(context.Context, *NoteParameters) (*SpendResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsSpend not implemented")
}
func (*UnimplementedWalletSolidityServer) ScanShieldedTRC20NotesByIvk(context.Context, *IvkDecryptTRC20Parameters) (*DecryptNotesTRC20, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanShieldedTRC20NotesByIvk not implemented")
}
func (*UnimplementedWalletSolidityServer) ScanShieldedTRC20NotesByOvk(context.Context, *OvkDecryptTRC20Parameters) (*DecryptNotesTRC20, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScanShieldedTRC20NotesByOvk not implemented")
}
func (*UnimplementedWalletSolidityServer) IsShieldedTRC20ContractNoteSpent(context.Context, *NfTRC20Parameters) (*NullifierResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsShieldedTRC20ContractNoteSpent not implemented")
}
func (*UnimplementedWalletSolidityServer) GetRewardInfo(context.Context, *BytesMessage) (*NumberMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRewardInfo not implemented")
}
func (*UnimplementedWalletSolidityServer) GetBrokerageInfo(context.Context, *BytesMessage) (*NumberMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBrokerageInfo not implemented")
}
func (*UnimplementedWalletSolidityServer) TriggerConstantContract(context.Context, *core.TriggerSmartContract) (*TransactionExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerConstantContract not implemented")
}
func (*UnimplementedWalletSolidityServer) GetTransactionInfoByBlockNum(context.Context, *NumberMessage) (*TransactionInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionInfoByBlockNum not implemented")
}
func (*UnimplementedWalletSolidityServer) GetMarketOrderById(context.Context, *BytesMessage) (*core.MarketOrder, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketOrderById not implemented")
}
func (*UnimplementedWalletSolidityServer) GetMarketOrderByAccount(context.Context, *BytesMessage) (*core.MarketOrderList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketOrderByAccount not implemented")
}
func (*UnimplementedWalletSolidityServer) GetMarketPriceByPair(context.Context, *core.MarketOrderPair) (*core.MarketPriceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketPriceByPair not implemented")
}
func (*UnimplementedWalletSolidityServer) GetMarketOrderListByPair(context.Context, *core.MarketOrderPair) (*core.MarketOrderList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketOrderListByPair not implemented")
}
func (*UnimplementedWalletSolidityServer) GetMarketPairList(context.Context, *EmptyMessage) (*core.MarketOrderPairList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarketPairList not implemented")
}
func (*UnimplementedWalletSolidityServer) GetBurnTrx(context.Context, *EmptyMessage) (*NumberMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBurnTrx not implemented")
}

func RegisterWalletSolidityServer(s *grpc.Server, srv WalletSolidityServer) {
	s.RegisterService(&_WalletSolidity_serviceDesc, srv)
}

func _WalletSolidity_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetAccount(ctx, req.(*core.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetAccountById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetAccountById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/GetAccountById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetAccountById(ctx, req.(*core.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_ListWitnesses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).ListWitnesses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/ListWitnesses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).ListWitnesses(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetAssetIssueList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetAssetIssueList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/GetAssetIssueList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetAssetIssueList(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetPaginatedAssetIssueList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaginatedMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetPaginatedAssetIssueList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/GetPaginatedAssetIssueList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetPaginatedAssetIssueList(ctx, req.(*PaginatedMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetAssetIssueByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetAssetIssueByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/GetAssetIssueByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetAssetIssueByName(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetAssetIssueListByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetAssetIssueListByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/GetAssetIssueListByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetAssetIssueListByName(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetAssetIssueById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetAssetIssueById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/GetAssetIssueById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetAssetIssueById(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetNowBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetNowBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/GetNowBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetNowBlock(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetNowBlock2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetNowBlock2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/GetNowBlock2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetNowBlock2(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetBlockByNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumberMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetBlockByNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/GetBlockByNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetBlockByNum(ctx, req.(*NumberMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetBlockByNum2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumberMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetBlockByNum2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/GetBlockByNum2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetBlockByNum2(ctx, req.(*NumberMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetTransactionCountByBlockNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumberMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetTransactionCountByBlockNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/GetTransactionCountByBlockNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetTransactionCountByBlockNum(ctx, req.(*NumberMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetDelegatedResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelegatedResourceMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetDelegatedResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/GetDelegatedResource",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetDelegatedResource(ctx, req.(*DelegatedResourceMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetDelegatedResourceAccountIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetDelegatedResourceAccountIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/GetDelegatedResourceAccountIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetDelegatedResourceAccountIndex(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetExchangeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetExchangeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/GetExchangeById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetExchangeById(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_ListExchanges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).ListExchanges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/ListExchanges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).ListExchanges(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetTransactionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetTransactionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/GetTransactionById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetTransactionById(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetTransactionInfoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetTransactionInfoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/GetTransactionInfoById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetTransactionInfoById(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GenerateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GenerateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/GenerateAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GenerateAddress(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetMerkleTreeVoucherInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.OutputPointInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetMerkleTreeVoucherInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/GetMerkleTreeVoucherInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetMerkleTreeVoucherInfo(ctx, req.(*core.OutputPointInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_ScanNoteByIvk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IvkDecryptParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).ScanNoteByIvk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/ScanNoteByIvk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).ScanNoteByIvk(ctx, req.(*IvkDecryptParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_ScanAndMarkNoteByIvk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IvkDecryptAndMarkParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).ScanAndMarkNoteByIvk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/ScanAndMarkNoteByIvk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).ScanAndMarkNoteByIvk(ctx, req.(*IvkDecryptAndMarkParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_ScanNoteByOvk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OvkDecryptParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).ScanNoteByOvk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/ScanNoteByOvk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).ScanNoteByOvk(ctx, req.(*OvkDecryptParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_IsSpend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoteParameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).IsSpend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/IsSpend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).IsSpend(ctx, req.(*NoteParameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_ScanShieldedTRC20NotesByIvk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IvkDecryptTRC20Parameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).ScanShieldedTRC20NotesByIvk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/ScanShieldedTRC20NotesByIvk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).ScanShieldedTRC20NotesByIvk(ctx, req.(*IvkDecryptTRC20Parameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_ScanShieldedTRC20NotesByOvk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OvkDecryptTRC20Parameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).ScanShieldedTRC20NotesByOvk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/ScanShieldedTRC20NotesByOvk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).ScanShieldedTRC20NotesByOvk(ctx, req.(*OvkDecryptTRC20Parameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_IsShieldedTRC20ContractNoteSpent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NfTRC20Parameters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).IsShieldedTRC20ContractNoteSpent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/IsShieldedTRC20ContractNoteSpent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).IsShieldedTRC20ContractNoteSpent(ctx, req.(*NfTRC20Parameters))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetRewardInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetRewardInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/GetRewardInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetRewardInfo(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetBrokerageInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetBrokerageInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/GetBrokerageInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetBrokerageInfo(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_TriggerConstantContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.TriggerSmartContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).TriggerConstantContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/TriggerConstantContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).TriggerConstantContract(ctx, req.(*core.TriggerSmartContract))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetTransactionInfoByBlockNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumberMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetTransactionInfoByBlockNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/GetTransactionInfoByBlockNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetTransactionInfoByBlockNum(ctx, req.(*NumberMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetMarketOrderById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetMarketOrderById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/GetMarketOrderById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetMarketOrderById(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetMarketOrderByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BytesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetMarketOrderByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/GetMarketOrderByAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetMarketOrderByAccount(ctx, req.(*BytesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetMarketPriceByPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.MarketOrderPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetMarketPriceByPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/GetMarketPriceByPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetMarketPriceByPair(ctx, req.(*core.MarketOrderPair))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetMarketOrderListByPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(core.MarketOrderPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetMarketOrderListByPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/GetMarketOrderListByPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetMarketOrderListByPair(ctx, req.(*core.MarketOrderPair))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetMarketPairList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetMarketPairList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/GetMarketPairList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetMarketPairList(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletSolidity_GetBurnTrx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletSolidityServer).GetBurnTrx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletSolidity/GetBurnTrx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletSolidityServer).GetBurnTrx(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _WalletSolidity_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.WalletSolidity",
	HandlerType: (*WalletSolidityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAccount",
			Handler:    _WalletSolidity_GetAccount_Handler,
		},
		{
			MethodName: "GetAccountById",
			Handler:    _WalletSolidity_GetAccountById_Handler,
		},
		{
			MethodName: "ListWitnesses",
			Handler:    _WalletSolidity_ListWitnesses_Handler,
		},
		{
			MethodName: "GetAssetIssueList",
			Handler:    _WalletSolidity_GetAssetIssueList_Handler,
		},
		{
			MethodName: "GetPaginatedAssetIssueList",
			Handler:    _WalletSolidity_GetPaginatedAssetIssueList_Handler,
		},
		{
			MethodName: "GetAssetIssueByName",
			Handler:    _WalletSolidity_GetAssetIssueByName_Handler,
		},
		{
			MethodName: "GetAssetIssueListByName",
			Handler:    _WalletSolidity_GetAssetIssueListByName_Handler,
		},
		{
			MethodName: "GetAssetIssueById",
			Handler:    _WalletSolidity_GetAssetIssueById_Handler,
		},
		{
			MethodName: "GetNowBlock",
			Handler:    _WalletSolidity_GetNowBlock_Handler,
		},
		{
			MethodName: "GetNowBlock2",
			Handler:    _WalletSolidity_GetNowBlock2_Handler,
		},
		{
			MethodName: "GetBlockByNum",
			Handler:    _WalletSolidity_GetBlockByNum_Handler,
		},
		{
			MethodName: "GetBlockByNum2",
			Handler:    _WalletSolidity_GetBlockByNum2_Handler,
		},
		{
			MethodName: "GetTransactionCountByBlockNum",
			Handler:    _WalletSolidity_GetTransactionCountByBlockNum_Handler,
		},
		{
			MethodName: "GetDelegatedResource",
			Handler:    _WalletSolidity_GetDelegatedResource_Handler,
		},
		{
			MethodName: "GetDelegatedResourceAccountIndex",
			Handler:    _WalletSolidity_GetDelegatedResourceAccountIndex_Handler,
		},
		{
			MethodName: "GetExchangeById",
			Handler:    _WalletSolidity_GetExchangeById_Handler,
		},
		{
			MethodName: "ListExchanges",
			Handler:    _WalletSolidity_ListExchanges_Handler,
		},
		{
			MethodName: "GetTransactionById",
			Handler:    _WalletSolidity_GetTransactionById_Handler,
		},
		{
			MethodName: "GetTransactionInfoById",
			Handler:    _WalletSolidity_GetTransactionInfoById_Handler,
		},
		{
			MethodName: "GenerateAddress",
			Handler:    _WalletSolidity_GenerateAddress_Handler,
		},
		{
			MethodName: "GetMerkleTreeVoucherInfo",
			Handler:    _WalletSolidity_GetMerkleTreeVoucherInfo_Handler,
		},
		{
			MethodName: "ScanNoteByIvk",
			Handler:    _WalletSolidity_ScanNoteByIvk_Handler,
		},
		{
			MethodName: "ScanAndMarkNoteByIvk",
			Handler:    _WalletSolidity_ScanAndMarkNoteByIvk_Handler,
		},
		{
			MethodName: "ScanNoteByOvk",
			Handler:    _WalletSolidity_ScanNoteByOvk_Handler,
		},
		{
			MethodName: "IsSpend",
			Handler:    _WalletSolidity_IsSpend_Handler,
		},
		{
			MethodName: "ScanShieldedTRC20NotesByIvk",
			Handler:    _WalletSolidity_ScanShieldedTRC20NotesByIvk_Handler,
		},
		{
			MethodName: "ScanShieldedTRC20NotesByOvk",
			Handler:    _WalletSolidity_ScanShieldedTRC20NotesByOvk_Handler,
		},
		{
			MethodName: "IsShieldedTRC20ContractNoteSpent",
			Handler:    _WalletSolidity_IsShieldedTRC20ContractNoteSpent_Handler,
		},
		{
			MethodName: "GetRewardInfo",
			Handler:    _WalletSolidity_GetRewardInfo_Handler,
		},
		{
			MethodName: "GetBrokerageInfo",
			Handler:    _WalletSolidity_GetBrokerageInfo_Handler,
		},
		{
			MethodName: "TriggerConstantContract",
			Handler:    _WalletSolidity_TriggerConstantContract_Handler,
		},
		{
			MethodName: "GetTransactionInfoByBlockNum",
			Handler:    _WalletSolidity_GetTransactionInfoByBlockNum_Handler,
		},
		{
			MethodName: "GetMarketOrderById",
			Handler:    _WalletSolidity_GetMarketOrderById_Handler,
		},
		{
			MethodName: "GetMarketOrderByAccount",
			Handler:    _WalletSolidity_GetMarketOrderByAccount_Handler,
		},
		{
			MethodName: "GetMarketPriceByPair",
			Handler:    _WalletSolidity_GetMarketPriceByPair_Handler,
		},
		{
			MethodName: "GetMarketOrderListByPair",
			Handler:    _WalletSolidity_GetMarketOrderListByPair_Handler,
		},
		{
			MethodName: "GetMarketPairList",
			Handler:    _WalletSolidity_GetMarketPairList_Handler,
		},
		{
			MethodName: "GetBurnTrx",
			Handler:    _WalletSolidity_GetBurnTrx_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}

// WalletExtensionClient is the client API for WalletExtension service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WalletExtensionClient interface {
	//Please use GetTransactionsFromThis2 instead of this function.
	GetTransactionsFromThis(ctx context.Context, in *AccountPaginated, opts ...grpc.CallOption) (*TransactionList, error)
	//Use this function instead of GetTransactionsFromThis.
	GetTransactionsFromThis2(ctx context.Context, in *AccountPaginated, opts ...grpc.CallOption) (*TransactionListExtention, error)
	//Please use GetTransactionsToThis2 instead of this function.
	GetTransactionsToThis(ctx context.Context, in *AccountPaginated, opts ...grpc.CallOption) (*TransactionList, error)
	//Use this function instead of GetTransactionsToThis.
	GetTransactionsToThis2(ctx context.Context, in *AccountPaginated, opts ...grpc.CallOption) (*TransactionListExtention, error)
}

type walletExtensionClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletExtensionClient(cc grpc.ClientConnInterface) WalletExtensionClient {
	return &walletExtensionClient{cc}
}

func (c *walletExtensionClient) GetTransactionsFromThis(ctx context.Context, in *AccountPaginated, opts ...grpc.CallOption) (*TransactionList, error) {
	out := new(TransactionList)
	err := c.cc.Invoke(ctx, "/protocol.WalletExtension/GetTransactionsFromThis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletExtensionClient) GetTransactionsFromThis2(ctx context.Context, in *AccountPaginated, opts ...grpc.CallOption) (*TransactionListExtention, error) {
	out := new(TransactionListExtention)
	err := c.cc.Invoke(ctx, "/protocol.WalletExtension/GetTransactionsFromThis2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletExtensionClient) GetTransactionsToThis(ctx context.Context, in *AccountPaginated, opts ...grpc.CallOption) (*TransactionList, error) {
	out := new(TransactionList)
	err := c.cc.Invoke(ctx, "/protocol.WalletExtension/GetTransactionsToThis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletExtensionClient) GetTransactionsToThis2(ctx context.Context, in *AccountPaginated, opts ...grpc.CallOption) (*TransactionListExtention, error) {
	out := new(TransactionListExtention)
	err := c.cc.Invoke(ctx, "/protocol.WalletExtension/GetTransactionsToThis2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletExtensionServer is the server API for WalletExtension service.
type WalletExtensionServer interface {
	//Please use GetTransactionsFromThis2 instead of this function.
	GetTransactionsFromThis(context.Context, *AccountPaginated) (*TransactionList, error)
	//Use this function instead of GetTransactionsFromThis.
	GetTransactionsFromThis2(context.Context, *AccountPaginated) (*TransactionListExtention, error)
	//Please use GetTransactionsToThis2 instead of this function.
	GetTransactionsToThis(context.Context, *AccountPaginated) (*TransactionList, error)
	//Use this function instead of GetTransactionsToThis.
	GetTransactionsToThis2(context.Context, *AccountPaginated) (*TransactionListExtention, error)
}

// UnimplementedWalletExtensionServer can be embedded to have forward compatible implementations.
type UnimplementedWalletExtensionServer struct {
}

func (*UnimplementedWalletExtensionServer) GetTransactionsFromThis(context.Context, *AccountPaginated) (*TransactionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionsFromThis not implemented")
}
func (*UnimplementedWalletExtensionServer) GetTransactionsFromThis2(context.Context, *AccountPaginated) (*TransactionListExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionsFromThis2 not implemented")
}
func (*UnimplementedWalletExtensionServer) GetTransactionsToThis(context.Context, *AccountPaginated) (*TransactionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionsToThis not implemented")
}
func (*UnimplementedWalletExtensionServer) GetTransactionsToThis2(context.Context, *AccountPaginated) (*TransactionListExtention, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionsToThis2 not implemented")
}

func RegisterWalletExtensionServer(s *grpc.Server, srv WalletExtensionServer) {
	s.RegisterService(&_WalletExtension_serviceDesc, srv)
}

func _WalletExtension_GetTransactionsFromThis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountPaginated)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletExtensionServer).GetTransactionsFromThis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletExtension/GetTransactionsFromThis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletExtensionServer).GetTransactionsFromThis(ctx, req.(*AccountPaginated))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletExtension_GetTransactionsFromThis2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountPaginated)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletExtensionServer).GetTransactionsFromThis2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletExtension/GetTransactionsFromThis2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletExtensionServer).GetTransactionsFromThis2(ctx, req.(*AccountPaginated))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletExtension_GetTransactionsToThis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountPaginated)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletExtensionServer).GetTransactionsToThis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletExtension/GetTransactionsToThis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletExtensionServer).GetTransactionsToThis(ctx, req.(*AccountPaginated))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletExtension_GetTransactionsToThis2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountPaginated)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletExtensionServer).GetTransactionsToThis2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.WalletExtension/GetTransactionsToThis2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletExtensionServer).GetTransactionsToThis2(ctx, req.(*AccountPaginated))
	}
	return interceptor(ctx, in, info, handler)
}

var _WalletExtension_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.WalletExtension",
	HandlerType: (*WalletExtensionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTransactionsFromThis",
			Handler:    _WalletExtension_GetTransactionsFromThis_Handler,
		},
		{
			MethodName: "GetTransactionsFromThis2",
			Handler:    _WalletExtension_GetTransactionsFromThis2_Handler,
		},
		{
			MethodName: "GetTransactionsToThis",
			Handler:    _WalletExtension_GetTransactionsToThis_Handler,
		},
		{
			MethodName: "GetTransactionsToThis2",
			Handler:    _WalletExtension_GetTransactionsToThis2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}

// DatabaseClient is the client API for Database service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DatabaseClient interface {
	// for tapos
	GetBlockReference(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*BlockReference, error)
	GetDynamicProperties(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*core.DynamicProperties, error)
	GetNowBlock(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*core.Block, error)
	GetBlockByNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*core.Block, error)
}

type databaseClient struct {
	cc grpc.ClientConnInterface
}

func NewDatabaseClient(cc grpc.ClientConnInterface) DatabaseClient {
	return &databaseClient{cc}
}

func (c *databaseClient) GetBlockReference(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*BlockReference, error) {
	out := new(BlockReference)
	err := c.cc.Invoke(ctx, "/protocol.Database/getBlockReference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) GetDynamicProperties(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*core.DynamicProperties, error) {
	out := new(core.DynamicProperties)
	err := c.cc.Invoke(ctx, "/protocol.Database/GetDynamicProperties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) GetNowBlock(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*core.Block, error) {
	out := new(core.Block)
	err := c.cc.Invoke(ctx, "/protocol.Database/GetNowBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseClient) GetBlockByNum(ctx context.Context, in *NumberMessage, opts ...grpc.CallOption) (*core.Block, error) {
	out := new(core.Block)
	err := c.cc.Invoke(ctx, "/protocol.Database/GetBlockByNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatabaseServer is the server API for Database service.
type DatabaseServer interface {
	// for tapos
	GetBlockReference(context.Context, *EmptyMessage) (*BlockReference, error)
	GetDynamicProperties(context.Context, *EmptyMessage) (*core.DynamicProperties, error)
	GetNowBlock(context.Context, *EmptyMessage) (*core.Block, error)
	GetBlockByNum(context.Context, *NumberMessage) (*core.Block, error)
}

// UnimplementedDatabaseServer can be embedded to have forward compatible implementations.
type UnimplementedDatabaseServer struct {
}

func (*UnimplementedDatabaseServer) GetBlockReference(context.Context, *EmptyMessage) (*BlockReference, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockReference not implemented")
}
func (*UnimplementedDatabaseServer) GetDynamicProperties(context.Context, *EmptyMessage) (*core.DynamicProperties, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDynamicProperties not implemented")
}
func (*UnimplementedDatabaseServer) GetNowBlock(context.Context, *EmptyMessage) (*core.Block, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNowBlock not implemented")
}
func (*UnimplementedDatabaseServer) GetBlockByNum(context.Context, *NumberMessage) (*core.Block, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByNum not implemented")
}

func RegisterDatabaseServer(s *grpc.Server, srv DatabaseServer) {
	s.RegisterService(&_Database_serviceDesc, srv)
}

func _Database_GetBlockReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).GetBlockReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Database/GetBlockReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).GetBlockReference(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_GetDynamicProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).GetDynamicProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Database/GetDynamicProperties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).GetDynamicProperties(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_GetNowBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).GetNowBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Database/GetNowBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).GetNowBlock(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Database_GetBlockByNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumberMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseServer).GetBlockByNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Database/GetBlockByNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseServer).GetBlockByNum(ctx, req.(*NumberMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Database_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.Database",
	HandlerType: (*DatabaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getBlockReference",
			Handler:    _Database_GetBlockReference_Handler,
		},
		{
			MethodName: "GetDynamicProperties",
			Handler:    _Database_GetDynamicProperties_Handler,
		},
		{
			MethodName: "GetNowBlock",
			Handler:    _Database_GetNowBlock_Handler,
		},
		{
			MethodName: "GetBlockByNum",
			Handler:    _Database_GetBlockByNum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}

// MonitorClient is the client API for Monitor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MonitorClient interface {
	GetStatsInfo(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*core.MetricsInfo, error)
}

type monitorClient struct {
	cc grpc.ClientConnInterface
}

func NewMonitorClient(cc grpc.ClientConnInterface) MonitorClient {
	return &monitorClient{cc}
}

func (c *monitorClient) GetStatsInfo(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*core.MetricsInfo, error) {
	out := new(core.MetricsInfo)
	err := c.cc.Invoke(ctx, "/protocol.Monitor/GetStatsInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MonitorServer is the server API for Monitor service.
type MonitorServer interface {
	GetStatsInfo(context.Context, *EmptyMessage) (*core.MetricsInfo, error)
}

// UnimplementedMonitorServer can be embedded to have forward compatible implementations.
type UnimplementedMonitorServer struct {
}

func (*UnimplementedMonitorServer) GetStatsInfo(context.Context, *EmptyMessage) (*core.MetricsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatsInfo not implemented")
}

func RegisterMonitorServer(s *grpc.Server, srv MonitorServer) {
	s.RegisterService(&_Monitor_serviceDesc, srv)
}

func _Monitor_GetStatsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MonitorServer).GetStatsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.Monitor/GetStatsInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MonitorServer).GetStatsInfo(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _Monitor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.Monitor",
	HandlerType: (*MonitorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatsInfo",
			Handler:    _Monitor_GetStatsInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}

// NetworkClient is the client API for Network service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NetworkClient interface {
}

type networkClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkClient(cc grpc.ClientConnInterface) NetworkClient {
	return &networkClient{cc}
}

// NetworkServer is the server API for Network service.
type NetworkServer interface {
}

// UnimplementedNetworkServer can be embedded to have forward compatible implementations.
type UnimplementedNetworkServer struct {
}

func RegisterNetworkServer(s *grpc.Server, srv NetworkServer) {
	s.RegisterService(&_Network_serviceDesc, srv)
}

var _Network_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.Network",
	HandlerType: (*NetworkServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "api/api.proto",
}
